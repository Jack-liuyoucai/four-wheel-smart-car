###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     07/Jan/2012  00:00:06 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\Kinetis\IARK60X256\10_MK60X256_test_pll\src\Project_S #
#                    ettings\Startup_Code\start.c                             #
#    Command line =  F:\Kinetis\IARK60X256\10_MK60X256_test_pll\src\Project_S #
#                    ettings\Startup_Code\start.c -D IAR -D TWR_K60N512 -lCN  #
#                    F:\Kinetis\IARK60X256\10_MK60X256_test_pll\bin\Ram\List\ #
#                     -lB F:\Kinetis\IARK60X256\10_MK60X256_test_pll\bin\Ram\ #
#                    List\ -o F:\Kinetis\IARK60X256\10_MK60X256_test_pll\bin\ #
#                    Ram\Obj\ --no_cse --no_unroll --no_inline                #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I F:\Kinetis\IARK60X256\10_MK60X256_test_pll\src #
#                    \Sources\H\ -I F:\Kinetis\IARK60X256\10_MK60X256_test_pl #
#                    l\src\Sources\H\Component_H\ -I                          #
#                    F:\Kinetis\IARK60X256\10_MK60X256_test_pll\src\Sources\H #
#                    \Frame_H\ -Ol --use_c++_inline                           #
#    List file    =  F:\Kinetis\IARK60X256\10_MK60X256_test_pll\bin\Ram\List\ #
#                    start.lst                                                #
#    Object file  =  F:\Kinetis\IARK60X256\10_MK60X256_test_pll\bin\Ram\Obj\s #
#                    tart.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

F:\Kinetis\IARK60X256\10_MK60X256_test_pll\src\Project_Settings\Startup_Code\start.c
      1          /********************************************************
      2          【平    台】龙丘CORTEX-M4开发板/系统板
      3          【编    写】龙丘
      4          【Designed】by Chiu Sir
      5          【E-mail  】chiusir@yahoo.cn
      6          【软件版本】V1.0
      7          【最后更新】2011年12月25日
      8          【相关信息参考下列地址】
      9          【网    站】http://www.lqist.cn
     10          【淘宝店铺】http://shop36265907.taobao.com
     11          【dev.env.】Code Warrior 10.1
     12          【Target  】CORTEX-M4
     13          【Crystal 】50.000Mhz
     14          【busclock】？MHz
     15          【pllclock】125MHz
     16          ********************************************************/ 
     17          //-------------------------------------------------------------------------*
     18          // 文件名:start.c                                                          *
     19          // 说  明: CPU启动后进行系统配置                                           *
     20          //-------------------------------------------------------------------------*
     21          
     22          //头文件
     23          #include "common.h"
     24          #include "wdog.h"
     25          #include "sysinit.h"
     26          
     27          #pragma section = ".data"
     28          #pragma section = ".data_init"
     29          #pragma section = ".bss"
     30          #pragma section = "CodeRelocate"
     31          #pragma section = "CodeRelocateRam" 
     32          
     33          //内部函数声明
     34          //-------------------------------------------------------------------------*
     35          //函数名: common_startup                                                   *
     36          //功  能: 复制中断向量表到RAM中                                            * 
     37          //参  数: 无								   *	
     38          //说  明: 将ROM中的初始化数据拷贝到RAM中                                   *
     39          //-------------------------------------------------------------------------*
     40          void common_startup(void);
     41          
     42          //-------------------------------------------------------------------------*
     43          //函数名: start                                                            *
     44          //功  能: 系统启动                                                         * 
     45          //参  数: 无								   *	
     46          //说  明: 无                                                               *
     47          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     48          void start(void)
     49          {
   \                     start:
   \   00000000   80B5               PUSH     {R7,LR}
     50              //关闭看门狗
     51              wdog_disable();		
   \   00000002   ........           BL       wdog_disable
     52              //复制中断向量表到RAM中
     53              common_startup();	
   \   00000006   ........           BL       common_startup
     54              //系统设置,龙丘注销此部分，系统初始化放在MAIN()中
     55              //sysinit();			
     56              //进入主函数
     57              main();				
   \   0000000A   ........           BL       main
     58          }
   \   0000000E   01BD               POP      {R0,PC}          ;; return
     59          
     60          
     61          //-------------------------------------------------------------------------*
     62          //函数名: common_startup                                                   *
     63          //功  能: 复制中断向量表到RAM中                                            * 
     64          //参  数: 无								   *	
     65          //说  明: 将ROM中的初始化数据拷贝到RAM中                                   *
     66          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     67          void common_startup(void)
     68          {
   \                     common_startup:
   \   00000000   80B5               PUSH     {R7,LR}
     69              /* Declare a counter we'll use in all of the copy loops */
     70              uint32 n;
     71           
     72           
     73              /* Addresses for VECTOR_TABLE and VECTOR_RAM come from the linker file */  
     74              extern uint32 __VECTOR_TABLE[];
     75              extern uint32 __VECTOR_RAM[];
     76          
     77              /* Copy the vector table to RAM */
     78              if (__VECTOR_RAM != __VECTOR_TABLE)
   \   00000002   ....               LDR.N    R0,??DataTable0
   \   00000004   ....               LDR.N    R1,??DataTable0_1
   \   00000006   8842               CMP      R0,R1
   \   00000008   0BD0               BEQ.N    ??common_startup_0
     79              {
     80                  for (n = 0; n < 0x410; n++)
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   06E0               B.N      ??common_startup_1
     81                      __VECTOR_RAM[n] = __VECTOR_TABLE[n];
   \                     ??common_startup_2:
   \   0000000E   ....               LDR.N    R1,??DataTable0
   \   00000010   ....               LDR.N    R2,??DataTable0_1
   \   00000012   52F82020           LDR      R2,[R2, R0, LSL #+2]
   \   00000016   41F82020           STR      R2,[R1, R0, LSL #+2]
   \   0000001A   401C               ADDS     R0,R0,#+1
   \                     ??common_startup_1:
   \   0000001C   B0F5826F           CMP      R0,#+1040
   \   00000020   F5D3               BCC.N    ??common_startup_2
     82              }
     83              /* Point the VTOR to the new copy of the vector table */
     84              write_vtor((uint32)__VECTOR_RAM);    
   \                     ??common_startup_0:
   \   00000022   ....               LDR.N    R0,??DataTable0
   \   00000024   ........           BL       write_vtor
     85              
     86              /* Get the addresses for the .data section (initialized data section) */
     87              uint8* data_ram = __section_begin(".data");
   \   00000028   ....               LDR.N    R1,??DataTable0_2
     88              uint8* data_rom = __section_begin(".data_init");
   \   0000002A   ....               LDR.N    R2,??DataTable0_3
     89              uint8* data_rom_end = __section_end(".data_init");
   \   0000002C   ....               LDR.N    R0,??DataTable0_4
     90              
     91              /* Copy initialized data from ROM to RAM */
     92              n = data_rom_end - data_rom;
   \   0000002E   801A               SUBS     R0,R0,R2
   \   00000030   03E0               B.N      ??common_startup_3
     93              while (n--)
     94                *data_ram++ = *data_rom++;
   \                     ??common_startup_4:
   \   00000032   1378               LDRB     R3,[R2, #+0]
   \   00000034   0B70               STRB     R3,[R1, #+0]
   \   00000036   521C               ADDS     R2,R2,#+1
   \   00000038   491C               ADDS     R1,R1,#+1
   \                     ??common_startup_3:
   \   0000003A   0300               MOVS     R3,R0
   \   0000003C   581E               SUBS     R0,R3,#+1
   \   0000003E   002B               CMP      R3,#+0
   \   00000040   F7D1               BNE.N    ??common_startup_4
     95           
     96           
     97              /* Get the addresses for the .bss section (zero-initialized data) */
     98              uint8* bss_start = __section_begin(".bss");
   \   00000042   ....               LDR.N    R1,??DataTable0_5
     99              uint8* bss_end = __section_end(".bss");
   \   00000044   ....               LDR.N    R0,??DataTable0_6
    100              
    101              /* Clear the zero-initialized data section */
    102              n = bss_end - bss_start;
   \   00000046   401A               SUBS     R0,R0,R1
   \   00000048   02E0               B.N      ??common_startup_5
    103              while(n--)
    104                *bss_start++ = 0;    
   \                     ??common_startup_6:
   \   0000004A   0022               MOVS     R2,#+0
   \   0000004C   0A70               STRB     R2,[R1, #+0]
   \   0000004E   491C               ADDS     R1,R1,#+1
   \                     ??common_startup_5:
   \   00000050   0200               MOVS     R2,R0
   \   00000052   501E               SUBS     R0,R2,#+1
   \   00000054   002A               CMP      R2,#+0
   \   00000056   F8D1               BNE.N    ??common_startup_6
    105              
    106              /* Get addresses for any code sections that need to be copied from ROM to RAM.
    107               * The IAR tools have a predefined keyword that can be used to mark individual
    108               * functions for execution from RAM. Add "__ramfunc" before the return type in
    109               * the function prototype for any routines you need to execute from RAM instead 
    110               * of ROM. ex: __ramfunc void foo(void);
    111               */
    112              uint8* code_relocate_ram = __section_begin("CodeRelocateRam");
   \   00000058   ....               LDR.N    R1,??DataTable0_7
    113              uint8* code_relocate = __section_begin("CodeRelocate");
   \   0000005A   ....               LDR.N    R2,??DataTable0_8
    114              uint8* code_relocate_end = __section_end("CodeRelocate");
   \   0000005C   ....               LDR.N    R0,??DataTable0_9
    115              
    116              /* Copy functions from ROM to RAM */
    117              n = code_relocate_end - code_relocate;
   \   0000005E   801A               SUBS     R0,R0,R2
   \   00000060   03E0               B.N      ??common_startup_7
    118              while (n--)
    119                *code_relocate_ram++ = *code_relocate++;
   \                     ??common_startup_8:
   \   00000062   1378               LDRB     R3,[R2, #+0]
   \   00000064   0B70               STRB     R3,[R1, #+0]
   \   00000066   521C               ADDS     R2,R2,#+1
   \   00000068   491C               ADDS     R1,R1,#+1
   \                     ??common_startup_7:
   \   0000006A   0300               MOVS     R3,R0
   \   0000006C   581E               SUBS     R0,R3,#+1
   \   0000006E   002B               CMP      R3,#+0
   \   00000070   F7D1               BNE.N    ??common_startup_8
    120          }
   \   00000072   01BD               POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     __VECTOR_RAM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   ........           DC32     __VECTOR_TABLE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   ........           DC32     SFB(`.data`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   ........           DC32     SFB(`.data_init`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_4:
   \   00000000   ........           DC32     SFE(`.data_init`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_5:
   \   00000000   ........           DC32     SFB(`.bss`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_6:
   \   00000000   ........           DC32     SFE(`.bss`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_7:
   \   00000000   ........           DC32     SFB(CodeRelocateRam)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_8:
   \   00000000   ........           DC32     SFB(CodeRelocate)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_9:
   \   00000000   ........           DC32     SFE(CodeRelocate)

   Maximum stack usage in bytes:

     Function       .cstack
     --------       -------
     common_startup      8
     start               8


   Section sizes:

     Function/Label Bytes
     -------------- -----
     start            16
     common_startup  116
     ??DataTable0      4
     ??DataTable0_1    4
     ??DataTable0_2    4
     ??DataTable0_3    4
     ??DataTable0_4    4
     ??DataTable0_5    4
     ??DataTable0_6    4
     ??DataTable0_7    4
     ??DataTable0_8    4
     ??DataTable0_9    4

 
 172 bytes in section .text
 
 172 bytes of CODE memory

Errors: none
Warnings: none
