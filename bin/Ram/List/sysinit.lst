###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     07/Jan/2012  00:04:05 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\Kinetis\IARK60X256\10_MK60X256_test_pll\src\Sources\C #
#                    \Frame_C\sysinit.c                                       #
#    Command line =  F:\Kinetis\IARK60X256\10_MK60X256_test_pll\src\Sources\C #
#                    \Frame_C\sysinit.c -D IAR -D TWR_K60N512 -lCN            #
#                    F:\Kinetis\IARK60X256\10_MK60X256_test_pll\bin\Ram\List\ #
#                     -lB F:\Kinetis\IARK60X256\10_MK60X256_test_pll\bin\Ram\ #
#                    List\ -o F:\Kinetis\IARK60X256\10_MK60X256_test_pll\bin\ #
#                    Ram\Obj\ --no_cse --no_unroll --no_inline                #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I F:\Kinetis\IARK60X256\10_MK60X256_test_pll\src #
#                    \Sources\H\ -I F:\Kinetis\IARK60X256\10_MK60X256_test_pl #
#                    l\src\Sources\H\Component_H\ -I                          #
#                    F:\Kinetis\IARK60X256\10_MK60X256_test_pll\src\Sources\H #
#                    \Frame_H\ -Ol --use_c++_inline                           #
#    List file    =  F:\Kinetis\IARK60X256\10_MK60X256_test_pll\bin\Ram\List\ #
#                    sysinit.lst                                              #
#    Object file  =  F:\Kinetis\IARK60X256\10_MK60X256_test_pll\bin\Ram\Obj\s #
#                    ysinit.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

F:\Kinetis\IARK60X256\10_MK60X256_test_pll\src\Sources\C\Frame_C\sysinit.c
      1          //-------------------------------------------------------------------------*
      2          // 文件名:sysinit.c                                                        *
      3          // 说  明: 系统配置文件                                                    *
      4          //-------------------------------------------------------------------------*
      5          
      6          #include "sysinit.h"	//头文件
      7          
      8          //全局变量声明

   \                                 In section .bss, align 4
      9          int core_clk_khz;
   \                     core_clk_khz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     10          int core_clk_mhz;
   \                     core_clk_mhz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     11          int periph_clk_khz;
   \                     periph_clk_khz:
   \   00000000                      DS8 4
     12          
     13          //-------------------------------------------------------------------------*
     14          //函数名: sysinit                                                          *
     15          //功  能: 系统设置                                                         * 
     16          //参  数: 无						  	           *	
     17          //返  回: 无                                                               *
     18          //说  明: 无                                                               *
     19          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     20          void sysinit (void)
     21          {
   \                     sysinit:
   \   00000000   80B5               PUSH     {R7,LR}
     22              //使能IO端口时钟    
     23              SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK
     24                                        | SIM_SCGC5_PORTB_MASK
     25                                        | SIM_SCGC5_PORTC_MASK
     26                                        | SIM_SCGC5_PORTD_MASK
     27                                        | SIM_SCGC5_PORTE_MASK );
   \   00000002   ....               LDR.N    R0,??DataTable3  ;; 0x40048038
   \   00000004   0068               LDR      R0,[R0, #+0]
   \   00000006   50F47850           ORRS     R0,R0,#0x3E00
   \   0000000A   ....               LDR.N    R1,??DataTable3  ;; 0x40048038
   \   0000000C   0860               STR      R0,[R1, #+0]
     28          
     29              //开启系统时钟
     30              core_clk_mhz = pll_init(CORE_CLK_MHZ, REF_CLK);
   \   0000000E   0321               MOVS     R1,#+3
   \   00000010   0220               MOVS     R0,#+2
   \   00000012   ........           BL       pll_init
   \   00000016   ....               LDR.N    R1,??DataTable3_1
   \   00000018   0860               STR      R0,[R1, #+0]
     31              //通过pll_init函数的返回值来计算内核时钟和外设时钟
     32              core_clk_khz = core_clk_mhz * 1000;
   \   0000001A   ....               LDR.N    R0,??DataTable3_1
   \   0000001C   0068               LDR      R0,[R0, #+0]
   \   0000001E   4FF47A71           MOV      R1,#+1000
   \   00000022   4843               MULS     R0,R1,R0
   \   00000024   ....               LDR.N    R1,??DataTable3_2
   \   00000026   0860               STR      R0,[R1, #+0]
     33              periph_clk_khz = core_clk_khz / (((SIM_CLKDIV1 & SIM_CLKDIV1_OUTDIV2_MASK) >> 24)+ 1);
   \   00000028   ....               LDR.N    R0,??DataTable3_2
   \   0000002A   0068               LDR      R0,[R0, #+0]
   \   0000002C   ....               LDR.N    R1,??DataTable3_3  ;; 0x40048044
   \   0000002E   0968               LDR      R1,[R1, #+0]
   \   00000030   C1F30361           UBFX     R1,R1,#+24,#+4
   \   00000034   491C               ADDS     R1,R1,#+1
   \   00000036   B0FBF1F0           UDIV     R0,R0,R1
   \   0000003A   ....               LDR.N    R1,??DataTable3_4
   \   0000003C   0860               STR      R0,[R1, #+0]
     34              //使能跟踪时钟，用于调试
     35              trace_clk_init();	
   \   0000003E   ........           BL       trace_clk_init
     36              //FlexBus时钟初始化
     37              fb_clk_init();
   \   00000042   ........           BL       fb_clk_init
     38          
     39          }
   \   00000046   01BD               POP      {R0,PC}          ;; return
     40          
     41          //-------------------------------------------------------------------------*
     42          //函数名: trace_clk_init                                                   *
     43          //功  能: 跟踪时钟初始化                                                   * 
     44          //参  数: 无							  	   *	
     45          //返  回: 无                                                               *
     46          //说  明: 用于调试                                                         *
     47          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     48          void trace_clk_init(void)
     49          {
     50              //设置跟踪时钟为内核时钟
     51              SIM_SOPT2 |= SIM_SOPT2_TRACECLKSEL_MASK;	
   \                     trace_clk_init:
   \   00000000   ....               LDR.N    R0,??DataTable3_5  ;; 0x40048004
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   50F48050           ORRS     R0,R0,#0x1000
   \   00000008   ....               LDR.N    R1,??DataTable3_5  ;; 0x40048004
   \   0000000A   0860               STR      R0,[R1, #+0]
     52              //在PTA6引脚上使能TRACE_CLKOU功能
     53              PORTA_PCR6 = ( PORT_PCR_MUX(0x7));
   \   0000000C   ....               LDR.N    R0,??DataTable3_6  ;; 0x40049018
   \   0000000E   4FF4E061           MOV      R1,#+1792
   \   00000012   0160               STR      R1,[R0, #+0]
     54          }
   \   00000014   7047               BX       LR               ;; return
     55          
     56          //-------------------------------------------------------------------------*
     57          //函数名: fb_clk_init                                                      *
     58          //功  能: FlexBus时钟初始化                                                * 
     59          //参  数: 无								   *	
     60          //返  回: 无                                                               *
     61          //说  明:                                                                  *
     62          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     63          void fb_clk_init(void)
     64          {
     65              //设置跟踪时钟为内核时钟
     66              SIM_SOPT2 |= SIM_SOPT2_TRACECLKSEL_MASK;	
   \                     fb_clk_init:
   \   00000000   ....               LDR.N    R0,??DataTable3_5  ;; 0x40048004
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   50F48050           ORRS     R0,R0,#0x1000
   \   00000008   ....               LDR.N    R1,??DataTable3_5  ;; 0x40048004
   \   0000000A   0860               STR      R0,[R1, #+0]
     67              //在PTA6引脚上使能TRACE_CLKOU功能
     68              PORTA_PCR6 = ( PORT_PCR_MUX(0x7));  
   \   0000000C   ....               LDR.N    R0,??DataTable3_6  ;; 0x40049018
   \   0000000E   4FF4E061           MOV      R1,#+1792
   \   00000012   0160               STR      R1,[R0, #+0]
     69              //使能FlexBus模块时钟
     70              SIM_SCGC7 |= SIM_SCGC7_FLEXBUS_MASK;
   \   00000014   ....               LDR.N    R0,??DataTable3_7  ;; 0x40048040
   \   00000016   0068               LDR      R0,[R0, #+0]
   \   00000018   50F00100           ORRS     R0,R0,#0x1
   \   0000001C   ....               LDR.N    R1,??DataTable3_7  ;; 0x40048040
   \   0000001E   0860               STR      R0,[R1, #+0]
     71              //在PTA6引脚上使能FB_CLKOUT功能
     72              PORTC_PCR3 = ( PORT_PCR_MUX(0x5));
   \   00000020   ....               LDR.N    R0,??DataTable3_8  ;; 0x4004b00c
   \   00000022   4FF4A061           MOV      R1,#+1280
   \   00000026   0160               STR      R1,[R0, #+0]
     73          }
   \   00000028   7047               BX       LR               ;; return
     74          
     75          //-------------------------------------------------------------------------*
     76          //函数名: pll_init                                                         *
     77          //功  能: pll初始化                                                        * 
     78          //参  数: clk_option:时钟选项						   * 
     79          //		  crystal_val:时钟值                                       *	
     80          //返  回: 时钟频率值                                                       *
     81          //说  明:                                                                  *
     82          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     83          unsigned char pll_init(unsigned char clk_option, unsigned char crystal_val)
     84          {
   \                     pll_init:
   \   00000000   80B5               PUSH     {R7,LR}
   \   00000002   0A00               MOVS     R2,R1
     85              unsigned char pll_freq;
     86              
     87              if (clk_option > 3) {return 0;}   //如果没有选择可用的选项则返回0
   \   00000004   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0428               CMP      R0,#+4
   \   00000008   01D3               BCC.N    ??pll_init_0
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   72E0               B.N      ??pll_init_1
     88              if (crystal_val > 15) {return 1;} // 如果如果可用的晶体选项不可用则返回1
   \                     ??pll_init_0:
   \   0000000E   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000010   102A               CMP      R2,#+16
   \   00000012   01D3               BCC.N    ??pll_init_2
   \   00000014   0120               MOVS     R0,#+1
   \   00000016   6DE0               B.N      ??pll_init_1
     89              
     90              //这里处在默认的FEI模式
     91              //首先移动到FBE模式
     92              #if (defined(K60_CLK) || defined(ASB817))
     93                       MCG_C2 = 0;
   \                     ??pll_init_2:
   \   00000018   ....               LDR.N    R2,??DataTable3_9  ;; 0x40064001
   \   0000001A   0023               MOVS     R3,#+0
   \   0000001C   1370               STRB     R3,[R2, #+0]
     94              #else
     95                       //使能外部晶振
     96                       MCG_C2 = MCG_C2_RANGE(2) | MCG_C2_HGO_MASK | MCG_C2_EREFS_MASK;
     97              #endif
     98              
     99              //初始化晶振后释放锁定状态的振荡器和GPIO
    100              SIM_SCGC4 |= SIM_SCGC4_LLWU_MASK;
   \   0000001E   ....               LDR.N    R2,??DataTable3_10  ;; 0x40048034
   \   00000020   1268               LDR      R2,[R2, #+0]
   \   00000022   52F08052           ORRS     R2,R2,#0x10000000
   \   00000026   ....               LDR.N    R3,??DataTable3_10  ;; 0x40048034
   \   00000028   1A60               STR      R2,[R3, #+0]
    101              LLWU_CS |= LLWU_CS_ACKISO_MASK;
   \   0000002A   ....               LDR.N    R2,??DataTable3_11  ;; 0x4007c008
   \   0000002C   1278               LDRB     R2,[R2, #+0]
   \   0000002E   52F08002           ORRS     R2,R2,#0x80
   \   00000032   ....               LDR.N    R3,??DataTable3_11  ;; 0x4007c008
   \   00000034   1A70               STRB     R2,[R3, #+0]
    102              
    103              //选择外部晶振，参考分频器，清IREFS来启动外部晶振
    104              MCG_C1 = MCG_C1_CLKS(2) | MCG_C1_FRDIV(3);
   \   00000036   ....               LDR.N    R2,??DataTable3_12  ;; 0x40064000
   \   00000038   9823               MOVS     R3,#+152
   \   0000003A   1370               STRB     R3,[R2, #+0]
    105              
    106              //等待晶振稳定	
    107              #if (!defined(K60_CLK) && !defined(ASB817))
    108              while (!(MCG_S & MCG_S_OSCINIT_MASK)){};  
    109              #endif
    110              
    111              //等待参考时钟状态位清零
    112              while (MCG_S & MCG_S_IREFST_MASK){}; 
   \                     ??pll_init_3:
   \   0000003C   ....               LDR.N    R2,??DataTable3_13  ;; 0x40064006
   \   0000003E   1278               LDRB     R2,[R2, #+0]
   \   00000040   D206               LSLS     R2,R2,#+27
   \   00000042   FBD4               BMI.N    ??pll_init_3
    113              //等待时钟状态位显示时钟源来自外部参考时钟
    114              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2){}; 
   \                     ??pll_init_4:
   \   00000044   ....               LDR.N    R2,??DataTable3_13  ;; 0x40064006
   \   00000046   1278               LDRB     R2,[R2, #+0]
   \   00000048   C2F38102           UBFX     R2,R2,#+2,#+2
   \   0000004C   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000004E   022A               CMP      R2,#+2
   \   00000050   F8D1               BNE.N    ??pll_init_4
    115              
    116              //进入FBE模式
    117              #if (defined(K60_CLK))
    118              MCG_C5 = MCG_C5_PRDIV(0x18);
   \   00000052   ....               LDR.N    R2,??DataTable3_14  ;; 0x40064004
   \   00000054   1823               MOVS     R3,#+24
   \   00000056   1370               STRB     R3,[R2, #+0]
    119              #else
    120              
    121              //配置PLL分频器来匹配所用的晶振
    122              MCG_C5 = MCG_C5_PRDIV(crystal_val); 
    123              #endif
    124              
    125              //确保MCG_C6处于复位状态，禁止LOLIE、PLL、和时钟控制器，清PLL VCO分频器
    126              MCG_C6 = 0x0;
   \   00000058   ....               LDR.N    R2,??DataTable3_15  ;; 0x40064005
   \   0000005A   0023               MOVS     R3,#+0
   \   0000005C   1370               STRB     R3,[R2, #+0]
    127              //选择PLL VCO分频器，系统时钟分频器取决于时钟选项
    128              switch (clk_option) {
   \   0000005E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0028               CMP      R0,#+0
   \   00000062   05D0               BEQ.N    ??pll_init_5
   \   00000064   0228               CMP      R0,#+2
   \   00000066   19D0               BEQ.N    ??pll_init_6
   \   00000068   0DD3               BCC.N    ??pll_init_7
   \   0000006A   0328               CMP      R0,#+3
   \   0000006C   21D0               BEQ.N    ??pll_init_8
   \   0000006E   2AE0               B.N      ??pll_init_9
    129              case 0:
    130                //设置系统分频器
    131                //MCG=PLL, core = MCG, bus = MCG, FlexBus = MCG, Flash clock= MCG/2
    132                set_sys_dividers(0,0,0,1);
   \                     ??pll_init_5:
   \   00000070   0123               MOVS     R3,#+1
   \   00000072   0022               MOVS     R2,#+0
   \   00000074   0021               MOVS     R1,#+0
   \   00000076   0020               MOVS     R0,#+0
   \   00000078   ........           BL       set_sys_dividers
    133                //设置VCO分频器，使能PLL为50MHz, LOLIE=0, PLLS=1, CME=0, VDIV=1
    134                MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(1); //VDIV = 1 (x25)
   \   0000007C   ....               LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   0000007E   4121               MOVS     R1,#+65
   \   00000080   0170               STRB     R1,[R0, #+0]
    135                pll_freq = 50;
   \   00000082   3221               MOVS     R1,#+50
    136                break;
   \   00000084   1FE0               B.N      ??pll_init_9
    137              case 1:
    138                //设置系统分频器
    139                //MCG=PLL, core = MCG, bus = MCG/2, FlexBus = MCG/2, Flash clock= MCG/4
    140                set_sys_dividers(0,1,1,3);
   \                     ??pll_init_7:
   \   00000086   0323               MOVS     R3,#+3
   \   00000088   0122               MOVS     R2,#+1
   \   0000008A   0121               MOVS     R1,#+1
   \   0000008C   0020               MOVS     R0,#+0
   \   0000008E   ........           BL       set_sys_dividers
    141                //设置VCO分频器，使能PLL为100MHz, LOLIE=0, PLLS=1, CME=0, VDIV=26
    142                MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(26); //VDIV = 26 (x50)
   \   00000092   ....               LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   00000094   5A21               MOVS     R1,#+90
   \   00000096   0170               STRB     R1,[R0, #+0]
    143                pll_freq = 100;
   \   00000098   6421               MOVS     R1,#+100
    144                break;
   \   0000009A   14E0               B.N      ??pll_init_9
    145              case 2:
    146                //设置系统分频器
    147                //MCG=PLL, core = MCG, bus = MCG/2, FlexBus = MCG/2, Flash clock= MCG/4
    148                set_sys_dividers(0,1,1,3);
   \                     ??pll_init_6:
   \   0000009C   0323               MOVS     R3,#+3
   \   0000009E   0122               MOVS     R2,#+1
   \   000000A0   0121               MOVS     R1,#+1
   \   000000A2   0020               MOVS     R0,#+0
   \   000000A4   ........           BL       set_sys_dividers
    149                //设置VCO分频器，使能PLL为96MHz, LOLIE=0, PLLS=1, CME=0, VDIV=24
    150                MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(24); //VDIV = 24 (x48)
   \   000000A8   ....               LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   000000AA   5821               MOVS     R1,#+88
   \   000000AC   0170               STRB     R1,[R0, #+0]
    151                pll_freq = 96;
   \   000000AE   6021               MOVS     R1,#+96
    152                break;
   \   000000B0   09E0               B.N      ??pll_init_9
    153              case 3:
    154                //设置系统分频器
    155                //MCG=PLL, core = MCG, bus = MCG, FlexBus = MCG, Flash clock= MCG/2
    156                set_sys_dividers(0,0,0,1);
   \                     ??pll_init_8:
   \   000000B2   0123               MOVS     R3,#+1
   \   000000B4   0022               MOVS     R2,#+0
   \   000000B6   0021               MOVS     R1,#+0
   \   000000B8   0020               MOVS     R0,#+0
   \   000000BA   ........           BL       set_sys_dividers
    157                //设置VCO分频器，使能PLL为48MHz, LOLIE=0, PLLS=1, CME=0, VDIV=0
    158                MCG_C6 = MCG_C6_PLLS_MASK; //VDIV = 0 (x24)
   \   000000BE   ....               LDR.N    R0,??DataTable3_15  ;; 0x40064005
   \   000000C0   4021               MOVS     R1,#+64
   \   000000C2   0170               STRB     R1,[R0, #+0]
    159                pll_freq = 48;
   \   000000C4   3021               MOVS     R1,#+48
    160                break;
    161              }
    162              while (!(MCG_S & MCG_S_PLLST_MASK)){}; // wait for PLL status bit to set
   \                     ??pll_init_9:
   \   000000C6   ....               LDR.N    R0,??DataTable3_13  ;; 0x40064006
   \   000000C8   0078               LDRB     R0,[R0, #+0]
   \   000000CA   8006               LSLS     R0,R0,#+26
   \   000000CC   FBD5               BPL.N    ??pll_init_9
    163              
    164              while (!(MCG_S & MCG_S_LOCK_MASK)){}; // Wait for LOCK bit to set
   \                     ??pll_init_10:
   \   000000CE   ....               LDR.N    R0,??DataTable3_13  ;; 0x40064006
   \   000000D0   0078               LDRB     R0,[R0, #+0]
   \   000000D2   4006               LSLS     R0,R0,#+25
   \   000000D4   FBD5               BPL.N    ??pll_init_10
    165              
    166              //进入PBE模式
    167              
    168              //通过清零CLKS位来进入PEE模式
    169              // CLKS=0, FRDIV=3, IREFS=0, IRCLKEN=0, IREFSTEN=0
    170              MCG_C1 &= ~MCG_C1_CLKS_MASK;
   \   000000D6   ....               LDR.N    R0,??DataTable3_12  ;; 0x40064000
   \   000000D8   0078               LDRB     R0,[R0, #+0]
   \   000000DA   10F03F00           ANDS     R0,R0,#0x3F
   \   000000DE   ....               LDR.N    R2,??DataTable3_12  ;; 0x40064000
   \   000000E0   1070               STRB     R0,[R2, #+0]
    171              
    172              //等待时钟状态位更新
    173              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3){};
   \                     ??pll_init_11:
   \   000000E2   ....               LDR.N    R0,??DataTable3_13  ;; 0x40064006
   \   000000E4   0078               LDRB     R0,[R0, #+0]
   \   000000E6   C0F38100           UBFX     R0,R0,#+2,#+2
   \   000000EA   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000EC   0328               CMP      R0,#+3
   \   000000EE   F8D1               BNE.N    ??pll_init_11
    174              
    175              //开始进入PEE模式
    176              
    177              return pll_freq;
   \   000000F0   0800               MOVS     R0,R1
   \   000000F2   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??pll_init_1:
   \   000000F4   02BD               POP      {R1,PC}          ;; return
    178          }
    179          
    180          //-------------------------------------------------------------------------*
    181          //函数名: set_sys_dividers                                                 *
    182          //功  能: 设置系系统分频器                                                 * 
    183          //参  数: 预分频值   							   *	
    184          //返  回: 无                                                               *
    185          //说  明: 此函数必须放在RAM里执行，否则会产生错误e2448。当FLASH时钟分频改变* 
    186          //        时，必须禁止FLASH的预取功能。在时钟分频改变之后，必须延时一小段时*
    187          //	 间才可以从新使能预取功能。                                        * 
    188          //-------------------------------------------------------------------------*

   \                                 In section .textrw, align 4, keep-with-next
    189          __ramfunc void set_sys_dividers(uint32 outdiv1, uint32 outdiv2, uint32 outdiv3, uint32 outdiv4)
    190          {
   \                     set_sys_dividers:
   \   00000000   70B4               PUSH     {R4-R6}
    191              uint32 temp_reg;
    192              uint8 i;
    193              //保存FMC_PFAPR当前的值
    194              temp_reg = FMC_PFAPR;
   \   00000002   104C               LDR.N    R4,??set_sys_dividers_0  ;; 0x4001f000
   \   00000004   2468               LDR      R4,[R4, #+0]
    195              
    196              //通过M&PFD置位M0PFD来禁止预取功能
    197              FMC_PFAPR |= FMC_PFAPR_M7PFD_MASK | FMC_PFAPR_M6PFD_MASK | FMC_PFAPR_M5PFD_MASK
    198                               | FMC_PFAPR_M4PFD_MASK | FMC_PFAPR_M3PFD_MASK | FMC_PFAPR_M2PFD_MASK
    199                               | FMC_PFAPR_M1PFD_MASK | FMC_PFAPR_M0PFD_MASK;
   \   00000006   0F4D               LDR.N    R5,??set_sys_dividers_0  ;; 0x4001f000
   \   00000008   2D68               LDR      R5,[R5, #+0]
   \   0000000A   55F47F05           ORRS     R5,R5,#0xFF0000
   \   0000000E   0D4E               LDR.N    R6,??set_sys_dividers_0  ;; 0x4001f000
   \   00000010   3560               STR      R5,[R6, #+0]
    200              
    201              //给时钟分频器设置期望值  
    202              SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(outdiv1) | SIM_CLKDIV1_OUTDIV2(outdiv2) 
    203                                | SIM_CLKDIV1_OUTDIV3(outdiv3) | SIM_CLKDIV1_OUTDIV4(outdiv4);
   \   00000012   0906               LSLS     R1,R1,#+24
   \   00000014   11F07061           ANDS     R1,R1,#0xF000000
   \   00000018   51EA0070           ORRS     R0,R1,R0, LSL #+28
   \   0000001C   1105               LSLS     R1,R2,#+20
   \   0000001E   11F47001           ANDS     R1,R1,#0xF00000
   \   00000022   0843               ORRS     R0,R1,R0
   \   00000024   1904               LSLS     R1,R3,#+16
   \   00000026   11F47021           ANDS     R1,R1,#0xF0000
   \   0000002A   0843               ORRS     R0,R1,R0
   \   0000002C   0649               LDR.N    R1,??set_sys_dividers_0+0x4  ;; 0x40048044
   \   0000002E   0860               STR      R0,[R1, #+0]
    204              
    205              //等待分频器改变
    206              for (i = 0 ; i < outdiv4 ; i++)
   \   00000030   0020               MOVS     R0,#+0
   \   00000032   00E0               B.N      ??set_sys_dividers_1
   \                     ??set_sys_dividers_2:
   \   00000034   401C               ADDS     R0,R0,#+1
   \                     ??set_sys_dividers_1:
   \   00000036   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   9842               CMP      R0,R3
   \   0000003A   FBD3               BCC.N    ??set_sys_dividers_2
    207              {}
    208              
    209              //从新存FMC_PFAPR的原始值
    210              FMC_PFAPR = temp_reg; 
   \   0000003C   0148               LDR.N    R0,??set_sys_dividers_0  ;; 0x4001f000
   \   0000003E   0460               STR      R4,[R0, #+0]
    211              
    212              return;
   \   00000040   70BC               POP      {R4-R6}
   \   00000042   7047               BX       LR               ;; return
   \                     ??set_sys_dividers_0:
   \   00000044   00F00140           DC32     0x4001f000
   \   00000048   44800440           DC32     0x40048044
    213          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   38800440           DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   ........           DC32     core_clk_mhz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   ........           DC32     core_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   44800440           DC32     0x40048044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   ........           DC32     periph_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   04800440           DC32     0x40048004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   18900440           DC32     0x40049018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   40800440           DC32     0x40048040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0CB00440           DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   01400640           DC32     0x40064001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   34800440           DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   08C00740           DC32     0x4007c008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   00400640           DC32     0x40064000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   06400640           DC32     0x40064006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   04400640           DC32     0x40064004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   05400640           DC32     0x40064005
    214          
    215          
    216          
    217          
    218          
    219          

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     fb_clk_init           0
     pll_init              8
     set_sys_dividers     12
     sysinit               8
     trace_clk_init        0


   Section sizes:

     Function/Label   Bytes
     --------------   -----
     core_clk_khz        4
     core_clk_mhz        4
     periph_clk_khz      4
     sysinit            72
     trace_clk_init     22
     fb_clk_init        42
     pll_init          246
     set_sys_dividers   76
     ??DataTable3        4
     ??DataTable3_1      4
     ??DataTable3_2      4
     ??DataTable3_3      4
     ??DataTable3_4      4
     ??DataTable3_5      4
     ??DataTable3_6      4
     ??DataTable3_7      4
     ??DataTable3_8      4
     ??DataTable3_9      4
     ??DataTable3_10     4
     ??DataTable3_11     4
     ??DataTable3_12     4
     ??DataTable3_13     4
     ??DataTable3_14     4
     ??DataTable3_15     4

 
  12 bytes in section .bss
 446 bytes in section .text
  76 bytes in section .textrw
 
 522 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: none
