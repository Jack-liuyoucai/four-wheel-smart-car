///////////////////////////////////////////////////////////////////////////////
//                                                                            /
//                                                      03/May/2013  15:00:21 /
// IAR ANSI C/C++ Compiler V6.30.4.23288/W32 EVALUATION for ARM               /
// Copyright 1999-2011 IAR Systems AB.                                        /
//                                                                            /
//    Cpu mode     =  thumb                                                   /
//    Endian       =  little                                                  /
//    Source file  =  C:\Users\Administrator\Desktop\起飞12\src\Sources\C\LCD /
//                    Driver.c                                                /
//    Command line =  C:\Users\Administrator\Desktop\起飞12\src\Sources\C\LCD /
//                    Driver.c -D IAR -D TWR_K60N512 -lCN                     /
//                    C:\Users\Administrator\Desktop\起飞12\bin\Ram\List\     /
//                    -lB C:\Users\Administrator\Desktop\起飞12\bin\Ram\List\ /
//                     -o C:\Users\Administrator\Desktop\起飞12\bin\Ram\Obj\  /
//                    --no_cse --no_unroll --no_inline --no_code_motion       /
//                    --no_tbaa --no_clustering --no_scheduling --debug       /
//                    --endian=little --cpu=Cortex-M4 -e --fpu=None           /
//                    --dlib_config G:\irm\arm\INC\c\DLib_Config_Normal.h -I  /
//                    C:\Users\Administrator\Desktop\起飞12\src\Sources\H\    /
//                    -I C:\Users\Administrator\Desktop\起飞12\src\Sources\H\ /
//                    Component_H\ -I C:\Users\Administrator\Desktop\起飞12\s /
//                    rc\Sources\H\Frame_H\ -Ol --use_c++_inline              /
//    List file    =  C:\Users\Administrator\Desktop\起飞12\bin\Ram\List\LCDD /
//                    river.s                                                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME LCDDriver

        #define SHT_PROGBITS 0x1

        EXTERN __aeabi_cfcmple
        EXTERN __aeabi_cfrcmple
        EXTERN __aeabi_f2iz
        EXTERN __aeabi_fmul
        EXTERN __aeabi_fsub
        EXTERN __aeabi_i2f

        PUBLIC Draw_BMP
        PUBLIC F6x8
        PUBLIC F8X16
        PUBLIC LCD_CLS
        PUBLIC LCD_CLS_ROW
        PUBLIC LCD_DLY_ms
        PUBLIC LCD_Fill
        PUBLIC LCD_IO_Init
        PUBLIC LCD_Init
        PUBLIC LCD_P6x8Cha
        PUBLIC LCD_P6x8Num
        PUBLIC LCD_P6x8Str
        PUBLIC LCD_P8x16Cha
        PUBLIC LCD_P8x16Num
        PUBLIC LCD_P8x16Str
        PUBLIC LCD_PutPixel
        PUBLIC LCD_Rectangle
        PUBLIC LCD_Set_Pos
        PUBLIC LCD_WrCmd
        PUBLIC LCD_WrDat

// C:\Users\Administrator\Desktop\起飞12\src\Sources\C\LCDDriver.c
//    1 #include "MK60N512VMD100.h " /* include peripheral declarations */
//    2 #include"LCDDriver.h"
//    3 #include "common.h"
//    4 
//    5 #define X_WIDTH 128
//    6 #define Y_WIDTH 64
//    7 //======================================
//    8 // 128X64I液晶底层驱动[6X8]字体库

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//    9 const unsigned char F6x8[][6] =
F6x8:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
        DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
        DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
        DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
        DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
        DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
        DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
        DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
        DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
        DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
        DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
        DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
        DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
        DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
        DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
        DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
        DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
        DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
        DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
        DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
        DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
        DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
        DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
        DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
        DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
        DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
        DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
        DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
        DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
        DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
        DC8 20, 20, 20, 20, 20, 20
//   10 {
//   11     { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
//   12     { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
//   13     { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
//   14     { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
//   15     { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
//   16     { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
//   17     { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
//   18     { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
//   19     { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
//   20     { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
//   21     { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
//   22     { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
//   23     { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
//   24     { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
//   25     { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
//   26     { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
//   27     { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
//   28     { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
//   29     { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
//   30     { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
//   31     { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
//   32     { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
//   33     { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
//   34     { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
//   35     { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
//   36     { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
//   37     { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
//   38     { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
//   39     { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
//   40     { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
//   41     { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
//   42     { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
//   43     { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
//   44     { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
//   45     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
//   46     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
//   47     { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
//   48     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
//   49     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
//   50     { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
//   51     { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
//   52     { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
//   53     { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
//   54     { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
//   55     { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
//   56     { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
//   57     { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
//   58     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
//   59     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
//   60     { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
//   61     { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
//   62     { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
//   63     { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
//   64     { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
//   65     { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
//   66     { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
//   67     { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
//   68     { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
//   69     { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
//   70     { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
//   71     { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
//   72     { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
//   73     { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
//   74     { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
//   75     { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
//   76     { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
//   77     { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
//   78     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
//   79     { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
//   80     { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
//   81     { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
//   82     { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
//   83     { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
//   84     { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
//   85     { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
//   86     { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
//   87     { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
//   88     { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
//   89     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
//   90     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
//   91     { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
//   92     { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
//   93     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
//   94     { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
//   95     { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
//   96     { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
//   97     { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
//   98     { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
//   99     { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
//  100     { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
//  101     { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
//  102     { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
//  103 };
//  104 //======================================================
//  105 // 128X64I液晶底层驱动[8X16]字体库
//  106 // 设计者: powerint
//  107 // 描  述: [8X16]西文字符的字模数据 (纵向取模,字节倒序)
//  108 // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
//  109 //======================================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  110 const unsigned char F8X16[]=
F8X16:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
        DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
        DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
        DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
        DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
        DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
        DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
        DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
        DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
        DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
        DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
        DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
        DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
        DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
        DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
        DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
        DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
        DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
        DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
        DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
        DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
        DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
        DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
        DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
        DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
        DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
        DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
        DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
        DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
        DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
        DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
        DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
        DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
        DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
        DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
        DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
        DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
        DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
        DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
        DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
        DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
        DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
        DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
        DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
        DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
        DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
        DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
        DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
        DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
        DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
        DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
        DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
        DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
        DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
        DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
        DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
        DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
        DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
        DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
        DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
        DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
        DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
        DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
        DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
        DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
        DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
        DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
        DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
        DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
        DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
        DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
        DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
        DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
        DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
        DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
//  111 {
//  112   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
//  113   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
//  114   0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
//  115   0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
//  116   0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
//  117   0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
//  118   0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
//  119   0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
//  120   0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
//  121   0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
//  122   0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
//  123   0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
//  124   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
//  125   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
//  126   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
//  127   0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
//  128   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
//  129   0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
//  130   0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
//  131   0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
//  132   0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
//  133   0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
//  134   0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
//  135   0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
//  136   0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
//  137   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
//  138   0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
//  139   0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
//  140   0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
//  141   0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
//  142   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
//  143   0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
//  144   0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
//  145   0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
//  146   0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
//  147   0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
//  148   0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
//  149   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
//  150   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
//  151   0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
//  152   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
//  153   0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
//  154   0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
//  155   0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
//  156   0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
//  157   0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
//  158   0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
//  159   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
//  160   0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
//  161   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
//  162   0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
//  163   0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
//  164   0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
//  165   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
//  166   0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
//  167   0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
//  168   0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
//  169   0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
//  170   0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
//  171   0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
//  172   0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
//  173   0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
//  174   0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
//  175   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
//  176   0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
//  177   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
//  178   0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
//  179   0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
//  180   0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
//  181   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
//  182   0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
//  183   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
//  184   0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
//  185   0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
//  186   0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
//  187   0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
//  188   0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
//  189   0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
//  190   0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
//  191   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
//  192   0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
//  193   0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
//  194   0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
//  195   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
//  196   0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
//  197   0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85
//  198   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
//  199   0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
//  200   0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
//  201   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
//  202   0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
//  203   0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
//  204   0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
//  205   0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
//  206   0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
//  207 
//  208 };
//  209 
//  210 
//  211 
//  212 
//  213 //------------------------------LCD端口初始化-------------------------------//

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  214 void LCD_IO_Init()
//  215 {
LCD_IO_Init:
        PUSH     {R7,LR}
//  216    //键盘接口GPIO，独立键盘只用到了c8到c13
//  217     PORTC_PCR8 |= PORT_PCR_MUX(1)| PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;  //PTC8上拉
        LDR.W    R0,??DataTable8  ;; 0x4004b020
        LDR      R0,[R0, #+0]
        MOVW     R1,#+259
        ORRS     R0,R1,R0
        LDR.W    R1,??DataTable8  ;; 0x4004b020
        STR      R0,[R1, #+0]
//  218     PORTC_PCR9 |= PORT_PCR_MUX(1)| PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;  //PTC9上拉
        LDR.W    R0,??DataTable8_1  ;; 0x4004b024
        LDR      R0,[R0, #+0]
        MOVW     R1,#+259
        ORRS     R0,R1,R0
        LDR.W    R1,??DataTable8_1  ;; 0x4004b024
        STR      R0,[R1, #+0]
//  219     PORTC_PCR10 |= PORT_PCR_MUX(1)| PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;  //PTC10上拉
        LDR.W    R0,??DataTable8_2  ;; 0x4004b028
        LDR      R0,[R0, #+0]
        MOVW     R1,#+259
        ORRS     R0,R1,R0
        LDR.W    R1,??DataTable8_2  ;; 0x4004b028
        STR      R0,[R1, #+0]
//  220     PORTC_PCR11 |= PORT_PCR_MUX(1)| PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;  //PTC11上拉
        LDR.W    R0,??DataTable8_3  ;; 0x4004b02c
        LDR      R0,[R0, #+0]
        MOVW     R1,#+259
        ORRS     R0,R1,R0
        LDR.W    R1,??DataTable8_3  ;; 0x4004b02c
        STR      R0,[R1, #+0]
//  221     PORTC_PCR12 |= PORT_PCR_MUX(1)| PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;  //PTC12上拉
        LDR.W    R0,??DataTable8_4  ;; 0x4004b030
        LDR      R0,[R0, #+0]
        MOVW     R1,#+259
        ORRS     R0,R1,R0
        LDR.W    R1,??DataTable8_4  ;; 0x4004b030
        STR      R0,[R1, #+0]
//  222     PORTC_PCR13 |= PORT_PCR_MUX(1)|PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;  //PTC13上拉
        LDR.W    R0,??DataTable8_5  ;; 0x4004b034
        LDR      R0,[R0, #+0]
        MOVW     R1,#+259
        ORRS     R0,R1,R0
        LDR.W    R1,??DataTable8_5  ;; 0x4004b034
        STR      R0,[R1, #+0]
//  223     PORTC_PCR14 |= PORT_PCR_MUX(1)|PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;  //PTC14上拉
        LDR.W    R0,??DataTable8_6  ;; 0x4004b038
        LDR      R0,[R0, #+0]
        MOVW     R1,#+259
        ORRS     R0,R1,R0
        LDR.W    R1,??DataTable8_6  ;; 0x4004b038
        STR      R0,[R1, #+0]
//  224     PORTC_PCR15 |= PORT_PCR_MUX(1)| PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;  //PTC15上拉
        LDR.W    R0,??DataTable8_7  ;; 0x4004b03c
        LDR      R0,[R0, #+0]
        MOVW     R1,#+259
        ORRS     R0,R1,R0
        LDR.W    R1,??DataTable8_7  ;; 0x4004b03c
        STR      R0,[R1, #+0]
//  225   // KEY GPIO 上拉输入    
//  226     GPIOC_PDDR = 0xffff00ff; //PTC8~15为输入
        LDR.W    R0,??DataTable8_8  ;; 0x400ff094
        MVNS     R1,#+65280
        STR      R1,[R0, #+0]
//  227     
//  228     //LCD GPIO
//  229   //  PORTB_PCR0 |= PORT_PCR_MUX(1);//LCD_SCL  
//  230  //   PORTB_PCR1 |= PORT_PCR_MUX(1);//LCD_SDA 
//  231  //   PORTB_PCR2 |= PORT_PCR_MUX(1);//LCD_RST
//  232  //   PORTB_PCR3 |= PORT_PCR_MUX(1);//LCD_DC 
//  233 //更改为A端口后，还是从小向大的顺序
//  234     PORTA_PCR14 |= PORT_PCR_MUX(1);//LCD_SCL  
        LDR.W    R0,??DataTable8_9  ;; 0x40049038
        LDR      R0,[R0, #+0]
        MOV      R1,#+256
        ORRS     R0,R1,R0
        LDR.W    R1,??DataTable8_9  ;; 0x40049038
        STR      R0,[R1, #+0]
//  235     PORTA_PCR15 |= PORT_PCR_MUX(1);//LCD_SDA 
        LDR.W    R0,??DataTable8_10  ;; 0x4004903c
        LDR      R0,[R0, #+0]
        MOV      R1,#+256
        ORRS     R0,R1,R0
        LDR.W    R1,??DataTable8_10  ;; 0x4004903c
        STR      R0,[R1, #+0]
//  236     PORTA_PCR16 |= PORT_PCR_MUX(1);//LCD_RST
        LDR.W    R0,??DataTable8_11  ;; 0x40049040
        LDR      R0,[R0, #+0]
        MOV      R1,#+256
        ORRS     R0,R1,R0
        LDR.W    R1,??DataTable8_11  ;; 0x40049040
        STR      R0,[R1, #+0]
//  237     PORTA_PCR17 |= PORT_PCR_MUX(1);//LCD_DC 
        LDR.W    R0,??DataTable8_12  ;; 0x40049044
        LDR      R0,[R0, #+0]
        MOV      R1,#+256
        ORRS     R0,R1,R0
        LDR.W    R1,??DataTable8_12  ;; 0x40049044
        STR      R0,[R1, #+0]
//  238     
//  239    // GPIOB_PDDR =GPIO_PDDR_PDD(GPIO_PIN(0) | GPIO_PIN(1) | GPIO_PIN(2) | GPIO_PIN(3)); //
//  240     	//输出为高点平    
//  241     GPIOA_PDDR =GPIO_PDDR_PDD(GPIO_PIN(14) | GPIO_PIN(15) | GPIO_PIN(16) | GPIO_PIN(17));
        LDR.W    R0,??DataTable8_13  ;; 0x400ff014
        MOVS     R1,#+245760
        STR      R1,[R0, #+0]
//  242     
//  243   //  GPIOB_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(0));  //LCD_SCL   d0   10
//  244     GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(14));  //LCD_SCL   d0   10
        LDR.W    R0,??DataTable8_14  ;; 0x400ff000
        LDR      R0,[R0, #+0]
        ORRS     R0,R0,#0x4000
        LDR.W    R1,??DataTable8_14  ;; 0x400ff000
        STR      R0,[R1, #+0]
//  245     
//  246    // GPIOB_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(2));  //LCD_RST
//  247     GPIOA_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(16));  //LCD_RST
        LDR.W    R0,??DataTable8_14  ;; 0x400ff000
        LDR      R0,[R0, #+0]
        BICS     R0,R0,#0x10000
        LDR.W    R1,??DataTable8_14  ;; 0x400ff000
        STR      R0,[R1, #+0]
//  248     LCD_DLY_ms(40);
        MOVS     R0,#+40
        BL       LCD_DLY_ms
//  249     GPIOA_PDOR |= GPIO_PDOR_PDO(GPIO_PIN(16));  //LCD_RST
        LDR.W    R0,??DataTable8_14  ;; 0x400ff000
        LDR      R0,[R0, #+0]
        ORRS     R0,R0,#0x10000
        LDR.W    R1,??DataTable8_14  ;; 0x400ff000
        STR      R0,[R1, #+0]
//  250 }
        POP      {R0,PC}          ;; return
//  251 

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  252 void LCD_WrDat(byte data)     //写数据
//  253 {
//  254       byte i=8;
LCD_WrDat:
        MOVS     R1,#+8
//  255       GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(17));     //  LCD_DC    c18
        LDR.W    R2,??DataTable8_14  ;; 0x400ff000
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x20000
        LDR.W    R3,??DataTable8_14  ;; 0x400ff000
        STR      R2,[R3, #+0]
//  256       asm("nop"); 
        nop              
//  257       GPIOA_PDOR &=  ~GPIO_PDOR_PDO(GPIO_PIN(14));  //LCD_SCL         d0  
        LDR.W    R2,??DataTable8_14  ;; 0x400ff000
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x4000
        LDR.W    R3,??DataTable8_14  ;; 0x400ff000
        STR      R2,[R3, #+0]
//  258       asm("nop");    
        nop              
        B.N      ??LCD_WrDat_0
//  259       while(i--)
//  260       {
//  261         if(data&0x80)
//  262         {
//  263          GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(15));  //LCD_SDA       d1
//  264         }
//  265         else
//  266         {
//  267          GPIOA_PDOR &=  ~GPIO_PDOR_PDO(GPIO_PIN(15));  //LCD_SDA
??LCD_WrDat_1:
        LDR.W    R2,??DataTable8_14  ;; 0x400ff000
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x8000
        LDR.W    R3,??DataTable8_14  ;; 0x400ff000
        STR      R2,[R3, #+0]
//  268         }
//  269        GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(14));  //LCD_SCL
??LCD_WrDat_2:
        LDR.W    R2,??DataTable8_14  ;; 0x400ff000
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x4000
        LDR.W    R3,??DataTable8_14  ;; 0x400ff000
        STR      R2,[R3, #+0]
//  270         asm("nop");
        nop              
//  271          
//  272       GPIOA_PDOR &=  ~GPIO_PDOR_PDO(GPIO_PIN(14));  //LCD_SCL
        LDR.W    R2,??DataTable8_14  ;; 0x400ff000
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x4000
        LDR.W    R3,??DataTable8_14  ;; 0x400ff000
        STR      R2,[R3, #+0]
//  273         data<<=1;    
        LSLS     R0,R0,#+1
??LCD_WrDat_0:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BEQ.N    ??LCD_WrDat_3
        LSLS     R2,R0,#+24
        BPL.N    ??LCD_WrDat_1
        LDR.W    R2,??DataTable8_14  ;; 0x400ff000
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x8000
        LDR.W    R3,??DataTable8_14  ;; 0x400ff000
        STR      R2,[R3, #+0]
        B.N      ??LCD_WrDat_2
//  274       }
//  275 }
??LCD_WrDat_3:
        BX       LR               ;; return
//  276 
//  277 

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  278 void LCD_WrCmd(byte cmd)   //写字母
//  279 {
//  280       byte i=8;
LCD_WrCmd:
        MOVS     R1,#+8
//  281       GPIOA_PDOR &=  ~GPIO_PDOR_PDO(GPIO_PIN(17));     //  LCD_DC
        LDR.W    R2,??DataTable8_14  ;; 0x400ff000
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x20000
        LDR.W    R3,??DataTable8_14  ;; 0x400ff000
        STR      R2,[R3, #+0]
//  282       GPIOA_PDOR &=  ~GPIO_PDOR_PDO(GPIO_PIN(14));  //LCD_SCL
        LDR.W    R2,??DataTable8_14  ;; 0x400ff000
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x4000
        LDR.W    R3,??DataTable8_14  ;; 0x400ff000
        STR      R2,[R3, #+0]
        B.N      ??LCD_WrCmd_0
//  283   while(i--)
//  284   {
//  285     if(cmd&0x80)
//  286     {
//  287          GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(15));  //LCD_SDA
//  288     }
//  289     else
//  290     {
//  291          GPIOA_PDOR &=  ~GPIO_PDOR_PDO(GPIO_PIN(15));  //LCD_SDA
??LCD_WrCmd_1:
        LDR.W    R2,??DataTable8_14  ;; 0x400ff000
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x8000
        LDR.W    R3,??DataTable8_14  ;; 0x400ff000
        STR      R2,[R3, #+0]
//  292     }
//  293        GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(14));  //LCD_SCL
??LCD_WrCmd_2:
        LDR.W    R2,??DataTable8_14  ;; 0x400ff000
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x4000
        LDR.W    R3,??DataTable8_14  ;; 0x400ff000
        STR      R2,[R3, #+0]
//  294     asm("nop");          
        nop              
//  295       GPIOA_PDOR &=  ~GPIO_PDOR_PDO(GPIO_PIN(14));  //LCD_SCL
        LDR.W    R2,??DataTable8_14  ;; 0x400ff000
        LDR      R2,[R2, #+0]
        BICS     R2,R2,#0x4000
        LDR.W    R3,??DataTable8_14  ;; 0x400ff000
        STR      R2,[R3, #+0]
//  296     cmd<<=1;   
        LSLS     R0,R0,#+1
??LCD_WrCmd_0:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BEQ.N    ??LCD_WrCmd_3
        LSLS     R2,R0,#+24
        BPL.N    ??LCD_WrCmd_1
        LDR.W    R2,??DataTable8_14  ;; 0x400ff000
        LDR      R2,[R2, #+0]
        ORRS     R2,R2,#0x8000
        LDR.W    R3,??DataTable8_14  ;; 0x400ff000
        STR      R2,[R3, #+0]
        B.N      ??LCD_WrCmd_2
//  297   } 	
//  298 	//LCD_CS=1;
//  299 }
??LCD_WrCmd_3:
        BX       LR               ;; return
//  300 
//  301 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  302 void LCD_Set_Pos(byte x, byte y)  //定义点的坐标
//  303 { 
LCD_Set_Pos:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  304   LCD_WrCmd(0xb0+y);
        SUBS     R0,R1,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  305   LCD_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  306   LCD_WrCmd((x&0x0f)|0x01); 
        ANDS     R0,R4,#0xF
        ORRS     R0,R0,#0x1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  307 } 
        POP      {R4,PC}          ;; return
//  308 
//  309 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  310 void LCD_Fill(byte bmp_data)
//  311 {
LCD_Fill:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
//  312 	byte y,x;
//  313 	
//  314 	for(y=0;y<8;y++)
        MOVS     R5,#+0
        B.N      ??LCD_Fill_0
//  315 	{
//  316 		LCD_WrCmd(0xb0+y);
//  317 		LCD_WrCmd(0x01);
//  318 		LCD_WrCmd(0x10);
//  319 		for(x=0;x<X_WIDTH;x++)
//  320 			LCD_WrDat(bmp_data);
??LCD_Fill_1:
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R6,R6,#+1
??LCD_Fill_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+128
        BCC.N    ??LCD_Fill_1
        ADDS     R5,R5,#+1
??LCD_Fill_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+8
        BCS.N    ??LCD_Fill_3
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
        MOVS     R0,#+1
        BL       LCD_WrCmd
        MOVS     R0,#+16
        BL       LCD_WrCmd
        MOVS     R6,#+0
        B.N      ??LCD_Fill_2
//  321 	}
//  322 }
??LCD_Fill_3:
        POP      {R4-R6,PC}       ;; return
//  323 
//  324 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  325 void LCD_CLS(void)
//  326 {
LCD_CLS:
        PUSH     {R3-R5,LR}
//  327 	byte y,x;	
//  328 	for(y=0;y<8;y++)
        MOVS     R4,#+0
        B.N      ??LCD_CLS_0
//  329 	{
//  330 		LCD_WrCmd(0xb0+y);
//  331 		LCD_WrCmd(0x01);
//  332 		LCD_WrCmd(0x10); 
//  333 		for(x=0;x<X_WIDTH;x++)
//  334                 {   
//  335 			LCD_WrDat(0);
??LCD_CLS_1:
        MOVS     R0,#+0
        BL       LCD_WrDat
//  336 
//  337                 }
        ADDS     R5,R5,#+1
??LCD_CLS_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+128
        BCC.N    ??LCD_CLS_1
        ADDS     R4,R4,#+1
??LCD_CLS_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+8
        BCS.N    ??LCD_CLS_3
        SUBS     R0,R4,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
        MOVS     R0,#+1
        BL       LCD_WrCmd
        MOVS     R0,#+16
        BL       LCD_WrCmd
        MOVS     R5,#+0
        B.N      ??LCD_CLS_2
//  338         }
//  339 }
??LCD_CLS_3:
        POP      {R0,R4,R5,PC}    ;; return
//  340 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  341 void LCD_CLS_ROW(byte x,byte y )  //清行  //y表示行数，x表示从这一行的哪一位开始清除
//  342 {
LCD_CLS_ROW:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  343 	LCD_WrCmd(0xb0+y);
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  344 	LCD_WrCmd(0x01);
        MOVS     R0,#+1
        BL       LCD_WrCmd
//  345 	LCD_WrCmd(0x10); 
        MOVS     R0,#+16
        BL       LCD_WrCmd
//  346         LCD_Set_Pos(x,y);
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        B.N      ??LCD_CLS_ROW_0
//  347 	for(;x<X_WIDTH;x++)
//  348         {
//  349 		LCD_WrDat(0);	
??LCD_CLS_ROW_1:
        MOVS     R0,#+0
        BL       LCD_WrDat
//  350         }
        ADDS     R4,R4,#+1
??LCD_CLS_ROW_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+128
        BCC.N    ??LCD_CLS_ROW_1
//  351 }
        POP      {R0,R4,R5,PC}    ;; return
//  352 
//  353 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  354 void LCD_DLY_ms(word ms)
//  355 {                         
LCD_DLY_ms:
        B.N      ??LCD_DLY_ms_0
//  356   word a;
//  357   while(ms)
//  358   {
//  359     a=20000;
??LCD_DLY_ms_1:
        MOVW     R1,#+20000
//  360     while(a--);
??LCD_DLY_ms_2:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        CMP      R2,#+0
        BNE.N    ??LCD_DLY_ms_2
//  361     ms--;
        SUBS     R0,R0,#+1
//  362   }
??LCD_DLY_ms_0:
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        CMP      R0,#+0
        BNE.N    ??LCD_DLY_ms_1
//  363   return;
        BX       LR               ;; return
//  364 }
//  365 
//  366 
//  367 
//  368 //------------------------------------LCD初始化----------------------------------//

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  369 void LCD_Init(void)
//  370 {
LCD_Init:
        PUSH     {R7,LR}
//  371   LCD_WrCmd(0xae);//--turn off oled panel
        MOVS     R0,#+174
        BL       LCD_WrCmd
//  372   LCD_WrCmd(0x00);//---set low column address
        MOVS     R0,#+0
        BL       LCD_WrCmd
//  373   LCD_WrCmd(0x10);//---set high column address
        MOVS     R0,#+16
        BL       LCD_WrCmd
//  374   LCD_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
        MOVS     R0,#+64
        BL       LCD_WrCmd
//  375   LCD_WrCmd(0x81);//--set contrast control register
        MOVS     R0,#+129
        BL       LCD_WrCmd
//  376   LCD_WrCmd(0xcf); // Set SEG Output Current Brightness
        MOVS     R0,#+207
        BL       LCD_WrCmd
//  377   LCD_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
        MOVS     R0,#+161
        BL       LCD_WrCmd
//  378   LCD_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
        MOVS     R0,#+200
        BL       LCD_WrCmd
//  379   LCD_WrCmd(0xa6);//--set normal display
        MOVS     R0,#+166
        BL       LCD_WrCmd
//  380   LCD_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
        MOVS     R0,#+168
        BL       LCD_WrCmd
//  381   LCD_WrCmd(0x3f);//--1/64 duty
        MOVS     R0,#+63
        BL       LCD_WrCmd
//  382   LCD_WrCmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
        MOVS     R0,#+211
        BL       LCD_WrCmd
//  383   LCD_WrCmd(0x00);//-not offset
        MOVS     R0,#+0
        BL       LCD_WrCmd
//  384   LCD_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
        MOVS     R0,#+213
        BL       LCD_WrCmd
//  385   LCD_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
        MOVS     R0,#+128
        BL       LCD_WrCmd
//  386   LCD_WrCmd(0xd9);//--set pre-charge period
        MOVS     R0,#+217
        BL       LCD_WrCmd
//  387   LCD_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
        MOVS     R0,#+241
        BL       LCD_WrCmd
//  388   LCD_WrCmd(0xda);//--set com pins hardware configuration
        MOVS     R0,#+218
        BL       LCD_WrCmd
//  389   LCD_WrCmd(0x12);
        MOVS     R0,#+18
        BL       LCD_WrCmd
//  390   LCD_WrCmd(0xdb);//--set vcomh
        MOVS     R0,#+219
        BL       LCD_WrCmd
//  391   LCD_WrCmd(0x40);//Set VCOM Deselect Level
        MOVS     R0,#+64
        BL       LCD_WrCmd
//  392   LCD_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
        MOVS     R0,#+32
        BL       LCD_WrCmd
//  393   LCD_WrCmd(0x02);//
        MOVS     R0,#+2
        BL       LCD_WrCmd
//  394   LCD_WrCmd(0x8d);//--set Charge Pump enable/disable
        MOVS     R0,#+141
        BL       LCD_WrCmd
//  395   LCD_WrCmd(0x14);//--set(0x10) disable
        MOVS     R0,#+20
        BL       LCD_WrCmd
//  396   LCD_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
        MOVS     R0,#+164
        BL       LCD_WrCmd
//  397   LCD_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
        MOVS     R0,#+166
        BL       LCD_WrCmd
//  398   LCD_WrCmd(0xaf);//--turn on oled panel
        MOVS     R0,#+175
        BL       LCD_WrCmd
//  399   LCD_Fill(0x00);  //初始清屏
        MOVS     R0,#+0
        BL       LCD_Fill
//  400   LCD_Set_Pos(0,0);  
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       LCD_Set_Pos
//  401 }
        POP      {R0,PC}          ;; return
//  402 
//  403 //==============================================================
//  404 //函数名： void LCD_PutPixel(byte x,byte y)
//  405 //功能描述：绘制一个点（x,y）
//  406 //参数：真实坐标值(x,y),x的范围0～127，y的范围0～64
//  407 //返回：无
//  408 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  409 void LCD_PutPixel(byte x,byte y)
//  410 {
LCD_PutPixel:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  411 	byte data1;  //data1当前点的数据 
//  412 	 
//  413         LCD_Set_Pos(x,y); 
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  414 	data1 = 0x01<<(y%8); 	
        MOVS     R0,#+1
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R5,R1
        MLS      R2,R2,R1,R5
        LSLS     R6,R0,R2
//  415 	LCD_WrCmd(0xb0+(y>>3));
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LSRS     R0,R5,#+3
        SUBS     R0,R0,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  416 	LCD_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  417 	LCD_WrCmd((x&0x0f)|0x00);
        ANDS     R0,R4,#0xF
        BL       LCD_WrCmd
//  418 	LCD_WrDat(data1); 	 	
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
//  419 }
        POP      {R4-R6,PC}       ;; return
//  420 //==============================================================
//  421 //函数名： void LCD_Rectangle(byte x1,byte y1,
//  422 //                   byte x2,byte y2,byte color,byte gif)
//  423 //功能描述：绘制一个实心矩形
//  424 //参数：左上角坐标（x1,y1）,右下角坐标（x2，y2）
//  425 //      其中x1、x2的范围0～127，y1，y2的范围0～63，即真实坐标值
//  426 //返回：无
//  427 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  428 void LCD_Rectangle(byte x1,byte y1,byte x2,byte y2,byte gif)
//  429 {
LCD_Rectangle:
        PUSH     {R3-R9,LR}
        MOVS     R5,R0
        MOVS     R6,R1
        MOVS     R7,R2
        MOV      R8,R3
        LDR      R4,[SP, #+32]
//  430 	byte n; 
//  431 		
//  432 	LCD_Set_Pos(x1,y1>>3);
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSRS     R1,R6,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  433 	for(n=x1;n<=x2;n++)
        MOV      R9,R5
        B.N      ??LCD_Rectangle_0
//  434 	{
//  435 		LCD_WrDat(0x01<<(y1%8)); 			
??LCD_Rectangle_1:
        MOVS     R0,#+1
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R6,R1
        MLS      R2,R2,R1,R6
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
//  436 		if(gif == 1) 	LCD_DLY_ms(50);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??LCD_Rectangle_2
        MOVS     R0,#+50
        BL       LCD_DLY_ms
//  437 	}  
??LCD_Rectangle_2:
        ADDS     R9,R9,#+1
??LCD_Rectangle_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCS.N    ??LCD_Rectangle_1
//  438 	LCD_Set_Pos(x1,y2>>3);
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LSRS     R1,R8,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  439         for(n=x1;n<=x2;n++)
        MOV      R9,R5
        B.N      ??LCD_Rectangle_3
//  440 	{
//  441 		LCD_WrDat(0x01<<(y2%8)); 			
??LCD_Rectangle_4:
        MOVS     R0,#+1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R8,R1
        MLS      R2,R2,R1,R8
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
//  442 		if(gif == 1) 	LCD_DLY_ms(5);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??LCD_Rectangle_5
        MOVS     R0,#+5
        BL       LCD_DLY_ms
//  443 	}
??LCD_Rectangle_5:
        ADDS     R9,R9,#+1
??LCD_Rectangle_3:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCS.N    ??LCD_Rectangle_4
//  444 	
//  445 } 
        POP      {R0,R4-R9,PC}    ;; return
//  446 
//  447 //==============================================================
//  448 //功能描述：写入一组标准ASCII字符
//  449 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  450 //返回：无
//  451 //============================================================== 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  452 void LCD_P6x8Cha(byte x,byte y,byte ucData) 
//  453 {
LCD_P6x8Cha:
        PUSH     {R3-R5,LR}
//  454     byte i, ucDataTmp;       
//  455     ucDataTmp = ucData-32;
        SUBS     R5,R2,#+32
//  456     if(x > 126)
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+127
        BCC.N    ??LCD_P6x8Cha_0
//  457     {
//  458         x= 0;
        MOVS     R0,#+0
//  459         y++;
        ADDS     R1,R1,#+1
//  460     }
//  461     
//  462     LCD_Set_Pos(x, y);
??LCD_P6x8Cha_0:
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  463     
//  464     for(i = 0; i < 6; i++)
        MOVS     R4,#+0
        B.N      ??LCD_P6x8Cha_1
//  465     {     
//  466         LCD_WrDat(F6x8[ucDataTmp][i]);  
??LCD_P6x8Cha_2:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        MOVS     R0,#+6
        LDR.W    R1,??DataTable8_15
        MLA      R0,R0,R5,R1
        LDRB     R0,[R4, R0]
        BL       LCD_WrDat
//  467     }
        ADDS     R4,R4,#+1
??LCD_P6x8Cha_1:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+6
        BCC.N    ??LCD_P6x8Cha_2
//  468 }
        POP      {R0,R4,R5,PC}    ;; return
//  469 
//  470 //==============================================================
//  471 //功能描述：写入一组标准ASCII字符串
//  472 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  473 //返回：无
//  474 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  475 void LCD_P6x8Str(byte x,byte y,byte ch[])
//  476 {
LCD_P6x8Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  477   byte c=0,i=0,j=0;      
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??LCD_P6x8Str_0
//  478   while (ch[j]!='\0')
//  479   {    
//  480     c =ch[j]-32;
//  481     if(x>126){x=0;y++;}
//  482     LCD_Set_Pos(x,y);    
//  483   	for(i=0;i<6;i++)     
//  484   	  LCD_WrDat(F6x8[c][i]);  
??LCD_P6x8Str_1:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R0,#+6
        LDR.W    R1,??DataTable8_15
        MLA      R0,R0,R7,R1
        LDRB     R0,[R8, R0]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P6x8Str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+6
        BCC.N    ??LCD_P6x8Str_1
//  485   	x+=6;
        ADDS     R4,R4,#+6
//  486   	j++;
        ADDS     R9,R9,#+1
??LCD_P6x8Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_P6x8Str_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+127
        BCC.N    ??LCD_P6x8Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P6x8Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P6x8Str_2
//  487   }
//  488 }
??LCD_P6x8Str_3:
        POP      {R0,R4-R9,PC}    ;; return
//  489 
//  490 //==============================================================
//  491 //函数名：LCD_P6x8Num(byte x,byte y,byte *p)
//  492 //功能描述：写入一组标准ASCII字符
//  493 //参数：显示的位置（x,y），y为行范围0～7，要显示的字符串
//  494 //返回：无
//  495 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  496 void LCD_P6x8Num(byte x,byte y,float number)
//  497 {
LCD_P6x8Num:
        PUSH     {R4-R9,LR}
        SUB      SP,SP,#+20
        MOVS     R6,R0
        MOVS     R4,R1
        MOV      R9,R2
//  498   unsigned char i=0;
        MOVS     R7,#+0
//  499   unsigned char temp[16];
//  500   unsigned char *point=temp;
        ADD      R5,SP,#+0
//  501   float decimal;
//  502   int data;
//  503   
//  504   if(number<0)
        MOV      R0,R9
        MOVS     R1,#+0
        BL       __aeabi_cfcmple
        BCS.N    ??LCD_P6x8Num_0
//  505     {
//  506      temp[0]='-';
        MOVS     R0,#+45
        STRB     R0,[SP, #+0]
//  507      LCD_P6x8Cha(x,y,temp[0]);
        LDRB     R2,[SP, #+0]
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P6x8Cha
//  508      x+=1;
        ADDS     R6,R6,#+1
//  509      number=-number; 
        EORS     R9,R9,#0x80000000
//  510     }
//  511     
//  512   data=(int)number;
??LCD_P6x8Num_0:
        MOV      R0,R9
        BL       __aeabi_f2iz
        MOV      R8,R0
//  513   decimal=number-data;     //得到小数部分
        MOV      R0,R8
        BL       __aeabi_i2f
        MOVS     R1,R0
        MOV      R0,R9
        BL       __aeabi_fsub
//  514   
//  515    
//  516   if(data>=1000)           //是否可被1000整除
        MOV      R1,#+1000
        CMP      R8,R1
        BLT.N    ??LCD_P6x8Num_1
//  517     {
//  518      temp[i]=48+data/1000;
        MOV      R1,#+1000
        SDIV     R1,R8,R1
        ADDS     R1,R1,#+48
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R2,SP,#+0
        STRB     R1,[R7, R2]
//  519      data=data%1000;
        MOV      R1,#+1000
        SDIV     R2,R8,R1
        MLS      R8,R1,R2,R8
//  520      i++;
        ADDS     R7,R7,#+1
//  521     }
//  522 
//  523    
//  524   if(data>=100)              //是否可被100整除
??LCD_P6x8Num_1:
        CMP      R8,#+100
        BLT.N    ??LCD_P6x8Num_2
//  525    {
//  526     temp[i]=48+data/100;
        MOVS     R1,#+100
        SDIV     R1,R8,R1
        ADDS     R1,R1,#+48
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R2,SP,#+0
        STRB     R1,[R7, R2]
//  527     data=data%100;
        MOVS     R1,#+100
        SDIV     R2,R8,R1
        MLS      R8,R1,R2,R8
//  528     i++;
        ADDS     R7,R7,#+1
        B.N      ??LCD_P6x8Num_3
//  529    }
//  530   else 
//  531     if(data<100&&i!=0)
??LCD_P6x8Num_2:
        CMP      R8,#+100
        BGE.N    ??LCD_P6x8Num_3
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+0
        BEQ.N    ??LCD_P6x8Num_3
//  532      {
//  533      temp[i]=0+48;
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R1,SP,#+0
        MOVS     R2,#+48
        STRB     R2,[R7, R1]
//  534      i++;
        ADDS     R7,R7,#+1
//  535      }
//  536    
//  537   if(data>=10)                  //是否可被10整除
??LCD_P6x8Num_3:
        CMP      R8,#+10
        BLT.N    ??LCD_P6x8Num_4
//  538     {
//  539      temp[i]=48+data/10;
        MOVS     R1,#+10
        SDIV     R1,R8,R1
        ADDS     R1,R1,#+48
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R2,SP,#+0
        STRB     R1,[R7, R2]
//  540      data=data%10;
        MOVS     R1,#+10
        SDIV     R2,R8,R1
        MLS      R8,R1,R2,R8
//  541      i++;
        ADDS     R7,R7,#+1
        B.N      ??LCD_P6x8Num_5
//  542     }
//  543   else 
//  544     if(data<10&&i!=0)
??LCD_P6x8Num_4:
        CMP      R8,#+10
        BGE.N    ??LCD_P6x8Num_5
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+0
        BEQ.N    ??LCD_P6x8Num_5
//  545      {
//  546      temp[i]=48;
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R1,SP,#+0
        MOVS     R2,#+48
        STRB     R2,[R7, R1]
//  547      i++;
        ADDS     R7,R7,#+1
//  548      }
//  549      
//  550   temp[i]=48+data;
??LCD_P6x8Num_5:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R1,SP,#+0
        ADDS     R2,R8,#+48
        STRB     R2,[R7, R1]
//  551    
//  552       
//  553   if(decimal>=0.001)           //判断是否为小数
        LDR.N    R1,??DataTable8_16  ;; 0x3a83126f
        BL       __aeabi_cfrcmple
        BHI.N    ??LCD_P6x8Num_6
//  554    {
//  555     i++;
        ADDS     R7,R7,#+1
//  556     temp[i]='.';                //加小数点
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R1,SP,#+0
        MOVS     R2,#+46
        STRB     R2,[R7, R1]
//  557     i++;
        ADDS     R7,R7,#+1
//  558     
//  559     data=(int)(decimal*1000);
        LDR.N    R1,??DataTable8_17  ;; 0x447a0000
        BL       __aeabi_fmul
        BL       __aeabi_f2iz
        MOV      R8,R0
//  560    
//  561     temp[i]=48+data/100;
        MOVS     R0,#+100
        SDIV     R0,R8,R0
        ADDS     R0,R0,#+48
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R1,SP,#+0
        STRB     R0,[R7, R1]
//  562     
//  563     data=data%100;
        MOVS     R0,#+100
        SDIV     R1,R8,R0
        MLS      R8,R0,R1,R8
//  564     i++;
        ADDS     R7,R7,#+1
//  565    
//  566     if(data>0)
        CMP      R8,#+1
        BLT.N    ??LCD_P6x8Num_7
//  567       {
//  568        temp[i]=48+data/10;
        MOVS     R0,#+10
        SDIV     R0,R8,R0
        ADDS     R0,R0,#+48
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R1,SP,#+0
        STRB     R0,[R7, R1]
//  569        data=data%10;
        MOVS     R0,#+10
        SDIV     R1,R8,R0
        MLS      R8,R0,R1,R8
//  570        
//  571        
//  572       }
//  573         if(data>=0)
??LCD_P6x8Num_7:
        CMP      R8,#+0
        BMI.N    ??LCD_P6x8Num_6
//  574       {
//  575        i++;
        ADDS     R7,R7,#+1
//  576        temp[i]=data+48; 
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R0,SP,#+0
        ADDS     R1,R8,#+48
        STRB     R1,[R7, R0]
//  577       }
//  578    }     
//  579 
//  580   i++;
??LCD_P6x8Num_6:
        ADDS     R7,R7,#+1
//  581   temp[i]='\0';
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R0,SP,#+0
        MOVS     R1,#+0
        STRB     R1,[R7, R0]
//  582     LCD_P6x8Str(x,y,point); 
        MOVS     R2,R5
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P6x8Str
//  583   
//  584 }
        ADD      SP,SP,#+20
        POP      {R4-R9,PC}       ;; return
//  585 
//  586 
//  587 //==============================================================
//  588 //功能描述：写入一组标准ASCII字符
//  589 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符
//  590 //返回：无
//  591 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  592 void LCD_P8x16Cha(byte x,byte y,byte ch)
//  593 {
LCD_P8x16Cha:
        PUSH     {R4-R8,LR}
        MOVS     R6,R0
        MOVS     R7,R1
//  594     byte c=0,i=0,j=0;   
        MOVS     R4,#+0
        MOVS     R8,#+0
        MOVS     R5,#+0
//  595     c =ch-32;
        SUBS     R0,R2,#+32
        MOVS     R4,R0
//  596     if(x>120){x=0;y++;}
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+121
        BCC.N    ??LCD_P8x16Cha_0
        MOVS     R6,#+0
        ADDS     R7,R7,#+1
//  597     LCD_Set_Pos(x,y);    
??LCD_P8x16Cha_0:
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  598   	for(i=0;i<8;i++)     
        MOVS     R8,#+0
        B.N      ??LCD_P8x16Cha_1
//  599   	  LCD_WrDat(F8X16[c*16+i]);
??LCD_P8x16Cha_2:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSLS     R0,R4,#+4
        UXTAB    R0,R0,R8
        LDR.N    R1,??DataTable8_18
        LDRB     R0,[R0, R1]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P8x16Cha_1:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BCC.N    ??LCD_P8x16Cha_2
//  600   	LCD_Set_Pos(x,y+1);    
        ADDS     R1,R7,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  601   	for(i=0;i<8;i++)     
        MOVS     R8,#+0
        B.N      ??LCD_P8x16Cha_3
//  602   	  LCD_WrDat(F8X16[c*16+i+8]);  
??LCD_P8x16Cha_4:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSLS     R0,R4,#+4
        UXTAB    R0,R0,R8
        LDR.N    R1,??DataTable8_18
        ADDS     R0,R0,R1
        LDRB     R0,[R0, #+8]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P8x16Cha_3:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BCC.N    ??LCD_P8x16Cha_4
//  603   	x+=8;
        ADDS     R6,R6,#+8
//  604   	j++;
        ADDS     R5,R5,#+1
//  605  
//  606 }
        POP      {R4-R8,PC}       ;; return
//  607 //==============================================================
//  608 //功能描述：写入一组标准ASCII字符串
//  609 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  610 //返回：无
//  611 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  612 void LCD_P8x16Str(byte x,byte y,byte ch[])
//  613 {
LCD_P8x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  614   byte c=0,i=0,j=0;
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??LCD_P8x16Str_0
//  615         
//  616   while (ch[j]!='\0')
//  617   {    
//  618     c =ch[j]-32;
//  619     if(x>120){x=0;y++;}
//  620     LCD_Set_Pos(x,y);    
//  621   	for(i=0;i<8;i++)     
//  622   	  LCD_WrDat(F8X16[c*16+i]);
//  623   	LCD_Set_Pos(x,y+1);    
//  624   	for(i=0;i<8;i++)     
//  625   	  LCD_WrDat(F8X16[c*16+i+8]);  
??LCD_P8x16Str_1:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R0,R7,#+4
        UXTAB    R0,R0,R8
        LDR.N    R1,??DataTable8_18
        ADDS     R0,R0,R1
        LDRB     R0,[R0, #+8]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P8x16Str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BCC.N    ??LCD_P8x16Str_1
//  626   	x+=8;
        ADDS     R4,R4,#+8
//  627   	j++;
        ADDS     R9,R9,#+1
??LCD_P8x16Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_P8x16Str_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BCC.N    ??LCD_P8x16Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P8x16Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P8x16Str_5
??LCD_P8x16Str_6:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R0,R7,#+4
        UXTAB    R0,R0,R8
        LDR.N    R1,??DataTable8_18
        LDRB     R0,[R0, R1]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P8x16Str_5:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BCC.N    ??LCD_P8x16Str_6
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P8x16Str_2
//  628   }
//  629 }
??LCD_P8x16Str_3:
        POP      {R0,R4-R9,PC}    ;; return
//  630 /****************************************************************
//  631                    写8*16点阵数字函数
//  632 ****************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  633 void LCD_P8x16Num(unsigned char x,unsigned char y, float number)
//  634 {
LCD_P8x16Num:
        PUSH     {R4-R9,LR}
        SUB      SP,SP,#+20
        MOVS     R6,R0
        MOVS     R4,R1
        MOV      R9,R2
//  635   unsigned char i=0;
        MOVS     R7,#+0
//  636   unsigned char temp[16];
//  637   unsigned char *point=temp;
        ADD      R5,SP,#+0
//  638   float decimal;
//  639   int data;
//  640   
//  641   if(number<0)
        MOV      R0,R9
        MOVS     R1,#+0
        BL       __aeabi_cfcmple
        BCS.N    ??LCD_P8x16Num_0
//  642     {
//  643      temp[0]='-';
        MOVS     R0,#+45
        STRB     R0,[SP, #+0]
//  644      LCD_P8x16Cha(x,y,temp[0]);
        LDRB     R2,[SP, #+0]
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P8x16Cha
//  645      x+=1;
        ADDS     R6,R6,#+1
//  646      number=-number; 
        EORS     R9,R9,#0x80000000
//  647     }
//  648     
//  649   data=(int)number;
??LCD_P8x16Num_0:
        MOV      R0,R9
        BL       __aeabi_f2iz
        MOV      R8,R0
//  650   decimal=number-data;     //得到小数部分
        MOV      R0,R8
        BL       __aeabi_i2f
        MOVS     R1,R0
        MOV      R0,R9
        BL       __aeabi_fsub
//  651   
//  652    
//  653   if(data>=1000)           //是否可被1000整除
        MOV      R1,#+1000
        CMP      R8,R1
        BLT.N    ??LCD_P8x16Num_1
//  654     {
//  655      temp[i]=48+data/1000;
        MOV      R1,#+1000
        SDIV     R1,R8,R1
        ADDS     R1,R1,#+48
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R2,SP,#+0
        STRB     R1,[R7, R2]
//  656      data=data%1000;
        MOV      R1,#+1000
        SDIV     R2,R8,R1
        MLS      R8,R1,R2,R8
//  657      i++;
        ADDS     R7,R7,#+1
//  658     }
//  659 
//  660    
//  661   if(data>=100)              //是否可被100整除
??LCD_P8x16Num_1:
        CMP      R8,#+100
        BLT.N    ??LCD_P8x16Num_2
//  662    {
//  663     temp[i]=48+data/100;
        MOVS     R1,#+100
        SDIV     R1,R8,R1
        ADDS     R1,R1,#+48
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R2,SP,#+0
        STRB     R1,[R7, R2]
//  664     data=data%100;
        MOVS     R1,#+100
        SDIV     R2,R8,R1
        MLS      R8,R1,R2,R8
//  665     i++;
        ADDS     R7,R7,#+1
        B.N      ??LCD_P8x16Num_3
//  666    }
//  667   else 
//  668     if(data<100&&i!=0)
??LCD_P8x16Num_2:
        CMP      R8,#+100
        BGE.N    ??LCD_P8x16Num_3
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+0
        BEQ.N    ??LCD_P8x16Num_3
//  669      {
//  670      temp[i]=0+48;
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R1,SP,#+0
        MOVS     R2,#+48
        STRB     R2,[R7, R1]
//  671      i++;
        ADDS     R7,R7,#+1
//  672      }
//  673    
//  674   if(data>=10)                  //是否可被10整除
??LCD_P8x16Num_3:
        CMP      R8,#+10
        BLT.N    ??LCD_P8x16Num_4
//  675     {
//  676      temp[i]=48+data/10;
        MOVS     R1,#+10
        SDIV     R1,R8,R1
        ADDS     R1,R1,#+48
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R2,SP,#+0
        STRB     R1,[R7, R2]
//  677      data=data%10;
        MOVS     R1,#+10
        SDIV     R2,R8,R1
        MLS      R8,R1,R2,R8
//  678      i++;
        ADDS     R7,R7,#+1
        B.N      ??LCD_P8x16Num_5
//  679     }
//  680   else 
//  681     if(data<10&&i!=0)
??LCD_P8x16Num_4:
        CMP      R8,#+10
        BGE.N    ??LCD_P8x16Num_5
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+0
        BEQ.N    ??LCD_P8x16Num_5
//  682      {
//  683      temp[i]=48;
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R1,SP,#+0
        MOVS     R2,#+48
        STRB     R2,[R7, R1]
//  684      i++;
        ADDS     R7,R7,#+1
//  685      }
//  686      
//  687   temp[i]=48+data;
??LCD_P8x16Num_5:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R1,SP,#+0
        ADDS     R2,R8,#+48
        STRB     R2,[R7, R1]
//  688    
//  689       
//  690   if(decimal>=0.0001)           //判断是否为小数
        LDR.N    R1,??DataTable8_19  ;; 0x38d1b718
        BL       __aeabi_cfrcmple
        BHI.N    ??LCD_P8x16Num_6
//  691    {
//  692     i++;
        ADDS     R7,R7,#+1
//  693     temp[i]='.';                //加小数点
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R1,SP,#+0
        MOVS     R2,#+46
        STRB     R2,[R7, R1]
//  694     i++;
        ADDS     R7,R7,#+1
//  695     
//  696     data=(int)(decimal*1000);
        LDR.N    R1,??DataTable8_17  ;; 0x447a0000
        BL       __aeabi_fmul
        BL       __aeabi_f2iz
        MOV      R8,R0
//  697    
//  698     temp[i]=48+data/100;
        MOVS     R0,#+100
        SDIV     R0,R8,R0
        ADDS     R0,R0,#+48
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R1,SP,#+0
        STRB     R0,[R7, R1]
//  699     
//  700     data=data%100;
        MOVS     R0,#+100
        SDIV     R1,R8,R0
        MLS      R8,R0,R1,R8
//  701     i++;
        ADDS     R7,R7,#+1
//  702    
//  703     if(data>0)
        CMP      R8,#+1
        BLT.N    ??LCD_P8x16Num_7
//  704       {
//  705        temp[i]=48+data/10;
        MOVS     R0,#+10
        SDIV     R0,R8,R0
        ADDS     R0,R0,#+48
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R1,SP,#+0
        STRB     R0,[R7, R1]
//  706        data=data%10;
        MOVS     R0,#+10
        SDIV     R1,R8,R0
        MLS      R8,R0,R1,R8
//  707        
//  708        
//  709       }
//  710     if(data>=0)
??LCD_P8x16Num_7:
        CMP      R8,#+0
        BMI.N    ??LCD_P8x16Num_6
//  711       {
//  712        i++;
        ADDS     R7,R7,#+1
//  713        temp[i]=data+48; 
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R0,SP,#+0
        ADDS     R1,R8,#+48
        STRB     R1,[R7, R0]
//  714       }
//  715     
//  716    }     
//  717 
//  718   i++;
??LCD_P8x16Num_6:
        ADDS     R7,R7,#+1
//  719   temp[i]='\0';
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADD      R0,SP,#+0
        MOVS     R1,#+0
        STRB     R1,[R7, R0]
//  720     LCD_P8x16Str(x,y,point); 
        MOVS     R2,R5
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P8x16Str
//  721   
//  722 }
        ADD      SP,SP,#+20
        POP      {R4-R9,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8:
        DC32     0x4004b020

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_1:
        DC32     0x4004b024

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_2:
        DC32     0x4004b028

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_3:
        DC32     0x4004b02c

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_4:
        DC32     0x4004b030

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_5:
        DC32     0x4004b034

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_6:
        DC32     0x4004b038

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_7:
        DC32     0x4004b03c

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_8:
        DC32     0x400ff094

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_9:
        DC32     0x40049038

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_10:
        DC32     0x4004903c

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_11:
        DC32     0x40049040

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_12:
        DC32     0x40049044

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_13:
        DC32     0x400ff014

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_14:
        DC32     0x400ff000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_15:
        DC32     F6x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_16:
        DC32     0x3a83126f

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_17:
        DC32     0x447a0000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_18:
        DC32     F8X16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_19:
        DC32     0x38d1b718
//  723 
//  724 //==============================================================
//  725 //函数名： void Draw_BMP(byte x,byte y)
//  726 //功能描述：显示BMP图片128×64
//  727 //参数：起始点坐标(x,y),x的范围0～127，y为页的范围0～7
//  728 //返回：无
//  729 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  730 void Draw_BMP(byte x0,byte y0,byte x1,byte y1,byte bmp[])
//  731 { 	
Draw_BMP:
        PUSH     {R4-R10,LR}
        MOVS     R4,R0
        MOVS     R5,R2
        MOVS     R6,R3
        LDR      R7,[SP, #+32]
//  732   word ii=0;
        MOVS     R8,#+0
//  733   byte x,y;
//  734   
//  735   if(y1%8==0) y=y1/8;      
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R2,R6,R0
        MLS      R2,R2,R0,R6
        CMP      R2,#+0
        BNE.N    ??Draw_BMP_0
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R10,R6,R0
        B.N      ??Draw_BMP_1
//  736   else y=y1/8+1;
??Draw_BMP_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R0,R6,R0
        ADDS     R10,R0,#+1
//  737 	for(y=y0;y<=y1;y++)
??Draw_BMP_1:
        MOV      R10,R1
        B.N      ??Draw_BMP_2
//  738 	{
//  739 		LCD_Set_Pos(x0,y);				
//  740     for(x=x0;x<x1;x++)
//  741 	    {      
//  742 	    	LCD_WrDat(bmp[ii++]);	    	
??Draw_BMP_3:
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        LDRB     R0,[R8, R7]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
//  743 	    }
        ADDS     R9,R9,#+1
??Draw_BMP_4:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R9,R5
        BCC.N    ??Draw_BMP_3
        ADDS     R10,R10,#+1
??Draw_BMP_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        CMP      R6,R10
        BCC.N    ??Draw_BMP_5
        MOV      R1,R10
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOV      R9,R4
        B.N      ??Draw_BMP_4
//  744 	}
//  745 } 
??Draw_BMP_5:
        POP      {R4-R10,PC}      ;; return

        SECTION `.iar_vfe_header`:DATA:REORDER:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
//  746 
// 
// 2 072 bytes in section .rodata
// 2 632 bytes in section .text
// 
// 2 632 bytes of CODE  memory
// 2 072 bytes of CONST memory
//
//Errors: none
//Warnings: none
