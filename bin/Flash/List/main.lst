###############################################################################
#                                                                             #
#                                                       16/Mar/2014  15:20:25 #
# IAR ANSI C/C++ Compiler V6.30.4.23288/W32 EVALUATION for ARM                #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\刘友才 (H)\飞思卡尔\程思遥\wust4华南赛\src\Sources\C\ #
#                    main.c                                                   #
#    Command line =  "F:\刘友才 (H)\飞思卡尔\程思遥\wust4华南赛\src\Sources\C #
#                    \main.c" -D IAR -D TWR_K60N512 -lCN "F:\刘友才           #
#                    (H)\飞思卡尔\程思遥\wust4华南赛\bin\Flash\List\" -lB     #
#                    "F:\刘友才 (H)\飞思卡尔\程思遥\wust4华南赛\bin\Flash\Lis #
#                    t\" -o "F:\刘友才 (H)\飞思卡尔\程思遥\wust4华南赛\bin\Fl #
#                    ash\Obj\" --no_cse --no_unroll --no_inline               #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config                              #
#                    E:\anzhuangbao\K60\arm\INC\c\DLib_Config_Normal.h -I     #
#                    "F:\刘友才 (H)\飞思卡尔\程思遥\wust4华南赛\src\Sources\H #
#                    \" -I "F:\刘友才 (H)\飞思卡尔\程思遥\wust4华南赛\src\Sou #
#                    rces\H\Component_H\" -I "F:\刘友才                       #
#                    (H)\飞思卡尔\程思遥\wust4华南赛\src\Sources\H\Frame_H\"  #
#                    -Ol --use_c++_inline                                     #
#    List file    =  F:\刘友才 (H)\飞思卡尔\程思遥\wust4华南赛\bin\Flash\List #
#                    \main.lst                                                #
#    Object file  =  F:\刘友才 (H)\飞思卡尔\程思遥\wust4华南赛\bin\Flash\Obj\ #
#                    main.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

F:\刘友才 (H)\飞思卡尔\程思遥\wust4华南赛\src\Sources\C\main.c
      1          /*程序说明  */
      2          //使程序更加的精简高效准确，
      3          #include "MK60N512VMD100.h " /* include peripheral declarations */
      4          #include "includes.h"
      5          #include <math.h>
      6          #include"LCDDriver.h"
      7          
      8          #define GPIO_PIN_MASK      0x1Fu    //0x1f=31,限制位数为0--31有效
      9          #define GPIO_PIN(x)        (((1)<<(x & GPIO_PIN_MASK)))  //把当前位置1
     10          #define BUS_CLOCK  100  //(MHZ)50 82 90 100 105 110 115//这里设置的内核时钟等于总线时钟100M
     11          #define BAUD 19200     //波特率
     12          #define CORE_CLOCK 180
     13          
     14          //--------------------------采集图像的相关变量-------------------------------------//

   \                                 In section .bss, align 1
     15          bool     OddEvenStatus;		  //奇偶场状态标志
   \                     OddEvenStatus:
   \   00000000                      DS8 1
     16          #define  OddStatus  0
     17          #define  EvenStatus 1
     18          #define  ODD_EVEN_STATUS  (bool)(0x00000001 & (GPIOB_PDIR  >> 20))  //奇偶变换标志  将第ptc端口的第1位右移动后，置1
     19          #define VIF_START	0   	 //	开始模式				 
     20          #define VIF_WAITSAMPLE	1        //   等待模式
     21          #define VIF_SAMPLELINE	2         //   除去消隐行的状态
     22          #define VIF Videoclo_Flag         //
     23          #define PIANYI 150   //实际采集列数为COLUMN + PIANYI，PIANYI为每行消隐点  中心值大于中值，消隐行减少
     24          #define VIDEO_START_LINE  27	//图像采集起始行

   \                                 In section .bss, align 1
     25          bool ImageReady;               //图像准备好标志
   \                     ImageReady:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     26          uint8 Videoclo_Flag, VideoImageLine;   //采集状态标志位，行中断实际采集行数计数器
   \                     Videoclo_Flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     VideoImageLine:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     27          uint16 LineCount;                       //行中断采集行数计数器   这个数据一定是要定义为uint16  自己以前定义为uint8  伤心痛苦折磨了好几天
   \                     LineCount:
   \   00000000                      DS8 2
     28          
     29          
     30          //-------------------------处理图像的相关变量-----------------------------------------//
     31          #define ROW 65	                 //采集行数
     32          #define COLUMN	159 		//每行点数
     33          #define MID  79                 //列中心 

   \                                 In section .bss, align 4
     34          uint8 VideoImage1[ROW][COLUMN] =       //原始图像数组[0][0]在左下角
   \                     VideoImage1:
   \   00000000                      DS8 10336
     35          {
     36             0
     37          };

   \                                 In section .bss, align 4
     38          uint8 VideoImage2[ROW][COLUMN] =       //原始图像数组[0][0]在左下角
   \                     VideoImage2:
   \   00000000                      DS8 10336
     39          {
     40             0
     41          };
     42          

   \                                 In section .bss, align 4
     43          uint8 left_black[ROW]=                 //左边沿线的采集数组
   \                     left_black:
   \   00000000                      DS8 68
     44          {
     45            0
     46          };

   \                                 In section .bss, align 4
     47          uint8 right_black[ROW]=                //右边沿线的采集数组
   \                     right_black:
   \   00000000                      DS8 68
     48          {
     49            0
     50          };

   \                                 In section .bss, align 4
     51          uint8 center_white[ROW]=              //（虚拟出来的）中线的数组
   \                     center_white:
   \   00000000                      DS8 68
     52          {
     53            0
     54          };
     55          
     56          
     57          //-------------------------------------搜两边黑线----------------------------------//
     58          #define MIN_WHITEBASE_POINT 30                    //最少连续白点个数成为基准的要求
     59          #define WHITE_TOP_WHITELINE_POINT 20                  //两边的黑线的宽度小于这个值，判定为最高有效
     60          #define CENTER_LOST_POINT 20

   \                                 In section .bss, align 1
     61          uint8 current_deal_line=0;     //当前处理的行
   \                     current_deal_line:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     62          uint8 deal_start_line = 0;                //这个 值时控制处理的起始行一般定义为基准行 + 4
   \                     deal_start_line:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     63          uint8 hang_search_start = 0;             //定义每次扫描的开始是从哪个点开始的
   \                     hang_search_start:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     64          uint8 whitepoint_start=0;                //从左至右白点开始处
   \                     whitepoint_start:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     65          uint8 whitepoint_end=0;                 //从左至右白点结束处
   \                     whitepoint_end:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
     66          uint8 whitebase_searchstart = MID;
   \                     whitebase_searchstart:
   \   00000000   0x4F               DC8 79

   \                                 In section .bss, align 1
     67          uint8 left_whitebase_searchstart = 0;
   \                     left_whitebase_searchstart:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     68          uint8 right_whitebase_searchstart = 0; 
   \                     right_whitebase_searchstart:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
     69          uint8 re_whitepoint_start = 20;  // 发车的时候车子一定要在赛道的中心左右，否则会出现找不到赛道的危险
   \                     re_whitepoint_start:
   \   00000000   0x14               DC8 20

   \                                 In section .data, align 1
     70          uint8 re_whitepoint_end=145;   
   \                     re_whitepoint_end:
   \   00000000   0x91               DC8 145

   \                                 In section .bss, align 1
     71          uint8 center_lost_hang = 0;
   \                     center_lost_hang:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
     72          uint8 refer_road_width[ROW] ={127,126,125,124,123,122,120,119,118,117,
   \                     refer_road_width:
   \   00000000   0x7F 0x7E          DC8 127, 126, 125, 124, 123, 122, 120, 119, 118, 117, 116, 115, 114
   \              0x7D 0x7C    
   \              0x7B 0x7A    
   \              0x78 0x77    
   \              0x76 0x75    
   \              0x74 0x73    
   \              0x72         
   \   0000000D   0x71 0x70          DC8 113, 112, 110, 108, 106, 104, 112, 100, 98, 97, 95, 93, 92, 90, 89
   \              0x6E 0x6C    
   \              0x6A 0x68    
   \              0x70 0x64    
   \              0x62 0x61    
   \              0x5F 0x5D    
   \              0x5C 0x5A    
   \              0x59         
   \   0000001C   0x58 0x57          DC8 88, 87, 86, 85, 83, 81, 80, 79, 77, 75, 73, 70, 69, 68, 66, 64, 62
   \              0x56 0x55    
   \              0x53 0x51    
   \              0x50 0x4F    
   \              0x4D 0x4B    
   \              0x49 0x46    
   \              0x45 0x44    
   \              0x42 0x40    
   \              0x3E         
   \   0000002D   0x3C 0x3A          DC8 60, 58, 56, 53, 51, 49, 47, 45, 43, 41, 39, 38, 36, 35, 33, 32, 31
   \              0x38 0x35    
   \              0x33 0x31    
   \              0x2F 0x2D    
   \              0x2B 0x29    
   \              0x27 0x26    
   \              0x24 0x23    
   \              0x21 0x20    
   \              0x1F         
   \   0000003E   0x1E 0x1C          DC8 30, 28, 26, 0, 0, 0
   \              0x1A 0x00    
   \              0x00 0x00    
     73                                        116,115,114,113,112,110,108,106,104,112,
     74                                        100,98,97,95,93,92,90,89,88,87,
     75                                        86,85,83,81,80,79,77,75,73,70,
     76                                        69,68,66,64,62,60,58,56,53,51,
     77                                        49,47,45,43,41,39,38,36,35,33,
     78                                         32,31,30,28,26};//

   \                                 In section .data, align 1
     79          uint8 OT=36;                                     //判定为灰度值的跳变沿的最小灰度的跳变值
   \                     OT:
   \   00000000   0x24               DC8 36

   \                                 In section .data, align 1
     80          uint8 BASE_OT = 130;
   \                     BASE_OT:
   \   00000000   0x82               DC8 130

   \                                 In section .data, align 1
     81          uint8 WHITE_BLACK_OT = 145;           //进行二值化的分界值
   \                     WHITE_BLACK_OT:
   \   00000000   0x91               DC8 145
     82          #define WHITE 255
     83          #define BLACK 10

   \                                 In section .data, align 1
     84          uint8 top_whiteline = ROW-1;                          //图像的最顶行
   \                     top_whiteline:
   \   00000000   0x40               DC8 64

   \                                 In section .data, align 1
     85          uint8 left_top_whiteline = ROW-1;
   \                     left_top_whiteline:
   \   00000000   0x40               DC8 64

   \                                 In section .data, align 1
     86          uint8 right_top_whiteline = ROW-1;
   \                     right_top_whiteline:
   \   00000000   0x40               DC8 64
     87          

   \                                 In section .bss, align 1
     88          uint8 bottom_whitebase = 0;                       //图像的基准行 
   \                     bottom_whitebase:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     89          bool find_whitebase_flag = 0;  //基准行的标志位
   \                     find_whitebase_flag:
   \   00000000                      DS8 1
     90          

   \                                 In section .data, align 1
     91          uint8 re_white_refer = MID;  //这个点作为每场搜索基准行的开始的点  ，最开始的时候定义为 默认为MID
   \                     re_white_refer:
   \   00000000   0x4F               DC8 79

   \                                 In section .bss, align 1
     92          uint8 white_refer = 0;                            //基准行上的赛道的中点
   \                     white_refer:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     93          uint8 Row_state[ROW] =
   \                     Row_state:
   \   00000000                      DS8 68
     94          {
     95            0
     96          };
     97          //--------------------------------------赛道处理的相关参数-----------------------//

   \                                 In section .bss, align 1
     98          uint8 S_right = 0;//向右拐的计数
   \                     S_right:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     99          uint8 S_left =0 ; //向左拐计数
   \                     S_left:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    100          uint8 S_straight = 0;
   \                     S_straight:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    101          uint8 direction = 0; //4是初始化的值
   \                     direction:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    102          uint8 re_direction = 0;//记录上一次的当有的时候，无法判断出赛道的类型的时候，用上一次的状态
   \                     re_direction:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
    103          uint32 center_average = 0;
   \                     center_average:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
    104          uint16 center_error_average = 0;  
   \                     center_error_average:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
    105          uint32 center_linear_average = 0;
   \                     center_linear_average:
   \   00000000                      DS8 4
    106          
    107          #define RAMP_WIDTH  90                  //

   \                                 In section .data, align 2
    108          uint16 ramp_delay_time = 25;
   \                     ramp_delay_time:
   \   00000000   0x0019             DC16 25

   \                                 In section .bss, align 2
    109          uint16 ramp_time = 0;                //进入坡道后多长时间重新开启起跑线检测
   \                     ramp_time:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    110          uint16 ramp_dis_time = 0;       //防止下坡的误判而延时
   \                     ramp_dis_time:
   \   00000000                      DS8 2

   \                                 In section .data, align 2
    111          uint16 ramp_speed = 80;                    //坡道减速值70
   \                     ramp_speed:
   \   00000000   0x0050             DC16 80

   \                                 In section .bss, align 1
    112          bool ramp_flag = 0;                          //进入坡道标志,主要用于控制
   \                     ramp_flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    113          bool ramp_dis_flag = 0;                     //主要是防止下坡误判
   \                     ramp_dis_flag:
   \   00000000                      DS8 1
    114           
    115           /*测试的时候，监测函数中局部变量
    116          float XX_square_sum=0;   //X轴平方和
    117          float YY_square_sum=0;   //Y轴平方和
    118          float XYmulti_sum=0;      //XY乘积之和*/

   \                                 In section .bss, align 4
    119          float linear_factor = 0;
   \                     linear_factor:
   \   00000000                      DS8 4
    120          
    121          //-----串口功能选择----//

   \                                 In section .bss, align 1
    122          uint8 send_mes=0;              //根据上位机发送来的数据来选择不同的串口功能
   \                     send_mes:
   \   00000000                      DS8 1
    123          
    124          //------------------------------------电机控制函数的参数-----------------------------------//
    125          #define SPEEDCHOICENUM 6  //定义6当
    126          typedef struct Tag_SpeedSwitch{
    127            uint16 Cstraightspeed;
    128            uint16 Cbowspeed;
    129            uint16 Cstraightspeed_ed;
    130          }SpeedSwitch;
    131          

   \                                 In section .data, align 4
    132          SpeedSwitch mySpeedswitch[SPEEDCHOICENUM]={
   \                     mySpeedswitch:
   \   00000000   0x008C 0x0088      DC16 140, 136, 38, 135, 132, 34, 130, 126, 28, 125, 115, 25, 115, 108
   \              0x0026 0x0087
   \              0x0084 0x0022
   \              0x0082 0x007E
   \              0x001C 0x007D
   \              0x0073 0x0019
   \              0x0073 0x006C
   \   0000001C   0x000F 0x006E      DC16 15, 110, 90, 10
   \              0x005A 0x000A
    133            {140,136,38},    //
    134            {135,132,34},
    135            {130,126,28},
    136            {125,115,25},
    137            {115,108,15},
    138            {110,90,10}  
    139          };
    140          

   \                                 In section .bss, align 2
    141          uint16 speed_feedback = 0;               //编码器的返回值                  //
   \                     speed_feedback:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    142          int16 speed_re_error = 0;
   \                     speed_re_error:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
    143          bool stopflag = 0;//速度反馈
   \                     stopflag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
    144          uint16 speed_down_cnt = 0;       //检测到起跑线后延时十场，然后减速
   \                     speed_down_cnt:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    145          int16 speed_error = 0;
   \                     speed_error:
   \   00000000                      DS8 2

   \                                 In section .data, align 1
    146          uint8 speed_p = 80;//44
   \                     speed_p:
   \   00000000   0x50               DC8 80

   \                                 In section .data, align 1
    147          uint8 speed_i =95;//65
   \                     speed_i:
   \   00000000   0x5F               DC8 95

   \                                 In section .bss, align 2
    148          int16 speed = 0;
   \                     speed:
   \   00000000                      DS8 2
    149          

   \                                 In section .bss, align 2
    150          uint16 lcd_straight_speed = 0;  //方便与lcd调节速度的最大和最小值
   \                     lcd_straight_speed:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    151          uint16 lcd_bow_speed = 0;//
   \                     lcd_bow_speed:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    152          uint16 lcd_straight_speed_ed = 0;
   \                     lcd_straight_speed_ed:
   \   00000000                      DS8 2
    153          

   \                                 In section .data, align 2
    154          uint16 straight_speed = 115;
   \                     straight_speed:
   \   00000000   0x0073             DC16 115

   \                                 In section .data, align 2
    155          uint16 bow_speed = 100;
   \                     bow_speed:
   \   00000000   0x0064             DC16 100

   \                                 In section .data, align 2
    156          uint16 straight_speed_ed = 8;
   \                     straight_speed_ed:
   \   00000000   0x0008             DC16 8

   \                                 In section .data, align 2
    157          uint16 max_speed=900;
   \                     max_speed:
   \   00000000   0x0384             DC16 900

   \                                 In section .data, align 2
    158          uint16 min_speed=20;
   \                     min_speed:
   \   00000000   0x0014             DC16 20
    159          

   \                                 In section .bss, align 2
    160          uint16 straight_count = 0;
   \                     straight_count:
   \   00000000                      DS8 2
    161          

   \                                 In section .bss, align 1
    162          bool dead_stop = 0; 
   \                     dead_stop:
   \   00000000                      DS8 1
    163          

   \                                 In section .bss, align 2
    164          uint16 speed_except=0;
   \                     speed_except:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
    165          uint8 re_top_whiteline=0;
   \                     re_top_whiteline:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    166          uint8 speed_select = 0;//当为1的时候选择低速跑，用于测试跑道和算法 ，通过拨码控制
   \                     speed_select:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    167          uint8 full_speed_line = 0;
   \                     full_speed_line:
   \   00000000                      DS8 1
    168          //-----------------------------------舵机控制函数的变量---------------------------------//
    169          

   \                                 In section .data, align 2
    170          int16 angle=1460;
   \                     angle:
   \   00000000   0x05B4             DC16 1460

   \                                 In section .data, align 2
    171          int16 re_angle= 1460;
   \                     re_angle:
   \   00000000   0x05B4             DC16 1460

   \                                 In section .data, align 2
    172          uint16 mid_angle=1460; //  推着向右拐，说明小于摆正值     当车子跑的稳定于左边时，减去一个值可恢复到中间
   \                     mid_angle:
   \   00000000   0x05B4             DC16 1460
    173          

   \                                 In section .bss, align 2
    174          uint16 control_top_whiteline = 0;//re_control_top_whiteline top_error_servo_p
   \                     control_top_whiteline:
   \   00000000                      DS8 2

   \                                 In section .data, align 2
    175          uint16 re_control_top_whiteline = ROW - 1;
   \                     re_control_top_whiteline:
   \   00000000   0x0040             DC16 64

   \                                 In section .bss, align 2
    176          uint16 danger_count = 0;  //记录危险的点数
   \                     danger_count:
   \   00000000                      DS8 2

   \                                 In section .data, align 1
    177          bool danger_flag = 1;  //这个的初始值为1.当出了控制最高行了则置为0；
   \                     danger_flag:
   \   00000000   0x01               DC8 1

   \                                 In section .bss, align 2
    178          int16 p_error=0;
   \                     p_error:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    179          int16 p_re_error = 0;
   \                     p_re_error:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
    180          int16 ref_his_error[5] ={0,0,0,0,0};//用这个数组来记录历史的值，然后参与当前的error
   \                     ref_his_error:
   \   00000000                      DS8 12
    181          
    182          //对这两个pd的说明，第一个pd起到的作用是粗调，第二个pd是微调，当发现调节第二个pd,没有很大的改善的时候再且一定去动第一个pd
    183          

   \                                 In section .bss, align 2
    184          uint16 error_servo_p=0;
   \                     error_servo_p:
   \   00000000                      DS8 2

   \                                 In section .data, align 2
    185          int16 lcd_error_servo_p = 3; //4  2   4
   \                     lcd_error_servo_p:
   \   00000000   0x0003             DC16 3

   \                                 In section .bss, align 2
    186          uint16 error_servo_d=0;
   \                     error_servo_d:
   \   00000000                      DS8 2

   \                                 In section .data, align 2
    187          int16 lcd_error_servo_d = 57;  //83  40  65
   \                     lcd_error_servo_d:
   \   00000000   0x0039             DC16 57

   \                                 In section .bss, align 2
    188          uint16 top_error_servo_p = 0;
   \                     top_error_servo_p:
   \   00000000                      DS8 2
    189          

   \                                 In section .bss, align 2
    190          uint16 error_servo_ref_p = 0;
   \                     error_servo_ref_p:
   \   00000000                      DS8 2

   \                                 In section .data, align 2
    191          int16 lcd_ref_p = 6;  //9      7和25使得直线很直   12  6          6
   \                     lcd_ref_p:
   \   00000000   0x0006             DC16 6

   \                                 In section .bss, align 2
    192          uint16 error_servo_ref_d = 0;
   \                     error_servo_ref_d:
   \   00000000                      DS8 2

   \                                 In section .data, align 2
    193          int16 lcd_ref_d = 40;  // 25                         60   23
   \                     lcd_ref_d:
   \   00000000   0x0028             DC16 40
    194          

   \                                 In section .bss, align 1
    195          uint8 get_p_errorline = 0;
   \                     get_p_errorline:
   \   00000000                      DS8 1
    196           

   \                                 In section .bss, align 2
    197          int16 refer_error =0;
   \                     refer_error:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    198          int16 re_refer_error = 0;
   \                     re_refer_error:
   \   00000000                      DS8 2
    199          
    200          //起跑加载检测延时
    201          /*#define right_tube1   (bool)(GPIOB_PDIR >> 4 & 0x00000001)             //分别读取红外管的状态
    202          #define right_tube2   (bool)((GPIOB_PDIR >> 5) & 0x00000001)
    203          #define left_tube1   (bool)((GPIOB_PDIR >> 6) & 0x00000001)
    204          #define left_tube2   (bool)((GPIOB_PDIR >> 7) & 0x00000001)*/

   \                                 In section .bss, align 4
    205          uint32 start_stop_count = 0;  //起跑线检测计数
   \                     start_stop_count:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
    206          uint32 stop_pit_count = 6;
   \                     stop_pit_count:
   \   00000000   0x00000006         DC32 6

   \                                 In section .bss, align 1
    207          bool start_stop_en = 0;   //起跑线检测使能
   \                     start_stop_en:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    208          bool start_stop_cs =0;   //起跑线检测的片选信号   当为1的时候选中检测起跑线
   \                     start_stop_cs:
   \   00000000                      DS8 1
    209          

   \                                 In section .bss, align 2
    210          uint16 car_test_run = 0; 
   \                     car_test_run:
   \   00000000                      DS8 2

   \                                 In section .data, align 1
    211          bool test_run = 1;  
   \                     test_run:
   \   00000000   0x01               DC8 1
    212          //-------------------------------按键的定义-------------------------------------------//
    213          #define LCD_ROW 7                      //小液晶屏的实际的行数为8行

   \                                 In section .bss, align 1
    214          bool change_page=0;             //翻页
   \                     change_page:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    215          bool se_sub_NUM=0;             //翻页
   \                     se_sub_NUM:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    216          bool up_line=0;              //换行   向上
   \                     up_line:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    217          bool down_line=0;            //换行   向下
   \                     down_line:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    218          bool add_NUM=0;              //更改数值  加
   \                     add_NUM:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    219          bool sub_NUM=0;              //更改数值  减 
   \                     sub_NUM:
   \   00000000                      DS8 1
    220          
    221          //--------------------------------拨码的定义参数--------------------------------------//

   \                                 In section .data, align 1
    222          bool lcd_debug = 1;            //lcd的调试选择
   \                     lcd_debug:
   \   00000000   0x01               DC8 1

   \                                 In section .bss, align 1
    223          bool redraw_control=0;         //刷屏的控制位
   \                     redraw_control:
   \   00000000                      DS8 1
    224          
    225          //------------------------------------LCD变量声明-------------------------------------//
    226          void pre_show(void);        //第一面的预显示
    227          void redraw(void);          //刷频幕
    228          void Keyscan(void);          //扫描拨码
    229          void LCD_change_value(unsigned char page,unsigned char m,int i);//更改数值
    230          void Delay_MS(uint32 ms);       //延时函数

   \                                 In section .data, align 1
    231          uint8 lcd_page_num=1;        //液晶屏的页数
   \                     lcd_page_num:
   \   00000000   0x01               DC8 1

   \                                 In section .bss, align 1
    232          uint8 lcd_line_num=0;        //液晶屏的行数
   \                     lcd_line_num:
   \   00000000                      DS8 1
    233          
    234          
    235          //---------------------------数组初始化--------------------------//

   \                                 In section .text, align 2, keep-with-next
    236          void Initial(void)
    237          {
    238            int16 i;
    239               for(i = 0;i < ROW;i++)
   \                     Initial:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE014             B.N      ??Initial_0
    240                 {
    241                   left_black[i] = 0;
   \                     ??Initial_1:
   \   00000004   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable5
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x5442             STRB     R2,[R0, R1]
    242                   right_black[i] = 0;
   \   0000000E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x5442             STRB     R2,[R0, R1]
    243                   center_white[i] = 0;
   \   00000018   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   0000001E   0x2200             MOVS     R2,#+0
   \   00000020   0x5442             STRB     R2,[R0, R1]
    244                   Row_state[i] = 3; //3代表的是两边都没有出现丢点
   \   00000022   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   00000028   0x2203             MOVS     R2,#+3
   \   0000002A   0x5442             STRB     R2,[R0, R1]
    245                 }
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \                     ??Initial_0:
   \   0000002E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000030   0x2841             CMP      R0,#+65
   \   00000032   0xDBE7             BLT.N    ??Initial_1
    246                 start_stop_count = 0;
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable5_4
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x6001             STR      R1,[R0, #+0]
    247                 ramp_dis_flag = 0;
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   00000040   0x2100             MOVS     R1,#+0
   \   00000042   0x7001             STRB     R1,[R0, #+0]
    248                 ramp_flag = 0;
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable6
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0x7001             STRB     R1,[R0, #+0]
    249          }
   \   0000004C   0x4770             BX       LR               ;; return
    250          
    251          //--------------------低功耗脉冲计数器初始化-----------------------//

   \                                 In section .text, align 2, keep-with-next
    252          void LPTMR_Init()   //PTC5  LPT0_ALT2
    253          {
    254             SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK; //开启C端口时钟
   \                     LPTMR_Init:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x40048038
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable5_6  ;; 0x40048038
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    255             PORTC_PCR5 &= ~PORT_PCR_MUX_MASK;
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable5_7  ;; 0x4004b014
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable5_7  ;; 0x4004b014
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    256             PORTC_PCR5 |= PORT_PCR_MUX(4);  //PTC5配置为LPTMR模式
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable5_7  ;; 0x4004b014
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable5_7  ;; 0x4004b014
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    257             PORTC_PCR5 |= PORT_PCR_PE_MASK; //
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable5_7  ;; 0x4004b014
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable5_7  ;; 0x4004b014
   \   0000003E   0x6008             STR      R0,[R1, #+0]
    258             PORTC_PCR5 &= ~PORT_PCR_PS_MASK; //下拉
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable5_7  ;; 0x4004b014
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x0840             LSRS     R0,R0,#+1
   \   00000048   0x0040             LSLS     R0,R0,#+1
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable5_7  ;; 0x4004b014
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    259          
    260             SIM_SCGC5 |= SIM_SCGC5_LPTIMER_MASK;  //使能LPTM模块时钟
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x40048038
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable5_6  ;; 0x40048038
   \   0000005E   0x6008             STR      R0,[R1, #+0]
    261             LPTMR0_CSR &= ~LPTMR_CSR_TPS_MASK;
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable6_1  ;; 0x40040000
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0xF030 0x0030      BICS     R0,R0,#0x30
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable6_1  ;; 0x40040000
   \   0000006E   0x6008             STR      R0,[R1, #+0]
    262             LPTMR0_CSR |= LPTMR_CSR_TPS(2)| LPTMR_CSR_TMS_MASK; //  ALT2  计数模式
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable6_1  ;; 0x40040000
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0xF050 0x0022      ORRS     R0,R0,#0x22
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable6_1  ;; 0x40040000
   \   0000007E   0x6008             STR      R0,[R1, #+0]
    263             LPTMR0_CSR |= LPTMR_CSR_TFC_MASK;  //溢出复位 65535
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable6_1  ;; 0x40040000
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable6_1  ;; 0x40040000
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    264             LPTMR0_CSR &= ~LPTMR_CSR_TPP_MASK;  //上升沿计数
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable6_1  ;; 0x40040000
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0xF030 0x0008      BICS     R0,R0,#0x8
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable6_1  ;; 0x40040000
   \   0000009E   0x6008             STR      R0,[R1, #+0]
    265          
    266             LPTMR0_PSR |= LPTMR_PSR_PBYP_MASK; //  忽略分频和滤波
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable6_2  ;; 0x40040004
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable6_2  ;; 0x40040004
   \   000000AE   0x6008             STR      R0,[R1, #+0]
    267             LPTMR0_CSR |= LPTMR_CSR_TEN_MASK;  //开启LPT模块
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable6_1  ;; 0x40040000
   \   000000B4   0x6800             LDR      R0,[R0, #+0]
   \   000000B6   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable6_1  ;; 0x40040000
   \   000000BE   0x6008             STR      R0,[R1, #+0]
    268          }
   \   000000C0   0x4770             BX       LR               ;; return
    269          
    270          
    271          //---------------------------行中断捕捉端口初始化-------------------//

   \                                 In section .text, align 2, keep-with-next
    272          void EXIT_Init(void)
    273          {
    274              SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;  //开启C端口时钟
   \                     EXIT_Init:
   \   00000000   0x....             LDR.N    R0,??DataTable5_6  ;; 0x40048038
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000008   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40048038
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    275              PORTC_PCR3 =PORT_PCR_MUX(1);  //GPIO
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable6_3  ;; 0x4004b00c
   \   00000010   0xF44F 0x7180      MOV      R1,#+256
   \   00000014   0x6001             STR      R1,[R0, #+0]
    276              GPIOC_PDDR &= ~GPIO_PIN(3);   //输入
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable6_4  ;; 0x400ff094
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0xF030 0x0008      BICS     R0,R0,#0x8
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable6_4  ;; 0x400ff094
   \   00000024   0x6008             STR      R0,[R1, #+0]
    277              PORTC_PCR3 |= PORT_PCR_PE_MASK | PORT_PCR_PS_MASK; //上拉电阻;
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable6_3  ;; 0x4004b00c
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0xF050 0x0003      ORRS     R0,R0,#0x3
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable6_3  ;; 0x4004b00c
   \   00000034   0x6008             STR      R0,[R1, #+0]
    278              PORTC_PCR3 |= PORT_PCR_IRQC(9); //9为上升沿触发外部中断 10为下降沿触
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable6_3  ;; 0x4004b00c
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0xF450 0x2010      ORRS     R0,R0,#0x90000
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable6_3  ;; 0x4004b00c
   \   00000044   0x6008             STR      R0,[R1, #+0]
    279          }
   \   00000046   0x4770             BX       LR               ;; return
    280          
    281          
    282          
    283          //----------------------------串口初始化-----------------------------//

   \                                 In section .text, align 2, keep-with-next
    284          void UART0_Init(void)    //PTB16 RXD    PTB17 TXD
    285          {
   \                     UART0_Init:
   \   00000000   0xB410             PUSH     {R4}
    286              uint32 uartclk_khz = CORE_CLOCK*10 * BUS_CLOCK;//时钟180MHz    //随时更改
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable6_5  ;; 0x2bf20
    287              uint32 baud = BAUD;
   \   00000006   0xF44F 0x4196      MOV      R1,#+19200
    288              uint16 sbr,brfa;
    289              
    290              SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK; //开启B口时钟
   \   0000000A   0x....             LDR.N    R2,??DataTable5_6  ;; 0x40048038
   \   0000000C   0x6812             LDR      R2,[R2, #+0]
   \   0000000E   0xF452 0x6280      ORRS     R2,R2,#0x400
   \   00000012   0x....             LDR.N    R3,??DataTable5_6  ;; 0x40048038
   \   00000014   0x601A             STR      R2,[R3, #+0]
    291              PORTB_PCR16|=PORT_PCR_MUX(3);//将PTB16引脚设置为模式3，即UART0_RX
   \   00000016   0x.... 0x....      LDR.W    R2,??DataTable6_6  ;; 0x4004a040
   \   0000001A   0x6812             LDR      R2,[R2, #+0]
   \   0000001C   0xF44F 0x7340      MOV      R3,#+768
   \   00000020   0x431A             ORRS     R2,R3,R2
   \   00000022   0x.... 0x....      LDR.W    R3,??DataTable6_6  ;; 0x4004a040
   \   00000026   0x601A             STR      R2,[R3, #+0]
    292              PORTB_PCR17|=PORT_PCR_MUX(3);//将PTB177引脚设置为模式3，即UART0_TX
   \   00000028   0x.... 0x....      LDR.W    R2,??DataTable6_7  ;; 0x4004a044
   \   0000002C   0x6812             LDR      R2,[R2, #+0]
   \   0000002E   0xF44F 0x7340      MOV      R3,#+768
   \   00000032   0x431A             ORRS     R2,R3,R2
   \   00000034   0x.... 0x....      LDR.W    R3,??DataTable6_7  ;; 0x4004a044
   \   00000038   0x601A             STR      R2,[R3, #+0]
    293              SIM_SCGC4|=SIM_SCGC4_UART0_MASK;//开启UART0时钟
   \   0000003A   0x.... 0x....      LDR.W    R2,??DataTable6_8  ;; 0x40048034
   \   0000003E   0x6812             LDR      R2,[R2, #+0]
   \   00000040   0xF452 0x6280      ORRS     R2,R2,#0x400
   \   00000044   0x.... 0x....      LDR.W    R3,??DataTable6_8  ;; 0x40048034
   \   00000048   0x601A             STR      R2,[R3, #+0]
    294              sbr = (uint16)((uartclk_khz*1000)/(baud*16));//计算并设置波特率
   \   0000004A   0xF44F 0x727A      MOV      R2,#+1000
   \   0000004E   0xFB02 0xF200      MUL      R2,R2,R0
   \   00000052   0x010B             LSLS     R3,R1,#+4
   \   00000054   0xFBB2 0xF2F3      UDIV     R2,R2,R3
    295              
    296              UART0_BDH = (uint8)((sbr&0x1F00)>>8);//将波特率19200写入相应的寄存器然后进行使能，使其工作。前面的buad只是一个数字，而后面的计算是将19200写入这个寄存器，然后进行使能
   \   00000058   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000005A   0x1213             ASRS     R3,R2,#+8
   \   0000005C   0xF013 0x031F      ANDS     R3,R3,#0x1F
   \   00000060   0x.... 0x....      LDR.W    R4,??DataTable6_9  ;; 0x4006a000
   \   00000064   0x7023             STRB     R3,[R4, #+0]
    297              UART0_BDL=(uint8)(sbr&0x00FF);
   \   00000066   0x.... 0x....      LDR.W    R3,??DataTable6_10  ;; 0x4006a001
   \   0000006A   0x701A             STRB     R2,[R3, #+0]
    298              brfa = (((uartclk_khz*32000)/(baud*16))-(sbr*32));
   \   0000006C   0xF44F 0x43FA      MOV      R3,#+32000
   \   00000070   0x4358             MULS     R0,R3,R0
   \   00000072   0x0109             LSLS     R1,R1,#+4
   \   00000074   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000078   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000007A   0xEBB0 0x1042      SUBS     R0,R0,R2, LSL #+5
    299              UART0_C4 = (uint8)(brfa & 0x001F);
   \   0000007E   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable6_11  ;; 0x4006a00a
   \   00000086   0x7008             STRB     R0,[R1, #+0]
    300              UART0_C2 |=(UART_C2_TE_MASK|UART_C2_RE_MASK);
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable6_12  ;; 0x4006a003
   \   0000008C   0x7800             LDRB     R0,[R0, #+0]
   \   0000008E   0xF050 0x000C      ORRS     R0,R0,#0xC
   \   00000092   0x.... 0x....      LDR.W    R1,??DataTable6_12  ;; 0x4006a003
   \   00000096   0x7008             STRB     R0,[R1, #+0]
    301              UART0_C1 = 0;	
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable6_13  ;; 0x4006a002
   \   0000009C   0x2100             MOVS     R1,#+0
   \   0000009E   0x7001             STRB     R1,[R0, #+0]
    302              UART0_C2 |= UART_C2_RIE_MASK;   //开UART0接收中断
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable6_12  ;; 0x4006a003
   \   000000A4   0x7800             LDRB     R0,[R0, #+0]
   \   000000A6   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable6_12  ;; 0x4006a003
   \   000000AE   0x7008             STRB     R0,[R1, #+0]
    303          }
   \   000000B0   0xBC10             POP      {R4}
   \   000000B2   0x4770             BX       LR               ;; return
    304          
    305          
    306          //-------------------------------------ftm初始化-----------------------------------------//

   \                                 In section .text, align 2, keep-with-next
    307          void hw_FTM_init(void)
    308          {      	
    309              SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;//开启C端口时钟
   \                     hw_FTM_init:
   \   00000000   0x....             LDR.N    R0,??DataTable5_6  ;; 0x40048038
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000008   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40048038
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    310              SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK; //开启A端口时钟
   \   0000000C   0x....             LDR.N    R0,??DataTable5_6  ;; 0x40048038
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF44F 0x7100      MOV      R1,#+512
   \   00000014   0x4308             ORRS     R0,R1,R0
   \   00000016   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40048038
   \   00000018   0x6008             STR      R0,[R1, #+0]
    311            
    312              
    313              PORTC_PCR4 &= ~PORT_PCR_MUX_MASK; //清零
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable6_14  ;; 0x4004b010
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable6_14  ;; 0x4004b010
   \   00000028   0x6008             STR      R0,[R1, #+0]
    314              PORTA_PCR12 &= ~PORT_PCR_MUX_MASK;
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable6_15  ;; 0x40049030
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable6_15  ;; 0x40049030
   \   00000038   0x6008             STR      R0,[R1, #+0]
    315              PORTA_PCR13 &= ~PORT_PCR_MUX_MASK;
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable6_16  ;; 0x40049034
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable6_16  ;; 0x40049034
   \   00000048   0x6008             STR      R0,[R1, #+0]
    316              PORTA_PCR10 &= ~PORT_PCR_MUX_MASK;
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable6_17  ;; 0x40049028
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable6_17  ;; 0x40049028
   \   00000058   0x6008             STR      R0,[R1, #+0]
    317              PORTC_PCR3 &= ~PORT_PCR_MUX_MASK;
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable6_3  ;; 0x4004b00c
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable6_3  ;; 0x4004b00c
   \   00000068   0x6008             STR      R0,[R1, #+0]
    318              
    319              PORTC_PCR4 = PORT_PCR_MUX(4); //FTM is alt4 function for this pin
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable6_14  ;; 0x4004b010
   \   0000006E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000072   0x6001             STR      R1,[R0, #+0]
    320              PORTA_PCR10 = PORT_PCR_MUX(3);
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable6_17  ;; 0x40049028
   \   00000078   0xF44F 0x7140      MOV      R1,#+768
   \   0000007C   0x6001             STR      R1,[R0, #+0]
    321              PORTA_PCR12 = PORT_PCR_MUX(3);//FTM is alt3 function for this pin 
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable6_15  ;; 0x40049030
   \   00000082   0xF44F 0x7140      MOV      R1,#+768
   \   00000086   0x6001             STR      R1,[R0, #+0]
    322              PORTA_PCR13 = PORT_PCR_MUX(3);
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable6_16  ;; 0x40049034
   \   0000008C   0xF44F 0x7140      MOV      R1,#+768
   \   00000090   0x6001             STR      R1,[R0, #+0]
    323                PORTC_PCR3 = PORT_PCR_MUX(3);
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable6_3  ;; 0x4004b00c
   \   00000096   0xF44F 0x7140      MOV      R1,#+768
   \   0000009A   0x6001             STR      R1,[R0, #+0]
    324            
    325              SIM_SCGC6|=SIM_SCGC6_FTM0_MASK;     //使能FTM0时钟
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable6_18  ;; 0x4004803c
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable6_18  ;; 0x4004803c
   \   000000AA   0x6008             STR      R0,[R1, #+0]
    326              SIM_SCGC6|=SIM_SCGC6_FTM1_MASK;    //开启FTM1模块时钟
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable6_18  ;; 0x4004803c
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable6_18  ;; 0x4004803c
   \   000000BA   0x6008             STR      R0,[R1, #+0]
    327              SIM_SCGC3|=SIM_SCGC3_FTM2_MASK;    //开启FTM2模块时钟
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable6_19  ;; 0x40048030
   \   000000C0   0x6800             LDR      R0,[R0, #+0]
   \   000000C2   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable6_19  ;; 0x40048030
   \   000000CA   0x6008             STR      R0,[R1, #+0]
    328              
    329              FTM0_C3SC |= FTM_CnSC_MSB_MASK | FTM_CnSC_ELSB_MASK;  //配置FTM0_CH3 
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable6_20  ;; 0x40038024
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0xF050 0x0028      ORRS     R0,R0,#0x28
   \   000000D6   0x.... 0x....      LDR.W    R1,??DataTable6_20  ;; 0x40038024
   \   000000DA   0x6008             STR      R0,[R1, #+0]
    330              FTM1_C0SC |= FTM_CnSC_MSB_MASK | FTM_CnSC_ELSB_MASK;  //配置模式 CH0
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable6_21  ;; 0x4003900c
   \   000000E0   0x6800             LDR      R0,[R0, #+0]
   \   000000E2   0xF050 0x0028      ORRS     R0,R0,#0x28
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable6_21  ;; 0x4003900c
   \   000000EA   0x6008             STR      R0,[R1, #+0]
    331              FTM1_C1SC |= FTM_CnSC_MSB_MASK | FTM_CnSC_ELSB_MASK;  //FTM1_CH1
   \   000000EC   0x.... 0x....      LDR.W    R0,??DataTable6_22  ;; 0x40039014
   \   000000F0   0x6800             LDR      R0,[R0, #+0]
   \   000000F2   0xF050 0x0028      ORRS     R0,R0,#0x28
   \   000000F6   0x.... 0x....      LDR.W    R1,??DataTable6_22  ;; 0x40039014
   \   000000FA   0x6008             STR      R0,[R1, #+0]
    332              FTM2_C0SC |= FTM_CnSC_MSB_MASK | FTM_CnSC_ELSB_MASK;  //配置FTM2_CH0 
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable6_23  ;; 0x400b800c
   \   00000100   0x6800             LDR      R0,[R0, #+0]
   \   00000102   0xF050 0x0028      ORRS     R0,R0,#0x28
   \   00000106   0x.... 0x....      LDR.W    R1,??DataTable6_23  ;; 0x400b800c
   \   0000010A   0x6008             STR      R0,[R1, #+0]
    333              FTM0_C2SC |= FTM_CnSC_MSB_MASK | FTM_CnSC_ELSB_MASK;  //配置FTM2_CH0 
   \   0000010C   0x.... 0x....      LDR.W    R0,??DataTable6_24  ;; 0x4003801c
   \   00000110   0x6800             LDR      R0,[R0, #+0]
   \   00000112   0xF050 0x0028      ORRS     R0,R0,#0x28
   \   00000116   0x.... 0x....      LDR.W    R1,??DataTable6_24  ;; 0x4003801c
   \   0000011A   0x6008             STR      R0,[R1, #+0]
    334              
    335              
    336              FTM0_CNT=0;//设置计数初值为0
   \   0000011C   0x.... 0x....      LDR.W    R0,??DataTable6_25  ;; 0x40038004
   \   00000120   0x2100             MOVS     R1,#+0
   \   00000122   0x6001             STR      R1,[R0, #+0]
    337              FTM1_CNT=0;
   \   00000124   0x.... 0x....      LDR.W    R0,??DataTable6_26  ;; 0x40039004
   \   00000128   0x2100             MOVS     R1,#+0
   \   0000012A   0x6001             STR      R1,[R0, #+0]
    338              FTM2_CNT=0;
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable6_27  ;; 0x400b8004
   \   00000130   0x2100             MOVS     R1,#+0
   \   00000132   0x6001             STR      R1,[R0, #+0]
    339              
    340              //Modulo value,The EPWM period is determined by (MOD - CNTIN + 0x0001) 
    341          
    342              //设置 the pulse width(duty cycle) is determined by (CnV - CNTIN).
    343              
    344               FTM1_MOD =1000;              //设置PWM频率为10K=100 000 000 /2^2/2500  这个100 000 000 是第七届的系统频率  2500是其设置的FTM1_MOD 值
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable6_28  ;; 0x40039008
   \   00000138   0xF44F 0x717A      MOV      R1,#+1000
   \   0000013C   0x6001             STR      R1,[R0, #+0]
    345               FTM0_MOD =2; //3145   300hz sd5舵机的频率恰当，会导致舵机很软，这个需要去调整，舵机很软的原因有两个，电压问题，频率问题。。一般在300hz左右  //18750  50hz
   \   0000013E   0x.... 0x....      LDR.W    R0,??DataTable6_29  ;; 0x40038008
   \   00000142   0x2102             MOVS     R1,#+2
   \   00000144   0x6001             STR      R1,[R0, #+0]
    346               FTM2_MOD =2; 
   \   00000146   0x.... 0x....      LDR.W    R0,??DataTable6_30  ;; 0x400b8008
   \   0000014A   0x2102             MOVS     R1,#+2
   \   0000014C   0x6001             STR      R1,[R0, #+0]
    347              
    348              FTM0_CNTIN=0;//设置初始化计数值
   \   0000014E   0x.... 0x....      LDR.W    R0,??DataTable6_31  ;; 0x4003804c
   \   00000152   0x2100             MOVS     R1,#+0
   \   00000154   0x6001             STR      R1,[R0, #+0]
    349              FTM1_CNTIN=0;
   \   00000156   0x.... 0x....      LDR.W    R0,??DataTable6_32  ;; 0x4003904c
   \   0000015A   0x2100             MOVS     R1,#+0
   \   0000015C   0x6001             STR      R1,[R0, #+0]
    350              FTM2_CNTIN=0;
   \   0000015E   0x.... 0x....      LDR.W    R0,??DataTable6_33  ;; 0x400b804c
   \   00000162   0x2100             MOVS     R1,#+0
   \   00000164   0x6001             STR      R1,[R0, #+0]
    351                
    352              FTM0_C3V=mid_angle;//1400;//1490 1.5ms//2ms  1986//2.5ms  2483 //1ms 993// 0.5ms  497  //1614
   \   00000166   0x.... 0x....      LDR.W    R0,??DataTable6_34  ;; 0x40038028
   \   0000016A   0x.... 0x....      LDR.W    R1,??DataTable6_35
   \   0000016E   0x8809             LDRH     R1,[R1, #+0]
   \   00000170   0x6001             STR      R1,[R0, #+0]
    353          
    354              FTM1_C0V=0;
   \   00000172   0x.... 0x....      LDR.W    R0,??DataTable6_36  ;; 0x40039010
   \   00000176   0x2100             MOVS     R1,#+0
   \   00000178   0x6001             STR      R1,[R0, #+0]
    355              FTM1_C1V=0;
   \   0000017A   0x.... 0x....      LDR.W    R0,??DataTable6_37  ;; 0x40039018
   \   0000017E   0x2100             MOVS     R1,#+0
   \   00000180   0x6001             STR      R1,[R0, #+0]
    356              
    357              FTM2_C0V=1;
   \   00000182   0x.... 0x....      LDR.W    R0,??DataTable6_38  ;; 0x400b8010
   \   00000186   0x2101             MOVS     R1,#+1
   \   00000188   0x6001             STR      R1,[R0, #+0]
    358              
    359              FTM0_SC |= FTM_SC_CLKS(1) | FTM_SC_PS(1);
   \   0000018A   0x.... 0x....      LDR.W    R0,??DataTable6_39  ;; 0x40038000
   \   0000018E   0x6800             LDR      R0,[R0, #+0]
   \   00000190   0xF050 0x0009      ORRS     R0,R0,#0x9
   \   00000194   0x.... 0x....      LDR.W    R1,??DataTable6_39  ;; 0x40038000
   \   00000198   0x6008             STR      R0,[R1, #+0]
    360              FTM1_SC |= FTM_SC_CLKS(1) | FTM_SC_PS(2); //设置时钟和分频
   \   0000019A   0x.... 0x....      LDR.W    R0,??DataTable6_40  ;; 0x40039000
   \   0000019E   0x6800             LDR      R0,[R0, #+0]
   \   000001A0   0xF050 0x000A      ORRS     R0,R0,#0xA
   \   000001A4   0x.... 0x....      LDR.W    R1,??DataTable6_40  ;; 0x40039000
   \   000001A8   0x6008             STR      R0,[R1, #+0]
    361              FTM2_SC |= FTM_SC_CLKS(1) | FTM_SC_PS(1);
   \   000001AA   0x.... 0x....      LDR.W    R0,??DataTable6_41  ;; 0x400b8000
   \   000001AE   0x6800             LDR      R0,[R0, #+0]
   \   000001B0   0xF050 0x0009      ORRS     R0,R0,#0x9
   \   000001B4   0x.... 0x....      LDR.W    R1,??DataTable6_41  ;; 0x400b8000
   \   000001B8   0x6008             STR      R0,[R1, #+0]
    362          }
   \   000001BA   0x4770             BX       LR               ;; return
    363          
    364          //----------------------锁相环频率为50/15*54=180M测试函数-------------------------------//

   \                                 In section .text, align 2, keep-with-next
    365          void pllinit180M(void)
    366          {
    367          	uint32_t temp_reg;
    368                  //使能IO端口时钟    
    369              SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK
    370                                        | SIM_SCGC5_PORTB_MASK
    371                                        | SIM_SCGC5_PORTC_MASK
    372                                        | SIM_SCGC5_PORTD_MASK
    373                                        | SIM_SCGC5_PORTE_MASK );
   \                     pllinit180M:
   \   00000000   0x....             LDR.N    R0,??DataTable5_6  ;; 0x40048038
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x5078      ORRS     R0,R0,#0x3E00
   \   00000008   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40048038
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    374              //这里处在默认的FEI模式
    375              //首先移动到FBE模式
    376              MCG_C2 = 0;  
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable6_42  ;; 0x40064001
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x7001             STRB     R1,[R0, #+0]
    377              //MCG_C2 = MCG_C2_RANGE(2) | MCG_C2_HGO_MASK | MCG_C2_EREFS_MASK;
    378              //初始化晶振后释放锁定状态的振荡器和GPIO
    379              SIM_SCGC4 |= SIM_SCGC4_LLWU_MASK;
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable6_8  ;; 0x40048034
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable6_8  ;; 0x40048034
   \   00000022   0x6008             STR      R0,[R1, #+0]
    380              LLWU_CS |= LLWU_CS_ACKISO_MASK;
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable6_43  ;; 0x4007c008
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable6_43  ;; 0x4007c008
   \   00000032   0x7008             STRB     R0,[R1, #+0]
    381              
    382              //选择外部晶振，参考分频器，清IREFS来启动外部晶振
    383              //011 If RANGE = 0, Divide Factor is 8; for all other RANGE values, Divide Factor is 256.
    384              MCG_C1 = MCG_C1_CLKS(2) | MCG_C1_FRDIV(3);
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable6_44  ;; 0x40064000
   \   00000038   0x2198             MOVS     R1,#+152
   \   0000003A   0x7001             STRB     R1,[R0, #+0]
    385              
    386              //等待晶振稳定	    
    387              //while (!(MCG_S & MCG_S_OSCINIT_MASK)){}              //等待锁相环初始化结束
    388              while (MCG_S & MCG_S_IREFST_MASK){}                  //等待时钟切换到外部参考时钟
   \                     ??pllinit180M_0:
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable6_45  ;; 0x40064006
   \   00000040   0x7800             LDRB     R0,[R0, #+0]
   \   00000042   0x06C0             LSLS     R0,R0,#+27
   \   00000044   0xD4FA             BMI.N    ??pllinit180M_0
    389              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2){}
   \                     ??pllinit180M_1:
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable6_45  ;; 0x40064006
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   00000050   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000052   0x2802             CMP      R0,#+2
   \   00000054   0xD1F7             BNE.N    ??pllinit180M_1
    390              
    391              //进入FBE模式,
    392              //0x18==25分频=2M,
    393              //0x08==15分频=3.333M 
    394              //0x09==16分频=3.125M,
    395              //0x10==17分频=2.94M 
    396              //0x11==18分频=2.7778M 
    397              //0x12==19分频=2.63M,
    398              //0x13==20分频=2.5M    
    399              MCG_C5 = MCG_C5_PRDIV(0x0e);                
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable6_46  ;; 0x40064004
   \   0000005A   0x210E             MOVS     R1,#+14
   \   0000005C   0x7001             STRB     R1,[R0, #+0]
    400              
    401              //确保MCG_C6处于复位状态，禁止LOLIE、PLL、和时钟控制器，清PLL VCO分频器
    402              MCG_C6 = 0x0;
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable6_47  ;; 0x40064005
   \   00000062   0x2100             MOVS     R1,#+0
   \   00000064   0x7001             STRB     R1,[R0, #+0]
    403              
    404              //保存FMC_PFAPR当前的值
    405              temp_reg = FMC_PFAPR;
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable6_48  ;; 0x4001f000
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
    406              
    407              //通过M&PFD置位M0PFD来禁止预取功能
    408              FMC_PFAPR |= FMC_PFAPR_M7PFD_MASK | FMC_PFAPR_M6PFD_MASK | FMC_PFAPR_M5PFD_MASK
    409                               | FMC_PFAPR_M4PFD_MASK | FMC_PFAPR_M3PFD_MASK | FMC_PFAPR_M2PFD_MASK
    410                               | FMC_PFAPR_M1PFD_MASK | FMC_PFAPR_M0PFD_MASK;    
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable6_48  ;; 0x4001f000
   \   00000070   0x6809             LDR      R1,[R1, #+0]
   \   00000072   0xF451 0x017F      ORRS     R1,R1,#0xFF0000
   \   00000076   0x.... 0x....      LDR.W    R2,??DataTable6_48  ;; 0x4001f000
   \   0000007A   0x6011             STR      R1,[R2, #+0]
    411              ///设置系统分频器
    412              //MCG=PLL, core = MCG, bus = MCG/3, FlexBus = MCG/3, Flash clock= MCG/8
    413              SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) 
    414                           | SIM_CLKDIV1_OUTDIV3(2) | SIM_CLKDIV1_OUTDIV4(7);       
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable6_49  ;; 0x40048044
   \   00000080   0x.... 0x....      LDR.W    R2,??DataTable6_50  ;; 0x2270000
   \   00000084   0x600A             STR      R2,[R1, #+0]
    415              
    416              //从新存FMC_PFAPR的原始值
    417              FMC_PFAPR = temp_reg; 
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable6_48  ;; 0x4001f000
   \   0000008A   0x6008             STR      R0,[R1, #+0]
    418              
    419              //设置VCO分频器，使能PLL为100MHz, LOLIE=0, PLLS=1, CME=0, VDIV=26
    420              MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(30);  //VDIV = 31 (x54)
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable6_47  ;; 0x40064005
   \   00000090   0x215E             MOVS     R1,#+94
   \   00000092   0x7001             STRB     R1,[R0, #+0]
    421                                                            //VDIV = 26 (x50)
    422              while (!(MCG_S & MCG_S_PLLST_MASK)){}; // wait for PLL status bit to set    
   \                     ??pllinit180M_2:
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable6_45  ;; 0x40064006
   \   00000098   0x7800             LDRB     R0,[R0, #+0]
   \   0000009A   0x0680             LSLS     R0,R0,#+26
   \   0000009C   0xD5FA             BPL.N    ??pllinit180M_2
    423              while (!(MCG_S & MCG_S_LOCK_MASK)){}; // Wait for LOCK bit to set    
   \                     ??pllinit180M_3:
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable6_45  ;; 0x40064006
   \   000000A2   0x7800             LDRB     R0,[R0, #+0]
   \   000000A4   0x0640             LSLS     R0,R0,#+25
   \   000000A6   0xD5FA             BPL.N    ??pllinit180M_3
    424              
    425              //进入PBE模式    
    426              //通过清零CLKS位来进入PEE模式
    427              // CLKS=0, FRDIV=3, IREFS=0, IRCLKEN=0, IREFSTEN=0
    428              MCG_C1 &= ~MCG_C1_CLKS_MASK;
   \   000000A8   0x.... 0x....      LDR.W    R0,??DataTable6_44  ;; 0x40064000
   \   000000AC   0x7800             LDRB     R0,[R0, #+0]
   \   000000AE   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   000000B2   0x.... 0x....      LDR.W    R1,??DataTable6_44  ;; 0x40064000
   \   000000B6   0x7008             STRB     R0,[R1, #+0]
    429              
    430              //等待时钟状态位更新
    431              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3){};
   \                     ??pllinit180M_4:
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable6_45  ;; 0x40064006
   \   000000BC   0x7800             LDRB     R0,[R0, #+0]
   \   000000BE   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   000000C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C4   0x2803             CMP      R0,#+3
   \   000000C6   0xD1F7             BNE.N    ??pllinit180M_4
    432              //SIM_CLKDIV2 |= SIM_CLKDIV2_USBDIV(1);  
    433              
    434              //设置跟踪时钟为内核时钟
    435              SIM_SOPT2 |= SIM_SOPT2_TRACECLKSEL_MASK;	
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable6_51  ;; 0x40048004
   \   000000CC   0x6800             LDR      R0,[R0, #+0]
   \   000000CE   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   000000D2   0x.... 0x....      LDR.W    R1,??DataTable6_51  ;; 0x40048004
   \   000000D6   0x6008             STR      R0,[R1, #+0]
    436              //在PTA6引脚上使能TRACE_CLKOU功能
    437              PORTA_PCR6 = ( PORT_PCR_MUX(0x7));  
   \   000000D8   0x.... 0x....      LDR.W    R0,??DataTable6_52  ;; 0x40049018
   \   000000DC   0xF44F 0x61E0      MOV      R1,#+1792
   \   000000E0   0x6001             STR      R1,[R0, #+0]
    438              //使能FlexBus模块时钟
    439              SIM_SCGC7 |= SIM_SCGC7_FLEXBUS_MASK;
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable6_53  ;; 0x40048040
   \   000000E6   0x6800             LDR      R0,[R0, #+0]
   \   000000E8   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000EC   0x.... 0x....      LDR.W    R1,??DataTable6_53  ;; 0x40048040
   \   000000F0   0x6008             STR      R0,[R1, #+0]
    440              //在PTA6引脚上使能FB_CLKOUT功能
    441              PORTC_PCR3 = ( PORT_PCR_MUX(0x5));
   \   000000F2   0x.... 0x....      LDR.W    R0,??DataTable6_3  ;; 0x4004b00c
   \   000000F6   0xF44F 0x61A0      MOV      R1,#+1280
   \   000000FA   0x6001             STR      R1,[R0, #+0]
    442          }
   \   000000FC   0x4770             BX       LR               ;; return
    443          
    444          

   \                                 In section .text, align 2, keep-with-next
    445          int16 f_abs16(int16 x)
    446          {
    447            if(x>0) return x;
   \                     f_abs16:
   \   00000000   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000002   0x2801             CMP      R0,#+1
   \   00000004   0xDB01             BLT.N    ??f_abs16_0
   \   00000006   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000008   0xE002             B.N      ??f_abs16_1
    448            else return -x;
   \                     ??f_abs16_0:
   \   0000000A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000000C   0x4240             RSBS     R0,R0,#+0
   \   0000000E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \                     ??f_abs16_1:
   \   00000010   0x4770             BX       LR               ;; return
    449          }
    450          

   \                                 In section .text, align 2, keep-with-next
    451          float f_absf(float x)
    452          {
   \                     f_absf:
   \   00000000   0xB500             PUSH     {LR}
    453              if(x>=0.0) return x;
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000008   0xD901             BLS.N    ??f_absf_0
    454              else  return -x;
   \                     ??f_absf_1:
   \   0000000A   0xF090 0x4000      EORS     R0,R0,#0x80000000
   \                     ??f_absf_0:
   \   0000000E   0xBD00             POP      {PC}             ;; return
    455          }
    456          

   \                                 In section .text, align 2, keep-with-next
    457          int MIN_INT( int a, int b)
    458          {
    459              if(a>b) return b;
   \                     MIN_INT:
   \   00000000   0x4281             CMP      R1,R0
   \   00000002   0xDA01             BGE.N    ??MIN_INT_0
   \   00000004   0x0008             MOVS     R0,R1
   \   00000006   0xE7FF             B.N      ??MIN_INT_1
    460              else  return a;
   \                     ??MIN_INT_0:
   \                     ??MIN_INT_1:
   \   00000008   0x4770             BX       LR               ;; return
    461          }
    462          
    463          //-----------------------------------扫描白线基准线---------------------------------//
    464          /*
    465          1、由于赛道的宽度在图像中所占的比例较大，故可认为在中点的位置（79处）就一定是在赛道中，
    466          ，除非车子跑出了赛道，而不需要考虑中心偏离赛道的情况。
    467          */

   \                                 In section .text, align 2, keep-with-next
    468          void Search_WhiteBase(void)   //从图像底部中间开始向两边扫描白线基准
    469          { 
   \                     Search_WhiteBase:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    470            uint8 i = 0,j = 0 ;//定义十六位的有符号变量   i代表行变量  j代表列变量
   \   00000002   0x2500             MOVS     R5,#+0
   \   00000004   0x2400             MOVS     R4,#+0
    471            uint8 base_sum = 0; 
   \   00000006   0x2600             MOVS     R6,#+0
    472            current_deal_line=0;                //记录在搜索基准行的时候的当前处理的行 
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable6_54
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x7001             STRB     R1,[R0, #+0]
    473            bottom_whitebase = 0;//基准行赋初值  int
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable6_55
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x7001             STRB     R1,[R0, #+0]
    474            find_whitebase_flag = 0;               //是否发现白线基准标志
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable6_56
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x7001             STRB     R1,[R0, #+0]
    475          
    476            //////////////////////////////滤波开始///////////////////////////////////  
    477          //首先对整幅图像进行滤波，采用的方法是中值滤波
    478            for(i = 0;i < ROW / 5;i++)                 //只是对图像前几行进行滤波，原因是远处的滤波可能会把跑道的信息滤除掉这里对赛道的前13行滤波
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x0005             MOVS     R5,R0
   \   00000024   0xE037             B.N      ??Search_WhiteBase_0
    479              for(j = 1;j< COLUMN-1;j++)
    480              {
    481                  base_sum = (VideoImage1[i][j-1] + VideoImage1[i][j+1])/ 2;
   \                     ??Search_WhiteBase_1:
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   0x209F             MOVS     R0,#+159
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable6_57
   \   00000030   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   00000034   0x1820             ADDS     R0,R4,R0
   \   00000036   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003E   0x219F             MOVS     R1,#+159
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable6_57
   \   00000044   0xFB01 0x2105      MLA      R1,R1,R5,R2
   \   00000048   0x1861             ADDS     R1,R4,R1
   \   0000004A   0x7849             LDRB     R1,[R1, #+1]
   \   0000004C   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   00000050   0x2102             MOVS     R1,#+2
   \   00000052   0xFB90 0xF6F1      SDIV     R6,R0,R1
    482                  if( f_abs16( base_sum - VideoImage1[i][j]) > OT)
   \   00000056   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000058   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005C   0x209F             MOVS     R0,#+159
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable6_57
   \   00000062   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   00000066   0x5C20             LDRB     R0,[R4, R0]
   \   00000068   0x1A30             SUBS     R0,R6,R0
   \   0000006A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000006C   0x.... 0x....      BL       f_abs16
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable6_58
   \   00000074   0x7809             LDRB     R1,[R1, #+0]
   \   00000076   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000078   0x4281             CMP      R1,R0
   \   0000007A   0xDA07             BGE.N    ??Search_WhiteBase_2
    483                     VideoImage1[i][j] = base_sum;
   \   0000007C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000080   0x209F             MOVS     R0,#+159
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable6_57
   \   00000086   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   0000008A   0x5426             STRB     R6,[R4, R0]
    484              }  //滤波可能带来一个后果，就是可能把远处的边沿线滤除掉，这里只是对近端进行滤波
   \                     ??Search_WhiteBase_2:
   \   0000008C   0x1C64             ADDS     R4,R4,#+1
   \                     ??Search_WhiteBase_3:
   \   0000008E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000090   0x2C9E             CMP      R4,#+158
   \   00000092   0xD3C8             BCC.N    ??Search_WhiteBase_1
   \   00000094   0x1C6D             ADDS     R5,R5,#+1
   \                     ??Search_WhiteBase_0:
   \   00000096   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000098   0x2D0D             CMP      R5,#+13
   \   0000009A   0xD201             BCS.N    ??Search_WhiteBase_4
   \   0000009C   0x2401             MOVS     R4,#+1
   \   0000009E   0xE7F6             B.N      ??Search_WhiteBase_3
    485            
    486            
    487            /*////////////////////////对图像上的噪点进行滤除//////////////   限幅滤波会带来一个后果，导致跳变沿检测出现问题，跳变太小
    488            for(i = 0;i < ROW ;i++)                 //图像上突然的出现了很多的噪点，这个程序是为了将图像上的这些噪点滤除。经过验证效果很好
    489              for(j = 0;j< COLUMN;j++)
    490              {
    491                if(VideoImage1[i][j] >245 || VideoImage1[i][j]<10)
    492                {
    493                  if( j>0 && j < COLUMN - 1)
    494                  {
    495                    VideoImage1[i][j] = (VideoImage1[i][j+1] + VideoImage1[i][j-1])/2;
    496                  }
    497                  else
    498                  {
    499                    if( i>0 && i < ROW - 1)
    500                    VideoImage1[i][j] =  (VideoImage1[i+1][j] +  VideoImage1[i-1][j])/2;
    501                  }
    502                }
    503              }
    504          *////////////////////////////滤波结束////////////////////////////////
    505            
    506            /*对于搜索基准行最重要的就是解决搜索的开始点的问题，这个点找到了，其他的问题就好解决了*/
    507            if(VideoImage1[0][re_white_refer] > BASE_OT && VideoImage1[0][re_white_refer-1] >BASE_OT && VideoImage1[0][re_white_refer+1]>BASE_OT)
   \                     ??Search_WhiteBase_4:
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable6_59
   \   000000A4   0x7800             LDRB     R0,[R0, #+0]
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable6_60
   \   000000AA   0x7809             LDRB     R1,[R1, #+0]
   \   000000AC   0x.... 0x....      LDR.W    R2,??DataTable6_57
   \   000000B0   0x5C89             LDRB     R1,[R1, R2]
   \   000000B2   0x4288             CMP      R0,R1
   \   000000B4   0xD21F             BCS.N    ??Search_WhiteBase_5
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable6_59
   \   000000BA   0x7800             LDRB     R0,[R0, #+0]
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable6_60
   \   000000C0   0x7809             LDRB     R1,[R1, #+0]
   \   000000C2   0x.... 0x....      LDR.W    R2,??DataTable6_57
   \   000000C6   0x1889             ADDS     R1,R1,R2
   \   000000C8   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000000CC   0x4288             CMP      R0,R1
   \   000000CE   0xD212             BCS.N    ??Search_WhiteBase_5
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable6_59
   \   000000D4   0x7800             LDRB     R0,[R0, #+0]
   \   000000D6   0x.... 0x....      LDR.W    R1,??DataTable6_60
   \   000000DA   0x7809             LDRB     R1,[R1, #+0]
   \   000000DC   0x.... 0x....      LDR.W    R2,??DataTable6_57
   \   000000E0   0x1889             ADDS     R1,R1,R2
   \   000000E2   0x7849             LDRB     R1,[R1, #+1]
   \   000000E4   0x4288             CMP      R0,R1
   \   000000E6   0xD206             BCS.N    ??Search_WhiteBase_5
    508            {
    509              whitebase_searchstart = re_white_refer;
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable6_61
   \   000000EC   0x.... 0x....      LDR.W    R1,??DataTable6_60
   \   000000F0   0x7809             LDRB     R1,[R1, #+0]
   \   000000F2   0x7001             STRB     R1,[R0, #+0]
   \   000000F4   0xE0BB             B.N      ??Search_WhiteBase_6
    510            }
    511            else
    512            {
    513              j = MID-1;//从MID开始搜索基准行的开始点
   \                     ??Search_WhiteBase_5:
   \   000000F6   0x244E             MOVS     R4,#+78
    514              left_whitebase_searchstart = MID-1;
   \   000000F8   0x.... 0x....      LDR.W    R0,??DataTable6_62
   \   000000FC   0x214E             MOVS     R1,#+78
   \   000000FE   0x7001             STRB     R1,[R0, #+0]
   \   00000100   0xE000             B.N      ??Search_WhiteBase_7
    515              while(j > 10)
    516              {
    517                if(VideoImage1[0][j] > BASE_OT && VideoImage1[0][j-1] > BASE_OT &&VideoImage1[0][j-2]>BASE_OT
    518                   &&VideoImage1[0][j-3] >BASE_OT &&VideoImage1[0][j-4]>BASE_OT)
    519                {
    520                  left_whitebase_searchstart = j;
    521                  break;
    522                }
    523                j--;
   \                     ??Search_WhiteBase_8:
   \   00000102   0x1E64             SUBS     R4,R4,#+1
   \                     ??Search_WhiteBase_7:
   \   00000104   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000106   0x2C0B             CMP      R4,#+11
   \   00000108   0xD337             BCC.N    ??Search_WhiteBase_9
   \   0000010A   0x.... 0x....      LDR.W    R0,??DataTable6_59
   \   0000010E   0x7800             LDRB     R0,[R0, #+0]
   \   00000110   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000112   0x.... 0x....      LDR.W    R1,??DataTable6_57
   \   00000116   0x5C61             LDRB     R1,[R4, R1]
   \   00000118   0x4288             CMP      R0,R1
   \   0000011A   0xD2F2             BCS.N    ??Search_WhiteBase_8
   \   0000011C   0x.... 0x....      LDR.W    R0,??DataTable6_59
   \   00000120   0x7800             LDRB     R0,[R0, #+0]
   \   00000122   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000124   0x.... 0x....      LDR.W    R1,??DataTable6_57
   \   00000128   0x1861             ADDS     R1,R4,R1
   \   0000012A   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   0000012E   0x4288             CMP      R0,R1
   \   00000130   0xD2E7             BCS.N    ??Search_WhiteBase_8
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable6_59
   \   00000136   0x7800             LDRB     R0,[R0, #+0]
   \   00000138   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000013A   0x.... 0x....      LDR.W    R1,??DataTable6_57
   \   0000013E   0x1861             ADDS     R1,R4,R1
   \   00000140   0xF811 0x1C02      LDRB     R1,[R1, #-2]
   \   00000144   0x4288             CMP      R0,R1
   \   00000146   0xD2DC             BCS.N    ??Search_WhiteBase_8
   \   00000148   0x.... 0x....      LDR.W    R0,??DataTable6_59
   \   0000014C   0x7800             LDRB     R0,[R0, #+0]
   \   0000014E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000150   0x.... 0x....      LDR.W    R1,??DataTable6_57
   \   00000154   0x1861             ADDS     R1,R4,R1
   \   00000156   0xF811 0x1C03      LDRB     R1,[R1, #-3]
   \   0000015A   0x4288             CMP      R0,R1
   \   0000015C   0xD2D1             BCS.N    ??Search_WhiteBase_8
   \   0000015E   0x.... 0x....      LDR.W    R0,??DataTable6_59
   \   00000162   0x7800             LDRB     R0,[R0, #+0]
   \   00000164   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000166   0x.... 0x....      LDR.W    R1,??DataTable6_57
   \   0000016A   0x1861             ADDS     R1,R4,R1
   \   0000016C   0xF811 0x1C04      LDRB     R1,[R1, #-4]
   \   00000170   0x4288             CMP      R0,R1
   \   00000172   0xD2C6             BCS.N    ??Search_WhiteBase_8
   \   00000174   0x.... 0x....      LDR.W    R0,??DataTable6_62
   \   00000178   0x7004             STRB     R4,[R0, #+0]
    524              }
    525              
    526              j = MID+1; 
   \                     ??Search_WhiteBase_9:
   \   0000017A   0x2450             MOVS     R4,#+80
    527              right_whitebase_searchstart = MID+1;
   \   0000017C   0x.... 0x....      LDR.W    R0,??DataTable6_63
   \   00000180   0x2150             MOVS     R1,#+80
   \   00000182   0x7001             STRB     R1,[R0, #+0]
   \   00000184   0xE000             B.N      ??Search_WhiteBase_10
    528              while(j < 150)
    529              {
    530                 if(VideoImage1[0][j] > BASE_OT && VideoImage1[0][j+1] > BASE_OT && VideoImage1[0][j+2]>BASE_OT
    531                   && VideoImage1[0][j+3] > BASE_OT &&VideoImage1[0][j+4] > BASE_OT)
    532                {
    533                  right_whitebase_searchstart = j;
    534                  break;
    535                }
    536                j++;
   \                     ??Search_WhiteBase_11:
   \   00000186   0x1C64             ADDS     R4,R4,#+1
   \                     ??Search_WhiteBase_10:
   \   00000188   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000018A   0x2C96             CMP      R4,#+150
   \   0000018C   0xD233             BCS.N    ??Search_WhiteBase_12
   \   0000018E   0x.... 0x....      LDR.W    R0,??DataTable6_59
   \   00000192   0x7800             LDRB     R0,[R0, #+0]
   \   00000194   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000196   0x.... 0x....      LDR.W    R1,??DataTable6_57
   \   0000019A   0x5C61             LDRB     R1,[R4, R1]
   \   0000019C   0x4288             CMP      R0,R1
   \   0000019E   0xD2F2             BCS.N    ??Search_WhiteBase_11
   \   000001A0   0x.... 0x....      LDR.W    R0,??DataTable6_59
   \   000001A4   0x7800             LDRB     R0,[R0, #+0]
   \   000001A6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001A8   0x.... 0x....      LDR.W    R1,??DataTable6_57
   \   000001AC   0x1861             ADDS     R1,R4,R1
   \   000001AE   0x7849             LDRB     R1,[R1, #+1]
   \   000001B0   0x4288             CMP      R0,R1
   \   000001B2   0xD2E8             BCS.N    ??Search_WhiteBase_11
   \   000001B4   0x.... 0x....      LDR.W    R0,??DataTable6_59
   \   000001B8   0x7800             LDRB     R0,[R0, #+0]
   \   000001BA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001BC   0x.... 0x....      LDR.W    R1,??DataTable6_57
   \   000001C0   0x1861             ADDS     R1,R4,R1
   \   000001C2   0x7889             LDRB     R1,[R1, #+2]
   \   000001C4   0x4288             CMP      R0,R1
   \   000001C6   0xD2DE             BCS.N    ??Search_WhiteBase_11
   \   000001C8   0x.... 0x....      LDR.W    R0,??DataTable6_59
   \   000001CC   0x7800             LDRB     R0,[R0, #+0]
   \   000001CE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001D0   0x.... 0x....      LDR.W    R1,??DataTable6_57
   \   000001D4   0x1861             ADDS     R1,R4,R1
   \   000001D6   0x78C9             LDRB     R1,[R1, #+3]
   \   000001D8   0x4288             CMP      R0,R1
   \   000001DA   0xD2D4             BCS.N    ??Search_WhiteBase_11
   \   000001DC   0x.... 0x....      LDR.W    R0,??DataTable6_59
   \   000001E0   0x7800             LDRB     R0,[R0, #+0]
   \   000001E2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001E4   0x.... 0x....      LDR.W    R1,??DataTable6_57
   \   000001E8   0x1861             ADDS     R1,R4,R1
   \   000001EA   0x7909             LDRB     R1,[R1, #+4]
   \   000001EC   0x4288             CMP      R0,R1
   \   000001EE   0xD2CA             BCS.N    ??Search_WhiteBase_11
   \   000001F0   0x.... 0x....      LDR.W    R0,??DataTable6_63
   \   000001F4   0x7004             STRB     R4,[R0, #+0]
    537              }
    538              
    539              if(right_whitebase_searchstart-MID > MID-left_whitebase_searchstart)
   \                     ??Search_WhiteBase_12:
   \   000001F6   0x.... 0x....      LDR.W    R0,??DataTable6_62
   \   000001FA   0x7800             LDRB     R0,[R0, #+0]
   \   000001FC   0xF1D0 0x004F      RSBS     R0,R0,#+79
   \   00000200   0x.... 0x....      LDR.W    R1,??DataTable6_63
   \   00000204   0x7809             LDRB     R1,[R1, #+0]
   \   00000206   0x394F             SUBS     R1,R1,#+79
   \   00000208   0x4288             CMP      R0,R1
   \   0000020A   0xDA06             BGE.N    ??Search_WhiteBase_13
    540              {
    541                whitebase_searchstart  = left_whitebase_searchstart;
   \   0000020C   0x.... 0x....      LDR.W    R0,??DataTable6_61
   \   00000210   0x.... 0x....      LDR.W    R1,??DataTable6_62
   \   00000214   0x7809             LDRB     R1,[R1, #+0]
   \   00000216   0x7001             STRB     R1,[R0, #+0]
   \   00000218   0xE029             B.N      ??Search_WhiteBase_6
    542              }
    543                
    544              else
    545              {
    546                whitebase_searchstart = right_whitebase_searchstart;
   \                     ??Search_WhiteBase_13:
   \   0000021A   0x.... 0x....      LDR.W    R0,??DataTable6_61
   \   0000021E   0x.... 0x....      LDR.W    R1,??DataTable6_63
   \   00000222   0x7809             LDRB     R1,[R1, #+0]
   \   00000224   0x7001             STRB     R1,[R0, #+0]
   \   00000226   0xE022             B.N      ??Search_WhiteBase_6
    547              }
    548            } 
    549            
    550            
    551            
    552            while( find_whitebase_flag ==0 && current_deal_line < ROW - 1) //基准行的搜索范围从0到ROW-1 
    553            {
    554                //每行的处理清零
    555                whitepoint_start = whitebase_searchstart;   //uint8 
    556                //搜索左边的基准边沿/////////////////////////////
    557                 j = whitebase_searchstart;   //有的时候出现前一行的中点在下一行的图像的外面
    558                 //每次从上一场的基准的中点开始向两边搜索基准行
    559                 while(j >= 3  )//一般为了使得跳变沿更加的明显，采用隔点判断
    560                {
    561                  
    562                    if( whitepoint_start != whitebase_searchstart && f_abs16(j-re_whitepoint_start) > f_abs16(whitepoint_start -re_whitepoint_start) )
    563                    {
    564                      break;
    565                    }
    566                    else if(VideoImage1[current_deal_line][j] - VideoImage1[current_deal_line][j-2] > OT 
    567                       && VideoImage1[current_deal_line][j] - VideoImage1[current_deal_line][j-3] > OT
    568                         )
    569                    {//当第一个if不满足的时候说明此时的j到上一场的点的距离一定小于 f_abs16(whitepoint_start -re_whitepoint_start) 
    570                      //所以这里只要遇到了跳变，就给基准行的起始点赋值
    571                         whitepoint_start = j;
    572                    }
    573                    j--;
    574                }
    575                
    576                if( j == 2  && whitepoint_start == whitebase_searchstart)  //到达边界了，但是还没有对whitepoint_start赋值过，说明没有找到基准的开始点
    577                {
    578                  if(VideoImage1[current_deal_line][j] - VideoImage1[current_deal_line][j-2] > OT)
    579                  {
    580                     whitepoint_start = 2; //到达了边界
    581                  }
    582                  else if( VideoImage1[current_deal_line][j-1] - VideoImage1[current_deal_line][j-2] > OT)
    583                  {
    584                     whitepoint_start = 1; //到达了边界
    585                  }
    586                  else
    587                  { 
    588                     whitepoint_start = 0;
    589                  }
    590                }
    591                //左边搜索结束///////////////////////
    592                
    593                //右边搜索开始/////////////////////
    594                whitepoint_end = whitebase_searchstart;    //uint8
    595                j = whitebase_searchstart;   //每次从上一场的white_refer向两边搜索基准行
    596                while( j <= COLUMN-4 )//一般为了使得跳变沿更加的明显，采用隔点判断
    597                {
    598                 
    599                    if( whitepoint_end != whitebase_searchstart && f_abs16(j-re_whitepoint_end) > f_abs16(whitepoint_end -re_whitepoint_end) )
    600                    {
    601                       break;
    602                    }
    603                    else if(VideoImage1[current_deal_line][j] - VideoImage1[current_deal_line][j+2] > OT
    604                       && VideoImage1[current_deal_line][j] - VideoImage1[current_deal_line][j+3] > OT)
    605                    {
    606                       whitepoint_end = j;
    607                    } 
    608                    j++;
    609                } 
    610                
    611                if(j == COLUMN-3  &&   whitepoint_end == whitebase_searchstart)
    612                {
    613                   if( VideoImage1[current_deal_line][j] - VideoImage1[current_deal_line][j+2] > OT)
    614                   {
    615                     whitepoint_end = COLUMN-3;
    616                   }
    617                   else if( VideoImage1[current_deal_line][j+1] - VideoImage1[current_deal_line][j+2] > OT)
    618                   {
    619                     whitepoint_end = COLUMN-2;
    620                   }
    621                   else
    622                   {
    623                     whitepoint_end = COLUMN-1;
    624                   }
    625                }
    626                //右边搜索结束///////////////////////
    627                //左右边沿线的搜索方法用的是跟踪的搜索方法，目的是只想找到一行可靠的基准行的信息
    628                
    629                
    630                //无论这一行是否符合要求，始终记录赛道信息
    631          
    632                  left_black[current_deal_line] = whitepoint_start;   //记录左黑线位置 (若为0，很可能说明左边黑线丢失，即车身偏右)
    633                  right_black[current_deal_line] = whitepoint_end;    //记录右黑线位置(若为COLUMN，很可能说明右边黑线丢失,即车身偏左)
    634                  /*对于第一行的状态的判断有两种想法，第一：无论第一行是什么状态始终认为没有丢点 第二：将到达边沿的点视为丢点
    635                  此外这里需要对上面的三个值进行一定的修正，并且在这里将基准行上的状态设定为没有丢点（即使有时候到达了边界）。
    636                  （否则，这里的跟踪搜索的优势就没有了）
    637                  */
    638                  if(left_black[current_deal_line] == 0 && right_black[current_deal_line] < COLUMN - 1 &&  (right_black[current_deal_line] - left_black[current_deal_line]) > 155)
    639                  {  //表示左边到达边界 丢点
    640                    
    641                    left_black[current_deal_line] = re_whitepoint_start;
    642                    center_white[current_deal_line] = (left_black[current_deal_line] +  right_black[current_deal_line]) / 2; 
    643                  }
    644                  else if(right_black[current_deal_line] == COLUMN - 1 && left_black[current_deal_line] > 0 &&  (right_black[current_deal_line] - left_black[current_deal_line]) > 155)
    645                  { //表示右边到达边界 丢点
    646                     right_black[current_deal_line] = re_whitepoint_end;
    647                   center_white[current_deal_line] = (left_black[current_deal_line] +  right_black[current_deal_line]) / 2;  //记录中心点,大于MID说明车身偏左，反之，说明车身偏右
    648                  }
    649                  else if(right_black[current_deal_line] == COLUMN - 1 && left_black[current_deal_line] == 0 )
    650                  {//表示两边到达边界 丢点
    651                    left_black[current_deal_line] = re_whitepoint_start;
    652                    right_black[current_deal_line] = re_whitepoint_end;
    653                    center_white[current_deal_line] = re_white_refer;
    654                  }
    655                  //说明由于前三行的信息一般不做处理默认为左右边沿都找到了的点 
    656                  else
    657                  {  //表示两边都没有丢点
    658                    center_white[current_deal_line] = (left_black[current_deal_line] +  right_black[current_deal_line]) / 2;  //记录中心点,大于MID说明车身偏左，反之，说明车身偏右
    659                  }
    660                  //处理后重新得到图像搜索的开始结束及中心值
    661                whitepoint_start = left_black[current_deal_line];
    662                whitepoint_end =  right_black[current_deal_line];
    663                white_refer = center_white[current_deal_line];
    664                
    665                  //加上一个赛道的宽度的限制
    666                 if(whitepoint_end - whitepoint_start > MIN_WHITEBASE_POINT ) //这个值设置为20 
    667                  {
    668                    find_whitebase_flag = 1;
   \                     ??Search_WhiteBase_14:
   \   00000228   0x.... 0x....      LDR.W    R0,??DataTable6_56
   \   0000022C   0x2101             MOVS     R1,#+1
   \   0000022E   0x7001             STRB     R1,[R0, #+0]
    669                    re_white_refer = white_refer;  //保存本场图像的信息
   \   00000230   0x.... 0x....      LDR.W    R0,??DataTable6_60
   \   00000234   0x.... 0x....      LDR.W    R1,??DataTable6_64
   \   00000238   0x7809             LDRB     R1,[R1, #+0]
   \   0000023A   0x7001             STRB     R1,[R0, #+0]
    670                    re_whitepoint_start = whitepoint_start;
   \   0000023C   0x.... 0x....      LDR.W    R0,??DataTable6_65
   \   00000240   0x.... 0x....      LDR.W    R1,??DataTable6_66
   \   00000244   0x7809             LDRB     R1,[R1, #+0]
   \   00000246   0x7001             STRB     R1,[R0, #+0]
    671                    re_whitepoint_end  = whitepoint_end ;
   \   00000248   0x.... 0x....      LDR.W    R0,??DataTable6_67
   \   0000024C   0x.... 0x....      LDR.W    R1,??DataTable6_68
   \   00000250   0x7809             LDRB     R1,[R1, #+0]
   \   00000252   0x7001             STRB     R1,[R0, #+0]
    672                    bottom_whitebase = current_deal_line;//记录基准行
   \   00000254   0x.... 0x....      LDR.W    R0,??DataTable6_55
   \   00000258   0x.... 0x....      LDR.W    R1,??DataTable6_54
   \   0000025C   0x7809             LDRB     R1,[R1, #+0]
   \   0000025E   0x7001             STRB     R1,[R0, #+0]
    673                    Row_state[bottom_whitebase] = 3; //行的状态标志位
   \   00000260   0x.... 0x....      LDR.W    R0,??DataTable6_55
   \   00000264   0x7800             LDRB     R0,[R0, #+0]
   \   00000266   0x.... 0x....      LDR.W    R1,??DataTable6_69
   \   0000026A   0x2203             MOVS     R2,#+3
   \   0000026C   0x5442             STRB     R2,[R0, R1]
    674                  }
   \                     ??Search_WhiteBase_6:
   \   0000026E   0x.... 0x....      LDR.W    R0,??DataTable6_56
   \   00000272   0x7800             LDRB     R0,[R0, #+0]
   \   00000274   0x2800             CMP      R0,#+0
   \   00000276   0xF040 0x8222      BNE.W    ??Search_WhiteBase_15
   \   0000027A   0x.... 0x....      LDR.W    R0,??DataTable6_54
   \   0000027E   0x7800             LDRB     R0,[R0, #+0]
   \   00000280   0x2840             CMP      R0,#+64
   \   00000282   0xF080 0x821C      BCS.W    ??Search_WhiteBase_15
   \   00000286   0x.... 0x....      LDR.W    R0,??DataTable6_66
   \   0000028A   0x.... 0x....      LDR.W    R1,??DataTable6_61
   \   0000028E   0x7809             LDRB     R1,[R1, #+0]
   \   00000290   0x7001             STRB     R1,[R0, #+0]
   \   00000292   0x.... 0x....      LDR.W    R0,??DataTable6_61
   \   00000296   0x7804             LDRB     R4,[R0, #+0]
   \   00000298   0xE03B             B.N      ??Search_WhiteBase_16
   \                     ??Search_WhiteBase_17:
   \   0000029A   0x.... 0x....      LDR.W    R0,??DataTable6_58
   \   0000029E   0x7800             LDRB     R0,[R0, #+0]
   \   000002A0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002A2   0x.... 0x....      LDR.W    R1,??DataTable6_54
   \   000002A6   0x7809             LDRB     R1,[R1, #+0]
   \   000002A8   0x229F             MOVS     R2,#+159
   \   000002AA   0x.... 0x....      LDR.W    R3,??DataTable6_57
   \   000002AE   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   000002B2   0x5C61             LDRB     R1,[R4, R1]
   \   000002B4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002B6   0x.... 0x....      LDR.W    R2,??DataTable6_54
   \   000002BA   0x7812             LDRB     R2,[R2, #+0]
   \   000002BC   0x239F             MOVS     R3,#+159
   \   000002BE   0x.... 0x....      LDR.W    R5,??DataTable6_57
   \   000002C2   0xFB03 0x5202      MLA      R2,R3,R2,R5
   \   000002C6   0x18A2             ADDS     R2,R4,R2
   \   000002C8   0xF812 0x2C02      LDRB     R2,[R2, #-2]
   \   000002CC   0x1A89             SUBS     R1,R1,R2
   \   000002CE   0x4288             CMP      R0,R1
   \   000002D0   0xDA1E             BGE.N    ??Search_WhiteBase_18
   \   000002D2   0x.... 0x....      LDR.W    R0,??DataTable6_58
   \   000002D6   0x7800             LDRB     R0,[R0, #+0]
   \   000002D8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002DA   0x.... 0x....      LDR.W    R1,??DataTable6_54
   \   000002DE   0x7809             LDRB     R1,[R1, #+0]
   \   000002E0   0x229F             MOVS     R2,#+159
   \   000002E2   0x.... 0x....      LDR.W    R3,??DataTable6_57
   \   000002E6   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   000002EA   0x5C61             LDRB     R1,[R4, R1]
   \   000002EC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002EE   0x.... 0x....      LDR.W    R2,??DataTable6_54
   \   000002F2   0x7812             LDRB     R2,[R2, #+0]
   \   000002F4   0x239F             MOVS     R3,#+159
   \   000002F6   0x.... 0x....      LDR.W    R5,??DataTable6_57
   \   000002FA   0xFB03 0x5202      MLA      R2,R3,R2,R5
   \   000002FE   0x18A2             ADDS     R2,R4,R2
   \   00000300   0xF812 0x2C03      LDRB     R2,[R2, #-3]
   \   00000304   0x1A89             SUBS     R1,R1,R2
   \   00000306   0x4288             CMP      R0,R1
   \   00000308   0xDA02             BGE.N    ??Search_WhiteBase_18
   \   0000030A   0x.... 0x....      LDR.W    R0,??DataTable6_66
   \   0000030E   0x7004             STRB     R4,[R0, #+0]
   \                     ??Search_WhiteBase_18:
   \   00000310   0x1E64             SUBS     R4,R4,#+1
   \                     ??Search_WhiteBase_16:
   \   00000312   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000314   0x2C03             CMP      R4,#+3
   \   00000316   0xD31D             BCC.N    ??Search_WhiteBase_19
   \   00000318   0x.... 0x....      LDR.W    R0,??DataTable6_66
   \   0000031C   0x7800             LDRB     R0,[R0, #+0]
   \   0000031E   0x.... 0x....      LDR.W    R1,??DataTable6_61
   \   00000322   0x7809             LDRB     R1,[R1, #+0]
   \   00000324   0x4288             CMP      R0,R1
   \   00000326   0xD0B8             BEQ.N    ??Search_WhiteBase_17
   \   00000328   0x.... 0x....      LDR.W    R0,??DataTable6_66
   \   0000032C   0x7800             LDRB     R0,[R0, #+0]
   \   0000032E   0x.... 0x....      LDR.W    R1,??DataTable6_65
   \   00000332   0x7809             LDRB     R1,[R1, #+0]
   \   00000334   0x1A40             SUBS     R0,R0,R1
   \   00000336   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000338   0x.... 0x....      BL       f_abs16
   \   0000033C   0x0005             MOVS     R5,R0
   \   0000033E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000340   0x.... 0x....      LDR.W    R0,??DataTable6_65
   \   00000344   0x7800             LDRB     R0,[R0, #+0]
   \   00000346   0x1A20             SUBS     R0,R4,R0
   \   00000348   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000034A   0x.... 0x....      BL       f_abs16
   \   0000034E   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000350   0x4285             CMP      R5,R0
   \   00000352   0xDAA2             BGE.N    ??Search_WhiteBase_17
   \                     ??Search_WhiteBase_19:
   \   00000354   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000356   0x2C02             CMP      R4,#+2
   \   00000358   0xD14F             BNE.N    ??Search_WhiteBase_20
   \   0000035A   0x.... 0x....      LDR.W    R0,??DataTable6_66
   \   0000035E   0x7800             LDRB     R0,[R0, #+0]
   \   00000360   0x.... 0x....      LDR.W    R1,??DataTable6_61
   \   00000364   0x7809             LDRB     R1,[R1, #+0]
   \   00000366   0x4288             CMP      R0,R1
   \   00000368   0xD147             BNE.N    ??Search_WhiteBase_20
   \   0000036A   0x.... 0x....      LDR.W    R0,??DataTable6_58
   \   0000036E   0x7800             LDRB     R0,[R0, #+0]
   \   00000370   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000372   0x.... 0x....      LDR.W    R1,??DataTable6_54
   \   00000376   0x7809             LDRB     R1,[R1, #+0]
   \   00000378   0x229F             MOVS     R2,#+159
   \   0000037A   0x.... 0x....      LDR.W    R3,??DataTable6_57
   \   0000037E   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   00000382   0x5C61             LDRB     R1,[R4, R1]
   \   00000384   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000386   0x.... 0x....      LDR.W    R2,??DataTable6_54
   \   0000038A   0x7812             LDRB     R2,[R2, #+0]
   \   0000038C   0x239F             MOVS     R3,#+159
   \   0000038E   0x.... 0x....      LDR.W    R5,??DataTable6_57
   \   00000392   0xFB03 0x5202      MLA      R2,R3,R2,R5
   \   00000396   0x18A2             ADDS     R2,R4,R2
   \   00000398   0xF812 0x2C02      LDRB     R2,[R2, #-2]
   \   0000039C   0x1A89             SUBS     R1,R1,R2
   \   0000039E   0x4288             CMP      R0,R1
   \   000003A0   0xDA04             BGE.N    ??Search_WhiteBase_21
   \   000003A2   0x.... 0x....      LDR.W    R0,??DataTable6_66
   \   000003A6   0x2102             MOVS     R1,#+2
   \   000003A8   0x7001             STRB     R1,[R0, #+0]
   \   000003AA   0xE026             B.N      ??Search_WhiteBase_20
   \                     ??Search_WhiteBase_21:
   \   000003AC   0x.... 0x....      LDR.W    R0,??DataTable6_58
   \   000003B0   0x7800             LDRB     R0,[R0, #+0]
   \   000003B2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003B4   0x.... 0x....      LDR.W    R1,??DataTable6_54
   \   000003B8   0x7809             LDRB     R1,[R1, #+0]
   \   000003BA   0x229F             MOVS     R2,#+159
   \   000003BC   0x.... 0x....      LDR.W    R3,??DataTable6_57
   \   000003C0   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   000003C4   0x1861             ADDS     R1,R4,R1
   \   000003C6   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000003CA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003CC   0x.... 0x....      LDR.W    R2,??DataTable6_54
   \   000003D0   0x7812             LDRB     R2,[R2, #+0]
   \   000003D2   0x239F             MOVS     R3,#+159
   \   000003D4   0x.... 0x....      LDR.W    R5,??DataTable6_57
   \   000003D8   0xFB03 0x5202      MLA      R2,R3,R2,R5
   \   000003DC   0x18A2             ADDS     R2,R4,R2
   \   000003DE   0xF812 0x2C02      LDRB     R2,[R2, #-2]
   \   000003E2   0x1A89             SUBS     R1,R1,R2
   \   000003E4   0x4288             CMP      R0,R1
   \   000003E6   0xDA04             BGE.N    ??Search_WhiteBase_22
   \   000003E8   0x.... 0x....      LDR.W    R0,??DataTable6_66
   \   000003EC   0x2101             MOVS     R1,#+1
   \   000003EE   0x7001             STRB     R1,[R0, #+0]
   \   000003F0   0xE003             B.N      ??Search_WhiteBase_20
   \                     ??Search_WhiteBase_22:
   \   000003F2   0x.... 0x....      LDR.W    R0,??DataTable6_66
   \   000003F6   0x2100             MOVS     R1,#+0
   \   000003F8   0x7001             STRB     R1,[R0, #+0]
   \                     ??Search_WhiteBase_20:
   \   000003FA   0x.... 0x....      LDR.W    R0,??DataTable6_68
   \   000003FE   0x.... 0x....      LDR.W    R1,??DataTable6_61
   \   00000402   0x7809             LDRB     R1,[R1, #+0]
   \   00000404   0x7001             STRB     R1,[R0, #+0]
   \   00000406   0x.... 0x....      LDR.W    R0,??DataTable6_61
   \   0000040A   0x7804             LDRB     R4,[R0, #+0]
   \   0000040C   0xE039             B.N      ??Search_WhiteBase_23
   \                     ??Search_WhiteBase_24:
   \   0000040E   0x.... 0x....      LDR.W    R0,??DataTable6_58
   \   00000412   0x7800             LDRB     R0,[R0, #+0]
   \   00000414   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000416   0x.... 0x....      LDR.W    R1,??DataTable6_54
   \   0000041A   0x7809             LDRB     R1,[R1, #+0]
   \   0000041C   0x229F             MOVS     R2,#+159
   \   0000041E   0x.... 0x....      LDR.W    R3,??DataTable6_57
   \   00000422   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   00000426   0x5C61             LDRB     R1,[R4, R1]
   \   00000428   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000042A   0x.... 0x....      LDR.W    R2,??DataTable6_54
   \   0000042E   0x7812             LDRB     R2,[R2, #+0]
   \   00000430   0x239F             MOVS     R3,#+159
   \   00000432   0x.... 0x....      LDR.W    R5,??DataTable6_57
   \   00000436   0xFB03 0x5202      MLA      R2,R3,R2,R5
   \   0000043A   0x18A2             ADDS     R2,R4,R2
   \   0000043C   0x7892             LDRB     R2,[R2, #+2]
   \   0000043E   0x1A89             SUBS     R1,R1,R2
   \   00000440   0x4288             CMP      R0,R1
   \   00000442   0xDA1D             BGE.N    ??Search_WhiteBase_25
   \   00000444   0x.... 0x....      LDR.W    R0,??DataTable6_58
   \   00000448   0x7800             LDRB     R0,[R0, #+0]
   \   0000044A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000044C   0x.... 0x....      LDR.W    R1,??DataTable6_54
   \   00000450   0x7809             LDRB     R1,[R1, #+0]
   \   00000452   0x229F             MOVS     R2,#+159
   \   00000454   0x.... 0x....      LDR.W    R3,??DataTable6_57
   \   00000458   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   0000045C   0x5C61             LDRB     R1,[R4, R1]
   \   0000045E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000460   0x.... 0x....      LDR.W    R2,??DataTable6_54
   \   00000464   0x7812             LDRB     R2,[R2, #+0]
   \   00000466   0x239F             MOVS     R3,#+159
   \   00000468   0x.... 0x....      LDR.W    R5,??DataTable6_57
   \   0000046C   0xFB03 0x5202      MLA      R2,R3,R2,R5
   \   00000470   0x18A2             ADDS     R2,R4,R2
   \   00000472   0x78D2             LDRB     R2,[R2, #+3]
   \   00000474   0x1A89             SUBS     R1,R1,R2
   \   00000476   0x4288             CMP      R0,R1
   \   00000478   0xDA02             BGE.N    ??Search_WhiteBase_25
   \   0000047A   0x.... 0x....      LDR.W    R0,??DataTable6_68
   \   0000047E   0x7004             STRB     R4,[R0, #+0]
   \                     ??Search_WhiteBase_25:
   \   00000480   0x1C64             ADDS     R4,R4,#+1
   \                     ??Search_WhiteBase_23:
   \   00000482   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000484   0x2C9C             CMP      R4,#+156
   \   00000486   0xD21D             BCS.N    ??Search_WhiteBase_26
   \   00000488   0x.... 0x....      LDR.W    R0,??DataTable6_68
   \   0000048C   0x7800             LDRB     R0,[R0, #+0]
   \   0000048E   0x.... 0x....      LDR.W    R1,??DataTable6_61
   \   00000492   0x7809             LDRB     R1,[R1, #+0]
   \   00000494   0x4288             CMP      R0,R1
   \   00000496   0xD0BA             BEQ.N    ??Search_WhiteBase_24
   \   00000498   0x.... 0x....      LDR.W    R0,??DataTable6_68
   \   0000049C   0x7800             LDRB     R0,[R0, #+0]
   \   0000049E   0x.... 0x....      LDR.W    R1,??DataTable6_67
   \   000004A2   0x7809             LDRB     R1,[R1, #+0]
   \   000004A4   0x1A40             SUBS     R0,R0,R1
   \   000004A6   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000004A8   0x.... 0x....      BL       f_abs16
   \   000004AC   0x0005             MOVS     R5,R0
   \   000004AE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004B0   0x.... 0x....      LDR.W    R0,??DataTable6_67
   \   000004B4   0x7800             LDRB     R0,[R0, #+0]
   \   000004B6   0x1A20             SUBS     R0,R4,R0
   \   000004B8   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000004BA   0x.... 0x....      BL       f_abs16
   \   000004BE   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   000004C0   0x4285             CMP      R5,R0
   \   000004C2   0xDAA4             BGE.N    ??Search_WhiteBase_24
   \                     ??Search_WhiteBase_26:
   \   000004C4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004C6   0x2C9C             CMP      R4,#+156
   \   000004C8   0xD13F             BNE.N    ??Search_WhiteBase_27
   \   000004CA   0x.... 0x....      LDR.W    R0,??DataTable6_68
   \   000004CE   0x7800             LDRB     R0,[R0, #+0]
   \   000004D0   0x.... 0x....      LDR.W    R1,??DataTable6_61
   \   000004D4   0x7809             LDRB     R1,[R1, #+0]
   \   000004D6   0x4288             CMP      R0,R1
   \   000004D8   0xD137             BNE.N    ??Search_WhiteBase_27
   \   000004DA   0x....             LDR.N    R0,??DataTable6_58
   \   000004DC   0x7800             LDRB     R0,[R0, #+0]
   \   000004DE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004E0   0x....             LDR.N    R1,??DataTable6_54
   \   000004E2   0x7809             LDRB     R1,[R1, #+0]
   \   000004E4   0x229F             MOVS     R2,#+159
   \   000004E6   0x....             LDR.N    R3,??DataTable6_57
   \   000004E8   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   000004EC   0x5C61             LDRB     R1,[R4, R1]
   \   000004EE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004F0   0x....             LDR.N    R2,??DataTable6_54
   \   000004F2   0x7812             LDRB     R2,[R2, #+0]
   \   000004F4   0x239F             MOVS     R3,#+159
   \   000004F6   0x....             LDR.N    R5,??DataTable6_57
   \   000004F8   0xFB03 0x5202      MLA      R2,R3,R2,R5
   \   000004FC   0x18A2             ADDS     R2,R4,R2
   \   000004FE   0x7892             LDRB     R2,[R2, #+2]
   \   00000500   0x1A89             SUBS     R1,R1,R2
   \   00000502   0x4288             CMP      R0,R1
   \   00000504   0xDA03             BGE.N    ??Search_WhiteBase_28
   \   00000506   0x....             LDR.N    R0,??DataTable6_68
   \   00000508   0x219C             MOVS     R1,#+156
   \   0000050A   0x7001             STRB     R1,[R0, #+0]
   \   0000050C   0xE01D             B.N      ??Search_WhiteBase_27
   \                     ??Search_WhiteBase_28:
   \   0000050E   0x....             LDR.N    R0,??DataTable6_58
   \   00000510   0x7800             LDRB     R0,[R0, #+0]
   \   00000512   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000514   0x....             LDR.N    R1,??DataTable6_54
   \   00000516   0x7809             LDRB     R1,[R1, #+0]
   \   00000518   0x229F             MOVS     R2,#+159
   \   0000051A   0x....             LDR.N    R3,??DataTable6_57
   \   0000051C   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   00000520   0x1861             ADDS     R1,R4,R1
   \   00000522   0x7849             LDRB     R1,[R1, #+1]
   \   00000524   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000526   0x....             LDR.N    R2,??DataTable6_54
   \   00000528   0x7812             LDRB     R2,[R2, #+0]
   \   0000052A   0x239F             MOVS     R3,#+159
   \   0000052C   0x....             LDR.N    R5,??DataTable6_57
   \   0000052E   0xFB03 0x5202      MLA      R2,R3,R2,R5
   \   00000532   0x18A2             ADDS     R2,R4,R2
   \   00000534   0x7892             LDRB     R2,[R2, #+2]
   \   00000536   0x1A89             SUBS     R1,R1,R2
   \   00000538   0x4288             CMP      R0,R1
   \   0000053A   0xDA03             BGE.N    ??Search_WhiteBase_29
   \   0000053C   0x....             LDR.N    R0,??DataTable6_68
   \   0000053E   0x219D             MOVS     R1,#+157
   \   00000540   0x7001             STRB     R1,[R0, #+0]
   \   00000542   0xE002             B.N      ??Search_WhiteBase_27
   \                     ??Search_WhiteBase_29:
   \   00000544   0x....             LDR.N    R0,??DataTable6_68
   \   00000546   0x219E             MOVS     R1,#+158
   \   00000548   0x7001             STRB     R1,[R0, #+0]
   \                     ??Search_WhiteBase_27:
   \   0000054A   0x....             LDR.N    R0,??DataTable6_54
   \   0000054C   0x7800             LDRB     R0,[R0, #+0]
   \   0000054E   0x....             LDR.N    R1,??DataTable6_70
   \   00000550   0x....             LDR.N    R2,??DataTable6_66
   \   00000552   0x7812             LDRB     R2,[R2, #+0]
   \   00000554   0x5442             STRB     R2,[R0, R1]
   \   00000556   0x....             LDR.N    R0,??DataTable6_54
   \   00000558   0x7800             LDRB     R0,[R0, #+0]
   \   0000055A   0x....             LDR.N    R1,??DataTable6_71
   \   0000055C   0x....             LDR.N    R2,??DataTable6_68
   \   0000055E   0x7812             LDRB     R2,[R2, #+0]
   \   00000560   0x5442             STRB     R2,[R0, R1]
   \   00000562   0x....             LDR.N    R0,??DataTable6_54
   \   00000564   0x7800             LDRB     R0,[R0, #+0]
   \   00000566   0x....             LDR.N    R1,??DataTable6_70
   \   00000568   0x5C40             LDRB     R0,[R0, R1]
   \   0000056A   0x2800             CMP      R0,#+0
   \   0000056C   0xD127             BNE.N    ??Search_WhiteBase_30
   \   0000056E   0x....             LDR.N    R0,??DataTable6_54
   \   00000570   0x7800             LDRB     R0,[R0, #+0]
   \   00000572   0x....             LDR.N    R1,??DataTable6_71
   \   00000574   0x5C40             LDRB     R0,[R0, R1]
   \   00000576   0x289E             CMP      R0,#+158
   \   00000578   0xD221             BCS.N    ??Search_WhiteBase_30
   \   0000057A   0x....             LDR.N    R0,??DataTable6_54
   \   0000057C   0x7800             LDRB     R0,[R0, #+0]
   \   0000057E   0x....             LDR.N    R1,??DataTable6_71
   \   00000580   0x5C40             LDRB     R0,[R0, R1]
   \   00000582   0x....             LDR.N    R1,??DataTable6_54
   \   00000584   0x7809             LDRB     R1,[R1, #+0]
   \   00000586   0x....             LDR.N    R2,??DataTable6_70
   \   00000588   0x5C89             LDRB     R1,[R1, R2]
   \   0000058A   0x1A40             SUBS     R0,R0,R1
   \   0000058C   0x289C             CMP      R0,#+156
   \   0000058E   0xDB16             BLT.N    ??Search_WhiteBase_30
   \   00000590   0x....             LDR.N    R0,??DataTable6_54
   \   00000592   0x7800             LDRB     R0,[R0, #+0]
   \   00000594   0x....             LDR.N    R1,??DataTable6_70
   \   00000596   0x....             LDR.N    R2,??DataTable6_65
   \   00000598   0x7812             LDRB     R2,[R2, #+0]
   \   0000059A   0x5442             STRB     R2,[R0, R1]
   \   0000059C   0x....             LDR.N    R0,??DataTable6_54
   \   0000059E   0x7800             LDRB     R0,[R0, #+0]
   \   000005A0   0x....             LDR.N    R1,??DataTable6_70
   \   000005A2   0x5C40             LDRB     R0,[R0, R1]
   \   000005A4   0x....             LDR.N    R1,??DataTable6_54
   \   000005A6   0x7809             LDRB     R1,[R1, #+0]
   \   000005A8   0x....             LDR.N    R2,??DataTable6_71
   \   000005AA   0x5C89             LDRB     R1,[R1, R2]
   \   000005AC   0x1808             ADDS     R0,R1,R0
   \   000005AE   0x2102             MOVS     R1,#+2
   \   000005B0   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000005B4   0x....             LDR.N    R1,??DataTable6_54
   \   000005B6   0x7809             LDRB     R1,[R1, #+0]
   \   000005B8   0x....             LDR.N    R2,??DataTable6_72
   \   000005BA   0x5488             STRB     R0,[R1, R2]
   \   000005BC   0xE05C             B.N      ??Search_WhiteBase_31
   \                     ??Search_WhiteBase_30:
   \   000005BE   0x....             LDR.N    R0,??DataTable6_54
   \   000005C0   0x7800             LDRB     R0,[R0, #+0]
   \   000005C2   0x....             LDR.N    R1,??DataTable6_71
   \   000005C4   0x5C40             LDRB     R0,[R0, R1]
   \   000005C6   0x289E             CMP      R0,#+158
   \   000005C8   0xD127             BNE.N    ??Search_WhiteBase_32
   \   000005CA   0x....             LDR.N    R0,??DataTable6_54
   \   000005CC   0x7800             LDRB     R0,[R0, #+0]
   \   000005CE   0x....             LDR.N    R1,??DataTable6_70
   \   000005D0   0x5C40             LDRB     R0,[R0, R1]
   \   000005D2   0x2801             CMP      R0,#+1
   \   000005D4   0xD321             BCC.N    ??Search_WhiteBase_32
   \   000005D6   0x....             LDR.N    R0,??DataTable6_54
   \   000005D8   0x7800             LDRB     R0,[R0, #+0]
   \   000005DA   0x....             LDR.N    R1,??DataTable6_71
   \   000005DC   0x5C40             LDRB     R0,[R0, R1]
   \   000005DE   0x....             LDR.N    R1,??DataTable6_54
   \   000005E0   0x7809             LDRB     R1,[R1, #+0]
   \   000005E2   0x....             LDR.N    R2,??DataTable6_70
   \   000005E4   0x5C89             LDRB     R1,[R1, R2]
   \   000005E6   0x1A40             SUBS     R0,R0,R1
   \   000005E8   0x289C             CMP      R0,#+156
   \   000005EA   0xDB16             BLT.N    ??Search_WhiteBase_32
   \   000005EC   0x....             LDR.N    R0,??DataTable6_54
   \   000005EE   0x7800             LDRB     R0,[R0, #+0]
   \   000005F0   0x....             LDR.N    R1,??DataTable6_71
   \   000005F2   0x....             LDR.N    R2,??DataTable6_67
   \   000005F4   0x7812             LDRB     R2,[R2, #+0]
   \   000005F6   0x5442             STRB     R2,[R0, R1]
   \   000005F8   0x....             LDR.N    R0,??DataTable6_54
   \   000005FA   0x7800             LDRB     R0,[R0, #+0]
   \   000005FC   0x....             LDR.N    R1,??DataTable6_70
   \   000005FE   0x5C40             LDRB     R0,[R0, R1]
   \   00000600   0x....             LDR.N    R1,??DataTable6_54
   \   00000602   0x7809             LDRB     R1,[R1, #+0]
   \   00000604   0x....             LDR.N    R2,??DataTable6_71
   \   00000606   0x5C89             LDRB     R1,[R1, R2]
   \   00000608   0x1808             ADDS     R0,R1,R0
   \   0000060A   0x2102             MOVS     R1,#+2
   \   0000060C   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000610   0x....             LDR.N    R1,??DataTable6_54
   \   00000612   0x7809             LDRB     R1,[R1, #+0]
   \   00000614   0x....             LDR.N    R2,??DataTable6_72
   \   00000616   0x5488             STRB     R0,[R1, R2]
   \   00000618   0xE02E             B.N      ??Search_WhiteBase_31
   \                     ??Search_WhiteBase_32:
   \   0000061A   0x....             LDR.N    R0,??DataTable6_54
   \   0000061C   0x7800             LDRB     R0,[R0, #+0]
   \   0000061E   0x....             LDR.N    R1,??DataTable6_71
   \   00000620   0x5C40             LDRB     R0,[R0, R1]
   \   00000622   0x289E             CMP      R0,#+158
   \   00000624   0xD118             BNE.N    ??Search_WhiteBase_33
   \   00000626   0x....             LDR.N    R0,??DataTable6_54
   \   00000628   0x7800             LDRB     R0,[R0, #+0]
   \   0000062A   0x....             LDR.N    R1,??DataTable6_70
   \   0000062C   0x5C40             LDRB     R0,[R0, R1]
   \   0000062E   0x2800             CMP      R0,#+0
   \   00000630   0xD112             BNE.N    ??Search_WhiteBase_33
   \   00000632   0x....             LDR.N    R0,??DataTable6_54
   \   00000634   0x7800             LDRB     R0,[R0, #+0]
   \   00000636   0x....             LDR.N    R1,??DataTable6_70
   \   00000638   0x....             LDR.N    R2,??DataTable6_65
   \   0000063A   0x7812             LDRB     R2,[R2, #+0]
   \   0000063C   0x5442             STRB     R2,[R0, R1]
   \   0000063E   0x....             LDR.N    R0,??DataTable6_54
   \   00000640   0x7800             LDRB     R0,[R0, #+0]
   \   00000642   0x....             LDR.N    R1,??DataTable6_71
   \   00000644   0x....             LDR.N    R2,??DataTable6_67
   \   00000646   0x7812             LDRB     R2,[R2, #+0]
   \   00000648   0x5442             STRB     R2,[R0, R1]
   \   0000064A   0x....             LDR.N    R0,??DataTable6_54
   \   0000064C   0x7800             LDRB     R0,[R0, #+0]
   \   0000064E   0x....             LDR.N    R1,??DataTable6_72
   \   00000650   0x....             LDR.N    R2,??DataTable6_60
   \   00000652   0x7812             LDRB     R2,[R2, #+0]
   \   00000654   0x5442             STRB     R2,[R0, R1]
   \   00000656   0xE00F             B.N      ??Search_WhiteBase_31
   \                     ??Search_WhiteBase_33:
   \   00000658   0x....             LDR.N    R0,??DataTable6_54
   \   0000065A   0x7800             LDRB     R0,[R0, #+0]
   \   0000065C   0x....             LDR.N    R1,??DataTable6_70
   \   0000065E   0x5C40             LDRB     R0,[R0, R1]
   \   00000660   0x....             LDR.N    R1,??DataTable6_54
   \   00000662   0x7809             LDRB     R1,[R1, #+0]
   \   00000664   0x....             LDR.N    R2,??DataTable6_71
   \   00000666   0x5C89             LDRB     R1,[R1, R2]
   \   00000668   0x1808             ADDS     R0,R1,R0
   \   0000066A   0x2102             MOVS     R1,#+2
   \   0000066C   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000670   0x....             LDR.N    R1,??DataTable6_54
   \   00000672   0x7809             LDRB     R1,[R1, #+0]
   \   00000674   0x....             LDR.N    R2,??DataTable6_72
   \   00000676   0x5488             STRB     R0,[R1, R2]
   \                     ??Search_WhiteBase_31:
   \   00000678   0x....             LDR.N    R0,??DataTable6_54
   \   0000067A   0x7800             LDRB     R0,[R0, #+0]
   \   0000067C   0x....             LDR.N    R1,??DataTable6_70
   \   0000067E   0x5C40             LDRB     R0,[R0, R1]
   \   00000680   0x....             LDR.N    R1,??DataTable6_66
   \   00000682   0x7008             STRB     R0,[R1, #+0]
   \   00000684   0x....             LDR.N    R0,??DataTable6_54
   \   00000686   0x7800             LDRB     R0,[R0, #+0]
   \   00000688   0x....             LDR.N    R1,??DataTable6_71
   \   0000068A   0x5C40             LDRB     R0,[R0, R1]
   \   0000068C   0x....             LDR.N    R1,??DataTable6_68
   \   0000068E   0x7008             STRB     R0,[R1, #+0]
   \   00000690   0x....             LDR.N    R0,??DataTable6_54
   \   00000692   0x7800             LDRB     R0,[R0, #+0]
   \   00000694   0x....             LDR.N    R1,??DataTable6_72
   \   00000696   0x5C40             LDRB     R0,[R0, R1]
   \   00000698   0x....             LDR.N    R1,??DataTable6_64
   \   0000069A   0x7008             STRB     R0,[R1, #+0]
   \   0000069C   0x....             LDR.N    R0,??DataTable6_68
   \   0000069E   0x7800             LDRB     R0,[R0, #+0]
   \   000006A0   0x....             LDR.N    R1,??DataTable6_66
   \   000006A2   0x7809             LDRB     R1,[R1, #+0]
   \   000006A4   0x1A40             SUBS     R0,R0,R1
   \   000006A6   0x281F             CMP      R0,#+31
   \   000006A8   0xF6BF 0xADBE      BGE.W    ??Search_WhiteBase_14
    675                  else
    676                  {
    677                    find_whitebase_flag = 0;
   \   000006AC   0x....             LDR.N    R0,??DataTable6_56
   \   000006AE   0x2100             MOVS     R1,#+0
   \   000006B0   0x7001             STRB     R1,[R0, #+0]
    678                    current_deal_line++;
   \   000006B2   0x....             LDR.N    R0,??DataTable6_54
   \   000006B4   0x7800             LDRB     R0,[R0, #+0]
   \   000006B6   0x1C40             ADDS     R0,R0,#+1
   \   000006B8   0x....             LDR.N    R1,??DataTable6_54
   \   000006BA   0x7008             STRB     R0,[R1, #+0]
   \   000006BC   0xE5D7             B.N      ??Search_WhiteBase_6
    679                  }
    680                  
    681            }//while循环的结束
    682            if(bottom_whitebase > 0)
   \                     ??Search_WhiteBase_15:
   \   000006BE   0x....             LDR.N    R0,??DataTable6_55
   \   000006C0   0x7800             LDRB     R0,[R0, #+0]
   \   000006C2   0x2801             CMP      R0,#+1
   \   000006C4   0xD313             BCC.N    ??Search_WhiteBase_34
    683            {
    684               for( i = 0 ; i < bottom_whitebase ;i++)
   \   000006C6   0x2500             MOVS     R5,#+0
   \   000006C8   0xE00C             B.N      ??Search_WhiteBase_35
    685               {//对之前的行进行标记
    686                  center_white[i] = MID;  
   \                     ??Search_WhiteBase_36:
   \   000006CA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000006CC   0x....             LDR.N    R0,??DataTable6_72
   \   000006CE   0x214F             MOVS     R1,#+79
   \   000006D0   0x5429             STRB     R1,[R5, R0]
    687                  left_black[i] = MID - 2;   
   \   000006D2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000006D4   0x....             LDR.N    R0,??DataTable6_70
   \   000006D6   0x214D             MOVS     R1,#+77
   \   000006D8   0x5429             STRB     R1,[R5, R0]
    688                  right_black[i] = MID + 2;  
   \   000006DA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000006DC   0x....             LDR.N    R0,??DataTable6_71
   \   000006DE   0x2151             MOVS     R1,#+81
   \   000006E0   0x5429             STRB     R1,[R5, R0]
    689               }
   \   000006E2   0x1C6D             ADDS     R5,R5,#+1
   \                     ??Search_WhiteBase_35:
   \   000006E4   0x....             LDR.N    R0,??DataTable6_55
   \   000006E6   0x7800             LDRB     R0,[R0, #+0]
   \   000006E8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000006EA   0x4285             CMP      R5,R0
   \   000006EC   0xD3ED             BCC.N    ??Search_WhiteBase_36
    690            }
    691          }//
   \                     ??Search_WhiteBase_34:
   \   000006EE   0xBD70             POP      {R4-R6,PC}       ;; return
    692          
    693          //------------------------由基准线定出的两边黑线为基准，找出赛道边缘-----------------------// 
    694          /*本函数的功能定义为找线，为了处理在某些断点的情况能继续在前方找到边沿线，
    695          只是对于边沿线进行初步的虚构，真正的对赛道两边沿线的处理虚构，主要由下一个函数完成*/

   \                                 In section .text, align 2, keep-with-next
    696          void Search_BlackEdge(void)     
    697          {   
   \                     Search_BlackEdge:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    698            int16 i = 0,j = 0,n = 0, k = 0;
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x2600             MOVS     R6,#+0
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x2100             MOVS     R1,#+0
    699            int16 un_lost_hang = bottom_whitebase;//这两个变量是用来跟踪记录最近的一行的没有丢点的行，以便于对下一行的状态进行准确的判断.初始值为bottom_whitebase因为第bottom_whitebase行始终判断为没有丢点
   \   0000000A   0x.... 0x....      LDR.W    R2,??DataTable7
   \   0000000E   0x7815             LDRB     R5,[R2, #+0]
    700            deal_start_line = bottom_whitebase + 1;  
   \   00000010   0x.... 0x....      LDR.W    R2,??DataTable7
   \   00000014   0x7812             LDRB     R2,[R2, #+0]
   \   00000016   0x1C52             ADDS     R2,R2,#+1
   \   00000018   0x.... 0x....      LDR.W    R3,??DataTable7_1
   \   0000001C   0x701A             STRB     R2,[R3, #+0]
    701            top_whiteline = ROW -1;
   \   0000001E   0x.... 0x....      LDR.W    R2,??DataTable7_2
   \   00000022   0x2340             MOVS     R3,#+64
   \   00000024   0x7013             STRB     R3,[R2, #+0]
    702            hang_search_start = white_refer;  //从基准行的中点进行扫描 
   \   00000026   0x.... 0x....      LDR.W    R2,??DataTable7_3
   \   0000002A   0x.... 0x....      LDR.W    R3,??DataTable7_4
   \   0000002E   0x781B             LDRB     R3,[R3, #+0]
   \   00000030   0x7013             STRB     R3,[R2, #+0]
    703             
    704            for(i = deal_start_line ; i < ROW ;i++)//对状态标志进行初始化
   \   00000032   0x.... 0x....      LDR.W    R2,??DataTable7_1
   \   00000036   0x7812             LDRB     R2,[R2, #+0]
   \   00000038   0x0014             MOVS     R4,R2
   \   0000003A   0xE005             B.N      ??Search_BlackEdge_0
    705              {
    706                Row_state[i] = 3;
   \                     ??Search_BlackEdge_1:
   \   0000003C   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000042   0x2103             MOVS     R1,#+3
   \   00000044   0x5421             STRB     R1,[R4, R0]
    707              }
   \   00000046   0x1C64             ADDS     R4,R4,#+1
   \                     ??Search_BlackEdge_0:
   \   00000048   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000004A   0x2C41             CMP      R4,#+65
   \   0000004C   0xDBF6             BLT.N    ??Search_BlackEdge_1
    708            
    709            for(i = deal_start_line ;i < ROW;i++) 
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   00000052   0x7804             LDRB     R4,[R0, #+0]
   \   00000054   0xE000             B.N      ??Search_BlackEdge_2
   \                     ??Search_BlackEdge_3:
   \   00000056   0x1C64             ADDS     R4,R4,#+1
   \                     ??Search_BlackEdge_2:
   \   00000058   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000005A   0x2C41             CMP      R4,#+65
   \   0000005C   0xF280 0x8567      BGE.W    ??Search_BlackEdge_4
    710            {
    711              //////////////////左右的搜索开始///////////////////////
    712              //左边搜索
    713              j = hang_search_start;
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   00000064   0x7806             LDRB     R6,[R0, #+0]
    714              left_black[i] = hang_search_start;
   \   00000066   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   00000070   0x7809             LDRB     R1,[R1, #+0]
   \   00000072   0x5421             STRB     R1,[R4, R0]
   \   00000074   0xE000             B.N      ??Search_BlackEdge_5
    715              while(j >= 2)
    716              {     
    717                
    718                if(VideoImage1[i][j] - VideoImage1[i][j-2] > OT
    719                   && f_abs16(VideoImage1[i][j]-VideoImage1[i][j+1]) < OT && f_abs16(VideoImage1[i][j+1]-VideoImage1[i][j+2]) < OT && VideoImage1[i][j+2]-VideoImage1[i][j+3] < OT)  //滤除边沿噪点
    720                  {
    721                    if(f_abs16(j - left_black[i-1]) < f_abs16(left_black[i] - left_black[i-1]))//滤除干扰
    722                     left_black[i] = j;
    723                  } 
    724                 if(left_black[i] != hang_search_start && (f_abs16(j - left_black[i-1]) > f_abs16(left_black[i] - left_black[i-1])
    725                                                           || (f_abs16(left_black[i] - left_black[i-1])  < 5 && j<=left_black[i-1] )))
    726                 {
    727                  break;
    728                 }//减少计算量，搜索到最近的一个跳变点，则停止
    729               
    730                   //当前一个状态是断点的状态时，这个时候当在内部搜索到了跳变沿的时候，则就不进行搜索，若是没有搜到，
    731                    //则再到赛道的两边进行搜索
    732                 if(Row_state[i-1] == 0 || Row_state[i-1] == 2)
    733                    {
    734                      if( j <  left_black[i - 1]  && left_black[i] != hang_search_start) //当前一行为断点状态时，搜索到了点之后，则不允许继续的搜索
    735                       {
    736                        break; 
    737                      }
    738                    }
    739                    j--;
   \                     ??Search_BlackEdge_6:
   \   00000076   0x1E76             SUBS     R6,R6,#+1
   \                     ??Search_BlackEdge_5:
   \   00000078   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   0000007A   0x2E02             CMP      R6,#+2
   \   0000007C   0xF2C0 0x80ED      BLT.W    ??Search_BlackEdge_7
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable7_7
   \   00000084   0x7800             LDRB     R0,[R0, #+0]
   \   00000086   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   00000088   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000008A   0x219F             MOVS     R1,#+159
   \   0000008C   0x.... 0x....      LDR.W    R2,??DataTable7_8
   \   00000090   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   00000094   0x5C71             LDRB     R1,[R6, R1]
   \   00000096   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   00000098   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000009A   0x229F             MOVS     R2,#+159
   \   0000009C   0x.... 0x....      LDR.W    R3,??DataTable7_8
   \   000000A0   0xFB02 0x3204      MLA      R2,R2,R4,R3
   \   000000A4   0x18B2             ADDS     R2,R6,R2
   \   000000A6   0xF812 0x2C02      LDRB     R2,[R2, #-2]
   \   000000AA   0x1A89             SUBS     R1,R1,R2
   \   000000AC   0x4288             CMP      R0,R1
   \   000000AE   0xDA6E             BGE.N    ??Search_BlackEdge_8
   \   000000B0   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000000B2   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000000B4   0x209F             MOVS     R0,#+159
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable7_8
   \   000000BA   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   000000BE   0x5C30             LDRB     R0,[R6, R0]
   \   000000C0   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000000C2   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000000C4   0x219F             MOVS     R1,#+159
   \   000000C6   0x.... 0x....      LDR.W    R2,??DataTable7_8
   \   000000CA   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   000000CE   0x1871             ADDS     R1,R6,R1
   \   000000D0   0x7849             LDRB     R1,[R1, #+1]
   \   000000D2   0x1A40             SUBS     R0,R0,R1
   \   000000D4   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000D6   0x.... 0x....      BL       f_abs16
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   000000DE   0x7809             LDRB     R1,[R1, #+0]
   \   000000E0   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000000E2   0x4288             CMP      R0,R1
   \   000000E4   0xDA53             BGE.N    ??Search_BlackEdge_8
   \   000000E6   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000000E8   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000000EA   0x209F             MOVS     R0,#+159
   \   000000EC   0x.... 0x....      LDR.W    R1,??DataTable7_8
   \   000000F0   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   000000F4   0x1830             ADDS     R0,R6,R0
   \   000000F6   0x7840             LDRB     R0,[R0, #+1]
   \   000000F8   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000000FA   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000000FC   0x219F             MOVS     R1,#+159
   \   000000FE   0x.... 0x....      LDR.W    R2,??DataTable7_8
   \   00000102   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   00000106   0x1871             ADDS     R1,R6,R1
   \   00000108   0x7889             LDRB     R1,[R1, #+2]
   \   0000010A   0x1A40             SUBS     R0,R0,R1
   \   0000010C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000010E   0x.... 0x....      BL       f_abs16
   \   00000112   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   00000116   0x7809             LDRB     R1,[R1, #+0]
   \   00000118   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000011A   0x4288             CMP      R0,R1
   \   0000011C   0xDA37             BGE.N    ??Search_BlackEdge_8
   \   0000011E   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   00000120   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000122   0x209F             MOVS     R0,#+159
   \   00000124   0x.... 0x....      LDR.W    R1,??DataTable7_8
   \   00000128   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   0000012C   0x1830             ADDS     R0,R6,R0
   \   0000012E   0x7880             LDRB     R0,[R0, #+2]
   \   00000130   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   00000132   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000134   0x219F             MOVS     R1,#+159
   \   00000136   0x.... 0x....      LDR.W    R2,??DataTable7_8
   \   0000013A   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   0000013E   0x1871             ADDS     R1,R6,R1
   \   00000140   0x78C9             LDRB     R1,[R1, #+3]
   \   00000142   0x1A40             SUBS     R0,R0,R1
   \   00000144   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   00000148   0x7809             LDRB     R1,[R1, #+0]
   \   0000014A   0x4288             CMP      R0,R1
   \   0000014C   0xDA1F             BGE.N    ??Search_BlackEdge_8
   \   0000014E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000150   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   00000154   0x1820             ADDS     R0,R4,R0
   \   00000156   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   0000015A   0x1A30             SUBS     R0,R6,R0
   \   0000015C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000015E   0x.... 0x....      BL       f_abs16
   \   00000162   0x0007             MOVS     R7,R0
   \   00000164   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000166   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   0000016A   0x5C20             LDRB     R0,[R4, R0]
   \   0000016C   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000016E   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   00000172   0x1861             ADDS     R1,R4,R1
   \   00000174   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000178   0x1A40             SUBS     R0,R0,R1
   \   0000017A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000017C   0x.... 0x....      BL       f_abs16
   \   00000180   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   00000182   0x4287             CMP      R7,R0
   \   00000184   0xDA03             BGE.N    ??Search_BlackEdge_8
   \   00000186   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000188   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   0000018C   0x5426             STRB     R6,[R4, R0]
   \                     ??Search_BlackEdge_8:
   \   0000018E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000190   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   00000194   0x5C20             LDRB     R0,[R4, R0]
   \   00000196   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   0000019A   0x7809             LDRB     R1,[R1, #+0]
   \   0000019C   0x4288             CMP      R0,R1
   \   0000019E   0xD036             BEQ.N    ??Search_BlackEdge_9
   \   000001A0   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000001A2   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   000001A6   0x5C20             LDRB     R0,[R4, R0]
   \   000001A8   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000001AA   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   000001AE   0x1861             ADDS     R1,R4,R1
   \   000001B0   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000001B4   0x1A40             SUBS     R0,R0,R1
   \   000001B6   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000001B8   0x.... 0x....      BL       f_abs16
   \   000001BC   0x0007             MOVS     R7,R0
   \   000001BE   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000001C0   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   000001C4   0x1820             ADDS     R0,R4,R0
   \   000001C6   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   000001CA   0x1A30             SUBS     R0,R6,R0
   \   000001CC   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000001CE   0x.... 0x....      BL       f_abs16
   \   000001D2   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   000001D4   0x4287             CMP      R7,R0
   \   000001D6   0xDB19             BLT.N    ??Search_BlackEdge_10
   \   000001D8   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000001DA   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   000001DE   0x5C20             LDRB     R0,[R4, R0]
   \   000001E0   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000001E2   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   000001E6   0x1861             ADDS     R1,R4,R1
   \   000001E8   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000001EC   0x1A40             SUBS     R0,R0,R1
   \   000001EE   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000001F0   0x.... 0x....      BL       f_abs16
   \   000001F4   0x2805             CMP      R0,#+5
   \   000001F6   0xDA0A             BGE.N    ??Search_BlackEdge_9
   \   000001F8   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000001FA   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   000001FE   0x1820             ADDS     R0,R4,R0
   \   00000200   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   00000204   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000206   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   00000208   0x42B0             CMP      R0,R6
   \   0000020A   0xDB00             BLT.N    ??Search_BlackEdge_9
   \                     ??Search_BlackEdge_10:
   \   0000020C   0xE025             B.N      ??Search_BlackEdge_7
   \                     ??Search_BlackEdge_9:
   \   0000020E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000210   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000214   0x1820             ADDS     R0,R4,R0
   \   00000216   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   0000021A   0x2800             CMP      R0,#+0
   \   0000021C   0xD008             BEQ.N    ??Search_BlackEdge_11
   \   0000021E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000220   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000224   0x1820             ADDS     R0,R4,R0
   \   00000226   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   0000022A   0x2802             CMP      R0,#+2
   \   0000022C   0xF47F 0xAF23      BNE.W    ??Search_BlackEdge_6
   \                     ??Search_BlackEdge_11:
   \   00000230   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000232   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   00000236   0x1820             ADDS     R0,R4,R0
   \   00000238   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   0000023C   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   0000023E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000240   0x4286             CMP      R6,R0
   \   00000242   0xF6BF 0xAF18      BGE.W    ??Search_BlackEdge_6
   \   00000246   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000248   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   0000024C   0x5C20             LDRB     R0,[R4, R0]
   \   0000024E   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   00000252   0x7809             LDRB     R1,[R1, #+0]
   \   00000254   0x4288             CMP      R0,R1
   \   00000256   0xF43F 0xAF0E      BEQ.W    ??Search_BlackEdge_6
    740              }      //搜索左边沿线的while结束
    741              //对左边沿线的出界判定
    742              if(j == 1 && left_black[i] == hang_search_start)      //到达边界了，但是边沿线没有改变时，在搜索范围内没有找到跳变点，则认为是图像依然丢点
   \                     ??Search_BlackEdge_7:
   \   0000025A   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   0000025C   0x2E01             CMP      R6,#+1
   \   0000025E   0xD12B             BNE.N    ??Search_BlackEdge_12
   \   00000260   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000262   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   00000266   0x5C20             LDRB     R0,[R4, R0]
   \   00000268   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   0000026C   0x7809             LDRB     R1,[R1, #+0]
   \   0000026E   0x4288             CMP      R0,R1
   \   00000270   0xD122             BNE.N    ??Search_BlackEdge_12
    743              {
    744                if(VideoImage1[i][j] - VideoImage1[i][j-1] > OT)
   \   00000272   0x.... 0x....      LDR.W    R0,??DataTable7_7
   \   00000276   0x7800             LDRB     R0,[R0, #+0]
   \   00000278   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   0000027A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000027C   0x219F             MOVS     R1,#+159
   \   0000027E   0x.... 0x....      LDR.W    R2,??DataTable7_8
   \   00000282   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   00000286   0x5C71             LDRB     R1,[R6, R1]
   \   00000288   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   0000028A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000028C   0x229F             MOVS     R2,#+159
   \   0000028E   0x.... 0x....      LDR.W    R3,??DataTable7_8
   \   00000292   0xFB02 0x3204      MLA      R2,R2,R4,R3
   \   00000296   0x18B2             ADDS     R2,R6,R2
   \   00000298   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \   0000029C   0x1A89             SUBS     R1,R1,R2
   \   0000029E   0x4288             CMP      R0,R1
   \   000002A0   0xDA05             BGE.N    ??Search_BlackEdge_13
    745                   left_black[i] = 1;
   \   000002A2   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000002A4   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   000002A8   0x2101             MOVS     R1,#+1
   \   000002AA   0x5421             STRB     R1,[R4, R0]
   \   000002AC   0xE004             B.N      ??Search_BlackEdge_12
    746                else
    747                  left_black[i] = 0;
   \                     ??Search_BlackEdge_13:
   \   000002AE   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000002B0   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   000002B4   0x2100             MOVS     R1,#+0
   \   000002B6   0x5421             STRB     R1,[R4, R0]
    748              }
    749          
    750            
    751              //右边搜索
    752              j = hang_search_start;
   \                     ??Search_BlackEdge_12:
   \   000002B8   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   000002BC   0x7806             LDRB     R6,[R0, #+0]
    753              right_black[i] = hang_search_start;
   \   000002BE   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000002C0   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   000002C4   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   000002C8   0x7809             LDRB     R1,[R1, #+0]
   \   000002CA   0x5421             STRB     R1,[R4, R0]
   \   000002CC   0xE000             B.N      ??Search_BlackEdge_14
    754              
    755              while( j <=COLUMN-3 )
    756              { 
    757                if( VideoImage1[i][j] - VideoImage1[i][j+2] > OT 
    758                   && f_abs16(VideoImage1[i][j]-VideoImage1[i][j-1]) < OT && f_abs16(VideoImage1[i][j-1]-VideoImage1[i][j-2]) < OT && VideoImage1[i][j-2]-VideoImage1[i][j-3] < OT)  //滤除边沿噪点
    759                  {
    760                    if(f_abs16(j-right_black[i-1]) < f_abs16(right_black[i] - right_black[i-1]))
    761                    {
    762                          right_black[i] = j ;
    763                    }
    764                  }
    765                if(right_black[i] != hang_search_start &&( f_abs16(j-right_black[i-1]) > f_abs16(right_black[i] - right_black[i-1])
    766                   ||(f_abs16(right_black[i] - right_black[i-1])<5 && j== right_black[i-1] ) ))//在附近搜索到了点，只要到达了前一行的列位置，则停止
    767                {
    768                  break;
    769                }
    770                if(Row_state[i-1] == 1 || Row_state[i-1] == 2)
    771                    {
    772                      if( j > right_black[i - 1]  && right_black[i] != hang_search_start) //当前一行为断点状态时，搜索到了点之后，则不允许继续的搜索
    773                       {
    774                        break;
    775                      }
    776                      //当搜索到的线大于了
    777                      //if()
    778                    }
    779                  j++;
   \                     ??Search_BlackEdge_15:
   \   000002CE   0x1C76             ADDS     R6,R6,#+1
   \                     ??Search_BlackEdge_14:
   \   000002D0   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000002D2   0x2E9D             CMP      R6,#+157
   \   000002D4   0xF280 0x80F1      BGE.W    ??Search_BlackEdge_16
   \   000002D8   0x.... 0x....      LDR.W    R0,??DataTable7_7
   \   000002DC   0x7800             LDRB     R0,[R0, #+0]
   \   000002DE   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000002E0   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000002E2   0x219F             MOVS     R1,#+159
   \   000002E4   0x.... 0x....      LDR.W    R2,??DataTable7_8
   \   000002E8   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   000002EC   0x5C71             LDRB     R1,[R6, R1]
   \   000002EE   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000002F0   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000002F2   0x229F             MOVS     R2,#+159
   \   000002F4   0x.... 0x....      LDR.W    R3,??DataTable7_8
   \   000002F8   0xFB02 0x3204      MLA      R2,R2,R4,R3
   \   000002FC   0x18B2             ADDS     R2,R6,R2
   \   000002FE   0x7892             LDRB     R2,[R2, #+2]
   \   00000300   0x1A89             SUBS     R1,R1,R2
   \   00000302   0x4288             CMP      R0,R1
   \   00000304   0xDA73             BGE.N    ??Search_BlackEdge_17
   \   00000306   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   00000308   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000030A   0x209F             MOVS     R0,#+159
   \   0000030C   0x.... 0x....      LDR.W    R1,??DataTable7_8
   \   00000310   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000314   0x5C30             LDRB     R0,[R6, R0]
   \   00000316   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   00000318   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000031A   0x219F             MOVS     R1,#+159
   \   0000031C   0x.... 0x....      LDR.W    R2,??DataTable7_8
   \   00000320   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   00000324   0x1871             ADDS     R1,R6,R1
   \   00000326   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   0000032A   0x1A40             SUBS     R0,R0,R1
   \   0000032C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000032E   0x.... 0x....      BL       f_abs16
   \   00000332   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   00000336   0x7809             LDRB     R1,[R1, #+0]
   \   00000338   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000033A   0x4288             CMP      R0,R1
   \   0000033C   0xDA57             BGE.N    ??Search_BlackEdge_17
   \   0000033E   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   00000340   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000342   0x209F             MOVS     R0,#+159
   \   00000344   0x.... 0x....      LDR.W    R1,??DataTable7_8
   \   00000348   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   0000034C   0x1830             ADDS     R0,R6,R0
   \   0000034E   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   00000352   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   00000354   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000356   0x219F             MOVS     R1,#+159
   \   00000358   0x.... 0x....      LDR.W    R2,??DataTable7_8
   \   0000035C   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   00000360   0x1871             ADDS     R1,R6,R1
   \   00000362   0xF811 0x1C02      LDRB     R1,[R1, #-2]
   \   00000366   0x1A40             SUBS     R0,R0,R1
   \   00000368   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000036A   0x.... 0x....      BL       f_abs16
   \   0000036E   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   00000372   0x7809             LDRB     R1,[R1, #+0]
   \   00000374   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000376   0x4288             CMP      R0,R1
   \   00000378   0xDA39             BGE.N    ??Search_BlackEdge_17
   \   0000037A   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   0000037C   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000037E   0x209F             MOVS     R0,#+159
   \   00000380   0x.... 0x....      LDR.W    R1,??DataTable7_8
   \   00000384   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000388   0x1830             ADDS     R0,R6,R0
   \   0000038A   0xF810 0x0C02      LDRB     R0,[R0, #-2]
   \   0000038E   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   00000390   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000392   0x219F             MOVS     R1,#+159
   \   00000394   0x.... 0x....      LDR.W    R2,??DataTable7_8
   \   00000398   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   0000039C   0x1871             ADDS     R1,R6,R1
   \   0000039E   0xF811 0x1C03      LDRB     R1,[R1, #-3]
   \   000003A2   0x1A40             SUBS     R0,R0,R1
   \   000003A4   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   000003A8   0x7809             LDRB     R1,[R1, #+0]
   \   000003AA   0x4288             CMP      R0,R1
   \   000003AC   0xDA1F             BGE.N    ??Search_BlackEdge_17
   \   000003AE   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000003B0   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   000003B4   0x1820             ADDS     R0,R4,R0
   \   000003B6   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   000003BA   0x1A30             SUBS     R0,R6,R0
   \   000003BC   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000003BE   0x.... 0x....      BL       f_abs16
   \   000003C2   0x0007             MOVS     R7,R0
   \   000003C4   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000003C6   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   000003CA   0x5C20             LDRB     R0,[R4, R0]
   \   000003CC   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000003CE   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   000003D2   0x1861             ADDS     R1,R4,R1
   \   000003D4   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000003D8   0x1A40             SUBS     R0,R0,R1
   \   000003DA   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000003DC   0x.... 0x....      BL       f_abs16
   \   000003E0   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   000003E2   0x4287             CMP      R7,R0
   \   000003E4   0xDA03             BGE.N    ??Search_BlackEdge_17
   \   000003E6   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000003E8   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   000003EC   0x5426             STRB     R6,[R4, R0]
   \                     ??Search_BlackEdge_17:
   \   000003EE   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000003F0   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   000003F4   0x5C20             LDRB     R0,[R4, R0]
   \   000003F6   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   000003FA   0x7809             LDRB     R1,[R1, #+0]
   \   000003FC   0x4288             CMP      R0,R1
   \   000003FE   0xD036             BEQ.N    ??Search_BlackEdge_18
   \   00000400   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000402   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   00000406   0x5C20             LDRB     R0,[R4, R0]
   \   00000408   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000040A   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   0000040E   0x1861             ADDS     R1,R4,R1
   \   00000410   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000414   0x1A40             SUBS     R0,R0,R1
   \   00000416   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000418   0x.... 0x....      BL       f_abs16
   \   0000041C   0x0007             MOVS     R7,R0
   \   0000041E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000420   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   00000424   0x1820             ADDS     R0,R4,R0
   \   00000426   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   0000042A   0x1A30             SUBS     R0,R6,R0
   \   0000042C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000042E   0x.... 0x....      BL       f_abs16
   \   00000432   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   00000434   0x4287             CMP      R7,R0
   \   00000436   0xDB19             BLT.N    ??Search_BlackEdge_19
   \   00000438   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000043A   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   0000043E   0x5C20             LDRB     R0,[R4, R0]
   \   00000440   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000442   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   00000446   0x1861             ADDS     R1,R4,R1
   \   00000448   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   0000044C   0x1A40             SUBS     R0,R0,R1
   \   0000044E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000450   0x.... 0x....      BL       f_abs16
   \   00000454   0x2805             CMP      R0,#+5
   \   00000456   0xDA0A             BGE.N    ??Search_BlackEdge_18
   \   00000458   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000045A   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   0000045E   0x1820             ADDS     R0,R4,R0
   \   00000460   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   00000464   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   00000466   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000468   0x4286             CMP      R6,R0
   \   0000046A   0xD100             BNE.N    ??Search_BlackEdge_18
   \                     ??Search_BlackEdge_19:
   \   0000046C   0xE025             B.N      ??Search_BlackEdge_16
   \                     ??Search_BlackEdge_18:
   \   0000046E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000470   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000474   0x1820             ADDS     R0,R4,R0
   \   00000476   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   0000047A   0x2801             CMP      R0,#+1
   \   0000047C   0xD008             BEQ.N    ??Search_BlackEdge_20
   \   0000047E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000480   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000484   0x1820             ADDS     R0,R4,R0
   \   00000486   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   0000048A   0x2802             CMP      R0,#+2
   \   0000048C   0xF47F 0xAF1F      BNE.W    ??Search_BlackEdge_15
   \                     ??Search_BlackEdge_20:
   \   00000490   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000492   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   00000496   0x1820             ADDS     R0,R4,R0
   \   00000498   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   0000049C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000049E   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000004A0   0x42B0             CMP      R0,R6
   \   000004A2   0xF6BF 0xAF14      BGE.W    ??Search_BlackEdge_15
   \   000004A6   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000004A8   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   000004AC   0x5C20             LDRB     R0,[R4, R0]
   \   000004AE   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   000004B2   0x7809             LDRB     R1,[R1, #+0]
   \   000004B4   0x4288             CMP      R0,R1
   \   000004B6   0xF43F 0xAF0A      BEQ.W    ??Search_BlackEdge_15
    780              }    //右边的while搜索结束
    781            
    782              if(j == COLUMN-2 && right_black[i] == hang_search_start)
   \                     ??Search_BlackEdge_16:
   \   000004BA   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000004BC   0x2E9D             CMP      R6,#+157
   \   000004BE   0xD12A             BNE.N    ??Search_BlackEdge_21
   \   000004C0   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000004C2   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   000004C6   0x5C20             LDRB     R0,[R4, R0]
   \   000004C8   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   000004CC   0x7809             LDRB     R1,[R1, #+0]
   \   000004CE   0x4288             CMP      R0,R1
   \   000004D0   0xD121             BNE.N    ??Search_BlackEdge_21
    783              {
    784                if( VideoImage1[i][j] - VideoImage1[i][j+1] > OT)
   \   000004D2   0x.... 0x....      LDR.W    R0,??DataTable7_7
   \   000004D6   0x7800             LDRB     R0,[R0, #+0]
   \   000004D8   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000004DA   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000004DC   0x219F             MOVS     R1,#+159
   \   000004DE   0x.... 0x....      LDR.W    R2,??DataTable7_8
   \   000004E2   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   000004E6   0x5C71             LDRB     R1,[R6, R1]
   \   000004E8   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000004EA   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000004EC   0x229F             MOVS     R2,#+159
   \   000004EE   0x.... 0x....      LDR.W    R3,??DataTable7_8
   \   000004F2   0xFB02 0x3204      MLA      R2,R2,R4,R3
   \   000004F6   0x18B2             ADDS     R2,R6,R2
   \   000004F8   0x7852             LDRB     R2,[R2, #+1]
   \   000004FA   0x1A89             SUBS     R1,R1,R2
   \   000004FC   0x4288             CMP      R0,R1
   \   000004FE   0xDA05             BGE.N    ??Search_BlackEdge_22
    785                   right_black[i] = COLUMN - 2 ;
   \   00000500   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000502   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   00000506   0x219D             MOVS     R1,#+157
   \   00000508   0x5421             STRB     R1,[R4, R0]
   \   0000050A   0xE004             B.N      ??Search_BlackEdge_21
    786                else
    787                   right_black[i] = COLUMN - 1 ;
   \                     ??Search_BlackEdge_22:
   \   0000050C   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000050E   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   00000512   0x219E             MOVS     R1,#+158
   \   00000514   0x5421             STRB     R1,[R4, R0]
    788              }
    789              ///////////////////////左右的搜索结束//////////////////////////
    790              
    791              
    792              //  /////////////赛道的状态标记开始////////////////////////////////
    793            if(i >= deal_start_line)//只是对处于控制区域的边界进行处理
   \                     ??Search_BlackEdge_21:
   \   00000516   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   0000051A   0x7800             LDRB     R0,[R0, #+0]
   \   0000051C   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000051E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000520   0x4284             CMP      R4,R0
   \   00000522   0xF2C0 0x81E8      BLT.W    ??Search_BlackEdge_23
    794              {    
    795                //当图像的边沿到达了边界的时候，判定为丢点      ---------------------丢点的第一次判断
    796                if((left_black[i] <= 1  || left_black[i] >= COLUMN-2 ) && right_black[i] >= 1 && right_black[i] <= COLUMN-2)
   \   00000526   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000528   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   0000052C   0x5C20             LDRB     R0,[R4, R0]
   \   0000052E   0x1E80             SUBS     R0,R0,#+2
   \   00000530   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000532   0x289B             CMP      R0,#+155
   \   00000534   0xD30D             BCC.N    ??Search_BlackEdge_24
   \   00000536   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000538   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   0000053C   0x5C20             LDRB     R0,[R4, R0]
   \   0000053E   0x1E40             SUBS     R0,R0,#+1
   \   00000540   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000542   0x289D             CMP      R0,#+157
   \   00000544   0xD205             BCS.N    ??Search_BlackEdge_24
    797                {
    798                     Row_state[i] =0;//左边丢点
   \   00000546   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000548   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   0000054C   0x2100             MOVS     R1,#+0
   \   0000054E   0x5421             STRB     R1,[R4, R0]
   \   00000550   0xE030             B.N      ??Search_BlackEdge_25
    799                }
    800                else if((left_black[i] >= 1 && left_black[i] <= COLUMN-2 ) && (right_black[i] <= 1 || right_black[i] >= COLUMN-2))
   \                     ??Search_BlackEdge_24:
   \   00000552   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000554   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   00000558   0x5C20             LDRB     R0,[R4, R0]
   \   0000055A   0x1E40             SUBS     R0,R0,#+1
   \   0000055C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000055E   0x289D             CMP      R0,#+157
   \   00000560   0xD20D             BCS.N    ??Search_BlackEdge_26
   \   00000562   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000564   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   00000568   0x5C20             LDRB     R0,[R4, R0]
   \   0000056A   0x1E80             SUBS     R0,R0,#+2
   \   0000056C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000056E   0x289B             CMP      R0,#+155
   \   00000570   0xD305             BCC.N    ??Search_BlackEdge_26
    801                {
    802                     Row_state[i] = 1;//右边丢点
   \   00000572   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000574   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000578   0x2101             MOVS     R1,#+1
   \   0000057A   0x5421             STRB     R1,[R4, R0]
   \   0000057C   0xE01A             B.N      ??Search_BlackEdge_25
    803                } 
    804                else if((left_black[i] <= 1 || left_black[i] >= COLUMN-2 ) && (right_black[i] <= 1 || right_black[i] >= COLUMN-2))
   \                     ??Search_BlackEdge_26:
   \   0000057E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000580   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   00000584   0x5C20             LDRB     R0,[R4, R0]
   \   00000586   0x1E80             SUBS     R0,R0,#+2
   \   00000588   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000058A   0x289B             CMP      R0,#+155
   \   0000058C   0xD30D             BCC.N    ??Search_BlackEdge_27
   \   0000058E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000590   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   00000594   0x5C20             LDRB     R0,[R4, R0]
   \   00000596   0x1E80             SUBS     R0,R0,#+2
   \   00000598   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000059A   0x289B             CMP      R0,#+155
   \   0000059C   0xD305             BCC.N    ??Search_BlackEdge_27
    805                {
    806                     Row_state[i] = 2;//两边都边丢点
   \   0000059E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000005A0   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   000005A4   0x2102             MOVS     R1,#+2
   \   000005A6   0x5421             STRB     R1,[R4, R0]
   \   000005A8   0xE004             B.N      ??Search_BlackEdge_25
    807                }
    808                else
    809                {
    810                     Row_state[i] = 3;//两边都边没有丢点
   \                     ??Search_BlackEdge_27:
   \   000005AA   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000005AC   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   000005B0   0x2103             MOVS     R1,#+3
   \   000005B2   0x5421             STRB     R1,[R4, R0]
    811                }
    812                
    813                  //对两边沿线的状态进行判断//---------------------------丢点的第二次判断
    814                //注意这里的判断必须要分两种情况一个是跳变点的状态，其次是前一行的状态（前一行的状态的不同需要作出不同的处理），
    815                if((right_black[i] - left_black[i])-(right_black[i-1] - left_black[i-1])> 8)//  若是3的话可能出现误判//这里采用绝对值限制是为了防止噪点
   \                     ??Search_BlackEdge_25:
   \   000005B4   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000005B6   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   000005BA   0x5C20             LDRB     R0,[R4, R0]
   \   000005BC   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000005BE   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   000005C2   0x5C61             LDRB     R1,[R4, R1]
   \   000005C4   0x1A40             SUBS     R0,R0,R1
   \   000005C6   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000005C8   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   000005CC   0x1861             ADDS     R1,R4,R1
   \   000005CE   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000005D2   0x1A40             SUBS     R0,R0,R1
   \   000005D4   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000005D6   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   000005DA   0x1861             ADDS     R1,R4,R1
   \   000005DC   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000005E0   0xFA50 0xF081      UXTAB    R0,R0,R1
   \   000005E4   0x2809             CMP      R0,#+9
   \   000005E6   0xF2C0 0x8096      BLT.W    ??Search_BlackEdge_28
    816                {
    817                   if(( f_abs16(left_black[i] - left_black[i-1]) < f_abs16(right_black[i] - right_black[i-1]))
    818                      && f_abs16(left_black[i] - left_black[i-1]) <= 4)//左边的突变小于右边的  说明右边的点发生了突变
   \   000005EA   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000005EC   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   000005F0   0x5C20             LDRB     R0,[R4, R0]
   \   000005F2   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000005F4   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   000005F8   0x1861             ADDS     R1,R4,R1
   \   000005FA   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000005FE   0x1A40             SUBS     R0,R0,R1
   \   00000600   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000602   0x.... 0x....      BL       f_abs16
   \   00000606   0x0006             MOVS     R6,R0
   \   00000608   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000060A   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   0000060E   0x5C20             LDRB     R0,[R4, R0]
   \   00000610   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000612   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   00000616   0x1861             ADDS     R1,R4,R1
   \   00000618   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   0000061C   0x1A40             SUBS     R0,R0,R1
   \   0000061E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000620   0x.... 0x....      BL       f_abs16
   \   00000624   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   00000626   0x4286             CMP      R6,R0
   \   00000628   0xDA27             BGE.N    ??Search_BlackEdge_29
   \   0000062A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000062C   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   00000630   0x5C20             LDRB     R0,[R4, R0]
   \   00000632   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000634   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   00000638   0x1861             ADDS     R1,R4,R1
   \   0000063A   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   0000063E   0x1A40             SUBS     R0,R0,R1
   \   00000640   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000642   0x.... 0x....      BL       f_abs16
   \   00000646   0x2805             CMP      R0,#+5
   \   00000648   0xDA17             BGE.N    ??Search_BlackEdge_29
    819                   {
    820                     if(Row_state[i] == 0 ||Row_state[i] == 2)//对于第一次进行一个判断
   \   0000064A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000064C   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000650   0x5C20             LDRB     R0,[R4, R0]
   \   00000652   0x2800             CMP      R0,#+0
   \   00000654   0xD005             BEQ.N    ??Search_BlackEdge_30
   \   00000656   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000658   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   0000065C   0x5C20             LDRB     R0,[R4, R0]
   \   0000065E   0x2802             CMP      R0,#+2
   \   00000660   0xD105             BNE.N    ??Search_BlackEdge_31
    821                        Row_state[i] = 2;
   \                     ??Search_BlackEdge_30:
   \   00000662   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000664   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000668   0x2102             MOVS     R1,#+2
   \   0000066A   0x5421             STRB     R1,[R4, R0]
   \   0000066C   0xE0C6             B.N      ??Search_BlackEdge_32
    822                     else //if(Row_state[i] == 1 ||Row_state[i] == 3)
    823                     {
    824                       Row_state[i] = 1;//1表示的是只有右边丢点
   \                     ??Search_BlackEdge_31:
   \   0000066E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000670   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000674   0x2101             MOVS     R1,#+1
   \   00000676   0x5421             STRB     R1,[R4, R0]
   \   00000678   0xE0C0             B.N      ??Search_BlackEdge_32
    825                     }
    826                   } 
    827                  else if(( f_abs16(left_black[i] - left_black[i-1]) > f_abs16(right_black[i] - right_black[i-1]))
    828                      && f_abs16(right_black[i] - right_black[i-1]) <= 4)//左边的突变小于右边的  说明右边的点发生了突变
   \                     ??Search_BlackEdge_29:
   \   0000067A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000067C   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   00000680   0x5C20             LDRB     R0,[R4, R0]
   \   00000682   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000684   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   00000688   0x1861             ADDS     R1,R4,R1
   \   0000068A   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   0000068E   0x1A40             SUBS     R0,R0,R1
   \   00000690   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000692   0x.... 0x....      BL       f_abs16
   \   00000696   0x0006             MOVS     R6,R0
   \   00000698   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000069A   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   0000069E   0x5C20             LDRB     R0,[R4, R0]
   \   000006A0   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000006A2   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   000006A6   0x1861             ADDS     R1,R4,R1
   \   000006A8   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000006AC   0x1A40             SUBS     R0,R0,R1
   \   000006AE   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000006B0   0x.... 0x....      BL       f_abs16
   \   000006B4   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000006B6   0x4286             CMP      R6,R0
   \   000006B8   0xDA27             BGE.N    ??Search_BlackEdge_33
   \   000006BA   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000006BC   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   000006C0   0x5C20             LDRB     R0,[R4, R0]
   \   000006C2   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000006C4   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   000006C8   0x1861             ADDS     R1,R4,R1
   \   000006CA   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000006CE   0x1A40             SUBS     R0,R0,R1
   \   000006D0   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000006D2   0x.... 0x....      BL       f_abs16
   \   000006D6   0x2805             CMP      R0,#+5
   \   000006D8   0xDA17             BGE.N    ??Search_BlackEdge_33
    829                   {
    830                     if(Row_state[i] == 1||Row_state[i] == 2)//对于第一次进行一个判断
   \   000006DA   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000006DC   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   000006E0   0x5C20             LDRB     R0,[R4, R0]
   \   000006E2   0x2801             CMP      R0,#+1
   \   000006E4   0xD005             BEQ.N    ??Search_BlackEdge_34
   \   000006E6   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000006E8   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   000006EC   0x5C20             LDRB     R0,[R4, R0]
   \   000006EE   0x2802             CMP      R0,#+2
   \   000006F0   0xD105             BNE.N    ??Search_BlackEdge_35
    831                        Row_state[i] = 2;//0表示的是左边丢点,而右边没有丢点
   \                     ??Search_BlackEdge_34:
   \   000006F2   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000006F4   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   000006F8   0x2102             MOVS     R1,#+2
   \   000006FA   0x5421             STRB     R1,[R4, R0]
   \   000006FC   0xE07E             B.N      ??Search_BlackEdge_32
    832                     else
    833                        Row_state[i] = 0;//0表示的是只有左边丢点
   \                     ??Search_BlackEdge_35:
   \   000006FE   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000700   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000704   0x2100             MOVS     R1,#+0
   \   00000706   0x5421             STRB     R1,[R4, R0]
   \   00000708   0xE078             B.N      ??Search_BlackEdge_32
    834                   }
    835                   else 
    836                   {
    837                     Row_state[i] = 2;//2表示的是两边都丢点
   \                     ??Search_BlackEdge_33:
   \   0000070A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000070C   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000710   0x2102             MOVS     R1,#+2
   \   00000712   0x5421             STRB     R1,[R4, R0]
   \   00000714   0xE072             B.N      ??Search_BlackEdge_32
    838                   }
    839                }
    840                else 
    841                {
    842                  if(Row_state[i-1] == 0)//左边丢点
   \                     ??Search_BlackEdge_28:
   \   00000716   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000718   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   0000071C   0x1820             ADDS     R0,R4,R0
   \   0000071E   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   00000722   0x2800             CMP      R0,#+0
   \   00000724   0xD131             BNE.N    ??Search_BlackEdge_36
    843                  {
    844                    if((right_black[i] - left_black[i]) - (right_black[un_lost_hang] - left_black[un_lost_hang]) > 6)
   \   00000726   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000728   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   0000072C   0x5C20             LDRB     R0,[R4, R0]
   \   0000072E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000730   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   00000734   0x5C61             LDRB     R1,[R4, R1]
   \   00000736   0x1A40             SUBS     R0,R0,R1
   \   00000738   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   0000073A   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   0000073E   0x5C69             LDRB     R1,[R5, R1]
   \   00000740   0x1A40             SUBS     R0,R0,R1
   \   00000742   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000744   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   00000748   0x5C69             LDRB     R1,[R5, R1]
   \   0000074A   0x1840             ADDS     R0,R0,R1
   \   0000074C   0x2807             CMP      R0,#+7
   \   0000074E   0xDB55             BLT.N    ??Search_BlackEdge_32
    845                    {
    846                      if(Row_state[i] == 1 ||Row_state[i] == 2)
   \   00000750   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000752   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000756   0x5C20             LDRB     R0,[R4, R0]
   \   00000758   0x2801             CMP      R0,#+1
   \   0000075A   0xD005             BEQ.N    ??Search_BlackEdge_37
   \   0000075C   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000075E   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000762   0x5C20             LDRB     R0,[R4, R0]
   \   00000764   0x2802             CMP      R0,#+2
   \   00000766   0xD104             BNE.N    ??Search_BlackEdge_38
    847                      {
    848                        Row_state[i] = 2;
   \                     ??Search_BlackEdge_37:
   \   00000768   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000076A   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   0000076E   0x2102             MOVS     R1,#+2
   \   00000770   0x5421             STRB     R1,[R4, R0]
    849                      }
    850                      if(Row_state[i] == 3)
   \                     ??Search_BlackEdge_38:
   \   00000772   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000774   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000778   0x5C20             LDRB     R0,[R4, R0]
   \   0000077A   0x2803             CMP      R0,#+3
   \   0000077C   0xD13E             BNE.N    ??Search_BlackEdge_32
    851                      {
    852                        Row_state[i] = 0;
   \   0000077E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000780   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000784   0x2100             MOVS     R1,#+0
   \   00000786   0x5421             STRB     R1,[R4, R0]
   \   00000788   0xE038             B.N      ??Search_BlackEdge_32
    853                      }
    854                    }
    855                  }
    856                  
    857                 else if(Row_state[i-1] == 1)//左边丢点
   \                     ??Search_BlackEdge_36:
   \   0000078A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000078C   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000790   0x1820             ADDS     R0,R4,R0
   \   00000792   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   00000796   0x2801             CMP      R0,#+1
   \   00000798   0xD130             BNE.N    ??Search_BlackEdge_32
    858                  {
    859                    if((right_black[i] - left_black[i]) - (right_black[un_lost_hang] - left_black[un_lost_hang]) > 6)
   \   0000079A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000079C   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   000007A0   0x5C20             LDRB     R0,[R4, R0]
   \   000007A2   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000007A4   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   000007A8   0x5C61             LDRB     R1,[R4, R1]
   \   000007AA   0x1A40             SUBS     R0,R0,R1
   \   000007AC   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   000007AE   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   000007B2   0x5C69             LDRB     R1,[R5, R1]
   \   000007B4   0x1A40             SUBS     R0,R0,R1
   \   000007B6   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   000007B8   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   000007BC   0x5C69             LDRB     R1,[R5, R1]
   \   000007BE   0x1840             ADDS     R0,R0,R1
   \   000007C0   0x2807             CMP      R0,#+7
   \   000007C2   0xDB1B             BLT.N    ??Search_BlackEdge_32
    860                    {
    861                      if(Row_state[i] == 0 ||Row_state[i] == 2)
   \   000007C4   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000007C6   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   000007CA   0x5C20             LDRB     R0,[R4, R0]
   \   000007CC   0x2800             CMP      R0,#+0
   \   000007CE   0xD005             BEQ.N    ??Search_BlackEdge_39
   \   000007D0   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000007D2   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   000007D6   0x5C20             LDRB     R0,[R4, R0]
   \   000007D8   0x2802             CMP      R0,#+2
   \   000007DA   0xD104             BNE.N    ??Search_BlackEdge_40
    862                      {
    863                        Row_state[i] = 2;
   \                     ??Search_BlackEdge_39:
   \   000007DC   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000007DE   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   000007E2   0x2102             MOVS     R1,#+2
   \   000007E4   0x5421             STRB     R1,[R4, R0]
    864                      }
    865                     if(Row_state[i] == 3)
   \                     ??Search_BlackEdge_40:
   \   000007E6   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000007E8   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   000007EC   0x5C20             LDRB     R0,[R4, R0]
   \   000007EE   0x2803             CMP      R0,#+3
   \   000007F0   0xD104             BNE.N    ??Search_BlackEdge_32
    866                       Row_state[i] = 1;
   \   000007F2   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000007F4   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   000007F8   0x2101             MOVS     R1,#+1
   \   000007FA   0x5421             STRB     R1,[R4, R0]
    867                    }
    868                  }
    869                }
    870                
    871              //记录最近的都没有丢点的行
    872                if( Row_state[i] == 3)
   \                     ??Search_BlackEdge_32:
   \   000007FC   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000007FE   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000802   0x5C20             LDRB     R0,[R4, R0]
   \   00000804   0x2803             CMP      R0,#+3
   \   00000806   0xD100             BNE.N    ??Search_BlackEdge_41
    873                {
    874                  un_lost_hang = i;
   \   00000808   0x0025             MOVS     R5,R4
    875                }
    876                ////////////左右边沿标记结束/////////////////////////
    877                
    878                //前面对赛道进行了状态的判断，这里做出初步的拟合
    879                if(Row_state[i] == 0)  //左边丢点
   \                     ??Search_BlackEdge_41:
   \   0000080A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000080C   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000810   0x5C20             LDRB     R0,[R4, R0]
   \   00000812   0x2800             CMP      R0,#+0
   \   00000814   0xD12C             BNE.N    ??Search_BlackEdge_42
    880                {
    881                  if(right_black[i]- (right_black[i-1] - left_black[i-1]) <= 0 )//限幅
   \   00000816   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000818   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   0000081C   0x5C20             LDRB     R0,[R4, R0]
   \   0000081E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000820   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   00000824   0x1861             ADDS     R1,R4,R1
   \   00000826   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   0000082A   0x1A40             SUBS     R0,R0,R1
   \   0000082C   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000082E   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   00000832   0x1861             ADDS     R1,R4,R1
   \   00000834   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000838   0xFA50 0xF081      UXTAB    R0,R0,R1
   \   0000083C   0x2801             CMP      R0,#+1
   \   0000083E   0xDA04             BGE.N    ??Search_BlackEdge_43
    882                    left_black[i]=0;
   \   00000840   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000842   0x....             LDR.N    R0,??DataTable7_6
   \   00000844   0x2100             MOVS     R1,#+0
   \   00000846   0x5421             STRB     R1,[R4, R0]
   \   00000848   0xE055             B.N      ??Search_BlackEdge_23
    883                  else
    884                  left_black[i] = right_black[i] - (right_black[i-1] - left_black[i-1]);//加上1是由于下向上图像在宽度在减小的原因
   \                     ??Search_BlackEdge_43:
   \   0000084A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000084C   0x....             LDR.N    R0,??DataTable7_9
   \   0000084E   0x5C20             LDRB     R0,[R4, R0]
   \   00000850   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000852   0x....             LDR.N    R1,??DataTable7_9
   \   00000854   0x1861             ADDS     R1,R4,R1
   \   00000856   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   0000085A   0x1A40             SUBS     R0,R0,R1
   \   0000085C   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000085E   0x....             LDR.N    R1,??DataTable7_6
   \   00000860   0x1861             ADDS     R1,R4,R1
   \   00000862   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000866   0x1808             ADDS     R0,R1,R0
   \   00000868   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000086A   0x....             LDR.N    R1,??DataTable7_6
   \   0000086C   0x5460             STRB     R0,[R4, R1]
   \   0000086E   0xE042             B.N      ??Search_BlackEdge_23
    885                }      
    886                else if(Row_state[i] == 1)
   \                     ??Search_BlackEdge_42:
   \   00000870   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000872   0x....             LDR.N    R0,??DataTable7_5
   \   00000874   0x5C20             LDRB     R0,[R4, R0]
   \   00000876   0x2801             CMP      R0,#+1
   \   00000878   0xD128             BNE.N    ??Search_BlackEdge_44
    887                {
    888                  if(left_black[i] + (right_black[i-1] - left_black[i-1]) >= COLUMN-1)
   \   0000087A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000087C   0x....             LDR.N    R0,??DataTable7_6
   \   0000087E   0x5C20             LDRB     R0,[R4, R0]
   \   00000880   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000882   0x....             LDR.N    R1,??DataTable7_9
   \   00000884   0x1861             ADDS     R1,R4,R1
   \   00000886   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   0000088A   0x1808             ADDS     R0,R1,R0
   \   0000088C   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000088E   0x....             LDR.N    R1,??DataTable7_6
   \   00000890   0x1861             ADDS     R1,R4,R1
   \   00000892   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000896   0x1A40             SUBS     R0,R0,R1
   \   00000898   0x289E             CMP      R0,#+158
   \   0000089A   0xDB04             BLT.N    ??Search_BlackEdge_45
    889                    right_black[i] = COLUMN-1;   
   \   0000089C   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000089E   0x....             LDR.N    R0,??DataTable7_9
   \   000008A0   0x219E             MOVS     R1,#+158
   \   000008A2   0x5421             STRB     R1,[R4, R0]
   \   000008A4   0xE027             B.N      ??Search_BlackEdge_23
    890                  else
    891                    right_black[i] = left_black[i] + (right_black[i-1] - left_black[i-1]);//
   \                     ??Search_BlackEdge_45:
   \   000008A6   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000008A8   0x....             LDR.N    R0,??DataTable7_6
   \   000008AA   0x5C20             LDRB     R0,[R4, R0]
   \   000008AC   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000008AE   0x....             LDR.N    R1,??DataTable7_9
   \   000008B0   0x1861             ADDS     R1,R4,R1
   \   000008B2   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000008B6   0x1808             ADDS     R0,R1,R0
   \   000008B8   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000008BA   0x....             LDR.N    R1,??DataTable7_6
   \   000008BC   0x1861             ADDS     R1,R4,R1
   \   000008BE   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000008C2   0x1A40             SUBS     R0,R0,R1
   \   000008C4   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000008C6   0x....             LDR.N    R1,??DataTable7_9
   \   000008C8   0x5460             STRB     R0,[R4, R1]
   \   000008CA   0xE014             B.N      ??Search_BlackEdge_23
    892                }
    893                else if(Row_state[i] == 2)
   \                     ??Search_BlackEdge_44:
   \   000008CC   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000008CE   0x....             LDR.N    R0,??DataTable7_5
   \   000008D0   0x5C20             LDRB     R0,[R4, R0]
   \   000008D2   0x2802             CMP      R0,#+2
   \   000008D4   0xD10F             BNE.N    ??Search_BlackEdge_23
    894                {
    895                   left_black[i] = left_black[i-1];
   \   000008D6   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000008D8   0x....             LDR.N    R0,??DataTable7_6
   \   000008DA   0x1820             ADDS     R0,R4,R0
   \   000008DC   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   000008E0   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000008E2   0x....             LDR.N    R1,??DataTable7_6
   \   000008E4   0x5460             STRB     R0,[R4, R1]
    896                   right_black[i] = right_black[i-1];
   \   000008E6   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000008E8   0x....             LDR.N    R0,??DataTable7_9
   \   000008EA   0x1820             ADDS     R0,R4,R0
   \   000008EC   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   000008F0   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000008F2   0x....             LDR.N    R1,??DataTable7_9
   \   000008F4   0x5460             STRB     R0,[R4, R1]
    897                 }
    898              } 
    899              
    900              
    901              hang_search_start = (right_black[i] + left_black[i])/2; 
   \                     ??Search_BlackEdge_23:
   \   000008F6   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000008F8   0x....             LDR.N    R0,??DataTable7_9
   \   000008FA   0x5C20             LDRB     R0,[R4, R0]
   \   000008FC   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000008FE   0x....             LDR.N    R1,??DataTable7_6
   \   00000900   0x5C61             LDRB     R1,[R4, R1]
   \   00000902   0x1808             ADDS     R0,R1,R0
   \   00000904   0x2102             MOVS     R1,#+2
   \   00000906   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000090A   0x....             LDR.N    R1,??DataTable7_3
   \   0000090C   0x7008             STRB     R0,[R1, #+0]
    902              //////////////////左右的处理结束///////////////////////////// 
    903              
    904              ///对最高有效行的判断/////////////判断一//////////////////
    905          
    906          
    907              if( i> 20 &&i<=top_whiteline && right_black[i] -  left_black[i] < 3*(ROW-i)/5+ WHITE_TOP_WHITELINE_POINT 
    908                 && (right_black[i-1] -  left_black[i-1]) <  3*(ROW-i)/5 + WHITE_TOP_WHITELINE_POINT 
    909                 ) //只判定一次&& top_whiteline >= ROW-1
   \   0000090E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000910   0x2C15             CMP      R4,#+21
   \   00000912   0xDB2F             BLT.N    ??Search_BlackEdge_46
   \   00000914   0x....             LDR.N    R0,??DataTable7_2
   \   00000916   0x7800             LDRB     R0,[R0, #+0]
   \   00000918   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000091A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000091C   0x42A0             CMP      R0,R4
   \   0000091E   0xDB29             BLT.N    ??Search_BlackEdge_46
   \   00000920   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000922   0xF1D4 0x0041      RSBS     R0,R4,#+65
   \   00000926   0x2103             MOVS     R1,#+3
   \   00000928   0x4348             MULS     R0,R1,R0
   \   0000092A   0x2105             MOVS     R1,#+5
   \   0000092C   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000930   0x3014             ADDS     R0,R0,#+20
   \   00000932   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000934   0x....             LDR.N    R1,??DataTable7_9
   \   00000936   0x5C61             LDRB     R1,[R4, R1]
   \   00000938   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000093A   0x....             LDR.N    R2,??DataTable7_6
   \   0000093C   0x5CA2             LDRB     R2,[R4, R2]
   \   0000093E   0x1A89             SUBS     R1,R1,R2
   \   00000940   0x4281             CMP      R1,R0
   \   00000942   0xDA17             BGE.N    ??Search_BlackEdge_46
   \   00000944   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000946   0xF1D4 0x0041      RSBS     R0,R4,#+65
   \   0000094A   0x2103             MOVS     R1,#+3
   \   0000094C   0x4348             MULS     R0,R1,R0
   \   0000094E   0x2105             MOVS     R1,#+5
   \   00000950   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000954   0x3014             ADDS     R0,R0,#+20
   \   00000956   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000958   0x....             LDR.N    R1,??DataTable7_9
   \   0000095A   0x1861             ADDS     R1,R4,R1
   \   0000095C   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000960   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000962   0x....             LDR.N    R2,??DataTable7_6
   \   00000964   0x18A2             ADDS     R2,R4,R2
   \   00000966   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \   0000096A   0x1A89             SUBS     R1,R1,R2
   \   0000096C   0x4281             CMP      R1,R0
   \   0000096E   0xDA01             BGE.N    ??Search_BlackEdge_46
    910              { 
    911               // if(i<ROW-1) while(1){}
    912                top_whiteline = i;
   \   00000970   0x....             LDR.N    R0,??DataTable7_2
   \   00000972   0x7004             STRB     R4,[R0, #+0]
    913              }
    914              /////////////////////判断二////////////////////////
    915              center_white[i] = (right_black[i] + left_black[i])/2; 
   \                     ??Search_BlackEdge_46:
   \   00000974   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000976   0x....             LDR.N    R0,??DataTable7_9
   \   00000978   0x5C20             LDRB     R0,[R4, R0]
   \   0000097A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000097C   0x....             LDR.N    R1,??DataTable7_6
   \   0000097E   0x5C61             LDRB     R1,[R4, R1]
   \   00000980   0x1808             ADDS     R0,R1,R0
   \   00000982   0x2102             MOVS     R1,#+2
   \   00000984   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000988   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000098A   0x.... 0x....      LDR.W    R1,??DataTable8
   \   0000098E   0x5460             STRB     R0,[R4, R1]
    916              if(i>10 && i < ROW-1 &&top_whiteline >= ROW-1 &&( VideoImage2[i-1][center_white[i]] - VideoImage2[i+1][center_white[i]] > OT - 10) 
    917                 &&  VideoImage2[i-1][center_white[i]-1] - VideoImage2[i+1][center_white[i]-1] > OT - 10
    918                        &&  VideoImage2[i-1][center_white[i]+1] - VideoImage2[i + 1][center_white[i]+1] > OT - 10 )  //最高行的判断用原始图像
   \   00000990   0xF1B4 0x000B      SUBS     R0,R4,#+11
   \   00000994   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000996   0x2835             CMP      R0,#+53
   \   00000998   0xF4BF 0xAB5D      BCS.W    ??Search_BlackEdge_3
   \   0000099C   0x....             LDR.N    R0,??DataTable7_2
   \   0000099E   0x7800             LDRB     R0,[R0, #+0]
   \   000009A0   0x2840             CMP      R0,#+64
   \   000009A2   0xF4FF 0xAB58      BCC.W    ??Search_BlackEdge_3
   \   000009A6   0x....             LDR.N    R0,??DataTable7_7
   \   000009A8   0x7800             LDRB     R0,[R0, #+0]
   \   000009AA   0x380A             SUBS     R0,R0,#+10
   \   000009AC   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000009AE   0x.... 0x....      LDR.W    R1,??DataTable8
   \   000009B2   0x5C61             LDRB     R1,[R4, R1]
   \   000009B4   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000009B6   0x229F             MOVS     R2,#+159
   \   000009B8   0x.... 0x....      LDR.W    R3,??DataTable8_1
   \   000009BC   0xFB02 0x3204      MLA      R2,R2,R4,R3
   \   000009C0   0x1889             ADDS     R1,R1,R2
   \   000009C2   0xF811 0x1C9F      LDRB     R1,[R1, #-159]
   \   000009C6   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000009C8   0x.... 0x....      LDR.W    R2,??DataTable8
   \   000009CC   0x5CA2             LDRB     R2,[R4, R2]
   \   000009CE   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000009D0   0x239F             MOVS     R3,#+159
   \   000009D2   0x.... 0x....      LDR.W    R6,??DataTable8_1
   \   000009D6   0xFB03 0x6304      MLA      R3,R3,R4,R6
   \   000009DA   0x18D2             ADDS     R2,R2,R3
   \   000009DC   0xF892 0x209F      LDRB     R2,[R2, #+159]
   \   000009E0   0x1A89             SUBS     R1,R1,R2
   \   000009E2   0x4288             CMP      R0,R1
   \   000009E4   0xF6BF 0xAB37      BGE.W    ??Search_BlackEdge_3
   \   000009E8   0x....             LDR.N    R0,??DataTable7_7
   \   000009EA   0x7800             LDRB     R0,[R0, #+0]
   \   000009EC   0x380A             SUBS     R0,R0,#+10
   \   000009EE   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000009F0   0x.... 0x....      LDR.W    R1,??DataTable8
   \   000009F4   0x5C61             LDRB     R1,[R4, R1]
   \   000009F6   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000009F8   0x229F             MOVS     R2,#+159
   \   000009FA   0x.... 0x....      LDR.W    R3,??DataTable8_1
   \   000009FE   0xFB02 0x3204      MLA      R2,R2,R4,R3
   \   00000A02   0x1889             ADDS     R1,R1,R2
   \   00000A04   0xF811 0x1CA0      LDRB     R1,[R1, #-160]
   \   00000A08   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000A0A   0x.... 0x....      LDR.W    R2,??DataTable8
   \   00000A0E   0x5CA2             LDRB     R2,[R4, R2]
   \   00000A10   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000A12   0x239F             MOVS     R3,#+159
   \   00000A14   0x.... 0x....      LDR.W    R6,??DataTable8_1
   \   00000A18   0xFB03 0x6304      MLA      R3,R3,R4,R6
   \   00000A1C   0x18D2             ADDS     R2,R2,R3
   \   00000A1E   0xF892 0x209E      LDRB     R2,[R2, #+158]
   \   00000A22   0x1A89             SUBS     R1,R1,R2
   \   00000A24   0x4288             CMP      R0,R1
   \   00000A26   0xF6BF 0xAB16      BGE.W    ??Search_BlackEdge_3
   \   00000A2A   0x....             LDR.N    R0,??DataTable7_7
   \   00000A2C   0x7800             LDRB     R0,[R0, #+0]
   \   00000A2E   0x380A             SUBS     R0,R0,#+10
   \   00000A30   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000A32   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000A36   0x5C61             LDRB     R1,[R4, R1]
   \   00000A38   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000A3A   0x229F             MOVS     R2,#+159
   \   00000A3C   0x.... 0x....      LDR.W    R3,??DataTable8_1
   \   00000A40   0xFB02 0x3204      MLA      R2,R2,R4,R3
   \   00000A44   0x1889             ADDS     R1,R1,R2
   \   00000A46   0xF811 0x1C9E      LDRB     R1,[R1, #-158]
   \   00000A4A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000A4C   0x.... 0x....      LDR.W    R2,??DataTable8
   \   00000A50   0x5CA2             LDRB     R2,[R4, R2]
   \   00000A52   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000A54   0x239F             MOVS     R3,#+159
   \   00000A56   0x.... 0x....      LDR.W    R6,??DataTable8_1
   \   00000A5A   0xFB03 0x6304      MLA      R3,R3,R4,R6
   \   00000A5E   0x18D2             ADDS     R2,R2,R3
   \   00000A60   0xF892 0x20A0      LDRB     R2,[R2, #+160]
   \   00000A64   0x1A89             SUBS     R1,R1,R2
   \   00000A66   0x4288             CMP      R0,R1
   \   00000A68   0xF6BF 0xAAF5      BGE.W    ??Search_BlackEdge_3
    919              {
    920                //用这种方式有一个弊端就是，图像存在一个突变，无法真实的反应赛道，特别是60度和50度弯道的微小差别，这里对其经行修补
    921                 top_whiteline = i-1;
   \   00000A6C   0x0020             MOVS     R0,R4
   \   00000A6E   0x1E40             SUBS     R0,R0,#+1
   \   00000A70   0x....             LDR.N    R1,??DataTable7_2
   \   00000A72   0x7008             STRB     R0,[R1, #+0]
    922                for( n = top_whiteline; n >  top_whiteline - 7;n--)
   \   00000A74   0x....             LDR.N    R0,??DataTable7_2
   \   00000A76   0x7800             LDRB     R0,[R0, #+0]
   \   00000A78   0xE022             B.N      ??Search_BlackEdge_47
    923                {
    924                  if(left_black[n] <= 1)
    925                  {
    926                    for( k = n; k <= top_whiteline ; k++)
    927                    {
    928                       left_black[k] = 0;
    929                       //进行规划后的行的状态需要重新的定义
    930                     if(Row_state[k] == 1 ||Row_state[k] == 2)
    931                      {
    932                        Row_state[k] = 2;
    933                      }
    934                      if(Row_state[k] == 3)
    935                      {
    936                        Row_state[k] = 0;
    937                      }
    938                    }
    939                  //  break;  //这里还不能用break。因为有的时候可能会有一个点跳出来了。如 0 1 0 0 0
    940                  }
    941                  else if(right_black[n] >= COLUMN-2)
    942                  {
    943                    for( k = n; k <= top_whiteline ; k++)
    944                    {
    945                       right_black[k] = COLUMN-1;
   \                     ??Search_BlackEdge_48:
   \   00000A7A   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000A7C   0x....             LDR.N    R2,??DataTable7_9
   \   00000A7E   0x239E             MOVS     R3,#+158
   \   00000A80   0x548B             STRB     R3,[R1, R2]
    946                       
    947                     if(Row_state[k] == 0 ||Row_state[k] == 2)
   \   00000A82   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000A84   0x....             LDR.N    R2,??DataTable7_5
   \   00000A86   0x5C8A             LDRB     R2,[R1, R2]
   \   00000A88   0x2A00             CMP      R2,#+0
   \   00000A8A   0xD004             BEQ.N    ??Search_BlackEdge_49
   \   00000A8C   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000A8E   0x....             LDR.N    R2,??DataTable7_5
   \   00000A90   0x5C8A             LDRB     R2,[R1, R2]
   \   00000A92   0x2A02             CMP      R2,#+2
   \   00000A94   0xD103             BNE.N    ??Search_BlackEdge_50
    948                      {
    949                        Row_state[k] = 2;
   \                     ??Search_BlackEdge_49:
   \   00000A96   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000A98   0x....             LDR.N    R2,??DataTable7_5
   \   00000A9A   0x2302             MOVS     R3,#+2
   \   00000A9C   0x548B             STRB     R3,[R1, R2]
    950                      }
    951                      if(Row_state[k] == 3)
   \                     ??Search_BlackEdge_50:
   \   00000A9E   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000AA0   0x....             LDR.N    R2,??DataTable7_5
   \   00000AA2   0x5C8A             LDRB     R2,[R1, R2]
   \   00000AA4   0x2A03             CMP      R2,#+3
   \   00000AA6   0xD103             BNE.N    ??Search_BlackEdge_51
    952                      {
    953                        Row_state[k] = 1;
   \   00000AA8   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000AAA   0x....             LDR.N    R2,??DataTable7_5
   \   00000AAC   0x2301             MOVS     R3,#+1
   \   00000AAE   0x548B             STRB     R3,[R1, R2]
    954                      }
    955                    }
   \                     ??Search_BlackEdge_51:
   \   00000AB0   0x1C49             ADDS     R1,R1,#+1
   \                     ??Search_BlackEdge_52:
   \   00000AB2   0x....             LDR.N    R2,??DataTable7_2
   \   00000AB4   0x7812             LDRB     R2,[R2, #+0]
   \   00000AB6   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000AB8   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000ABA   0x428A             CMP      R2,R1
   \   00000ABC   0xDADD             BGE.N    ??Search_BlackEdge_48
   \                     ??Search_BlackEdge_53:
   \   00000ABE   0x1E40             SUBS     R0,R0,#+1
   \                     ??Search_BlackEdge_47:
   \   00000AC0   0x....             LDR.N    R1,??DataTable7_2
   \   00000AC2   0x7809             LDRB     R1,[R1, #+0]
   \   00000AC4   0x1FC9             SUBS     R1,R1,#+7
   \   00000AC6   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000AC8   0x4281             CMP      R1,R0
   \   00000ACA   0xF6BF 0xAAC4      BGE.W    ??Search_BlackEdge_3
   \   00000ACE   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000AD0   0x....             LDR.N    R1,??DataTable7_6
   \   00000AD2   0x5C41             LDRB     R1,[R0, R1]
   \   00000AD4   0x2902             CMP      R1,#+2
   \   00000AD6   0xD223             BCS.N    ??Search_BlackEdge_54
   \   00000AD8   0x0001             MOVS     R1,R0
   \                     ??Search_BlackEdge_55:
   \   00000ADA   0x....             LDR.N    R2,??DataTable7_2
   \   00000ADC   0x7812             LDRB     R2,[R2, #+0]
   \   00000ADE   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000AE0   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000AE2   0x428A             CMP      R2,R1
   \   00000AE4   0xDBEB             BLT.N    ??Search_BlackEdge_53
   \   00000AE6   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000AE8   0x....             LDR.N    R2,??DataTable7_6
   \   00000AEA   0x2300             MOVS     R3,#+0
   \   00000AEC   0x548B             STRB     R3,[R1, R2]
   \   00000AEE   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000AF0   0x....             LDR.N    R2,??DataTable7_5
   \   00000AF2   0x5C8A             LDRB     R2,[R1, R2]
   \   00000AF4   0x2A01             CMP      R2,#+1
   \   00000AF6   0xD004             BEQ.N    ??Search_BlackEdge_56
   \   00000AF8   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000AFA   0x....             LDR.N    R2,??DataTable7_5
   \   00000AFC   0x5C8A             LDRB     R2,[R1, R2]
   \   00000AFE   0x2A02             CMP      R2,#+2
   \   00000B00   0xD103             BNE.N    ??Search_BlackEdge_57
   \                     ??Search_BlackEdge_56:
   \   00000B02   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000B04   0x....             LDR.N    R2,??DataTable7_5
   \   00000B06   0x2302             MOVS     R3,#+2
   \   00000B08   0x548B             STRB     R3,[R1, R2]
   \                     ??Search_BlackEdge_57:
   \   00000B0A   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000B0C   0x....             LDR.N    R2,??DataTable7_5
   \   00000B0E   0x5C8A             LDRB     R2,[R1, R2]
   \   00000B10   0x2A03             CMP      R2,#+3
   \   00000B12   0xD103             BNE.N    ??Search_BlackEdge_58
   \   00000B14   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000B16   0x....             LDR.N    R2,??DataTable7_5
   \   00000B18   0x2300             MOVS     R3,#+0
   \   00000B1A   0x548B             STRB     R3,[R1, R2]
   \                     ??Search_BlackEdge_58:
   \   00000B1C   0x1C49             ADDS     R1,R1,#+1
   \   00000B1E   0xE7DC             B.N      ??Search_BlackEdge_55
   \                     ??Search_BlackEdge_54:
   \   00000B20   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000B22   0x....             LDR.N    R1,??DataTable7_9
   \   00000B24   0x5C41             LDRB     R1,[R0, R1]
   \   00000B26   0x299D             CMP      R1,#+157
   \   00000B28   0xD3C9             BCC.N    ??Search_BlackEdge_53
   \   00000B2A   0x0001             MOVS     R1,R0
   \   00000B2C   0xE7C1             B.N      ??Search_BlackEdge_52
    956                    //break;
    957                  }
    958                }
    959              }
    960          
    961            }//for循环的结束
    962            
    963            if(top_whiteline+1 < ROW-1)
   \                     ??Search_BlackEdge_4:
   \   00000B2E   0x....             LDR.N    R0,??DataTable7_2
   \   00000B30   0x7800             LDRB     R0,[R0, #+0]
   \   00000B32   0x1C40             ADDS     R0,R0,#+1
   \   00000B34   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000B36   0x2840             CMP      R0,#+64
   \   00000B38   0xD214             BCS.N    ??Search_BlackEdge_59
    964            {
    965              for(n= top_whiteline+1;n<ROW; n++)
   \   00000B3A   0x....             LDR.N    R0,??DataTable7_2
   \   00000B3C   0x7800             LDRB     R0,[R0, #+0]
   \   00000B3E   0x1C40             ADDS     R0,R0,#+1
   \   00000B40   0xE00D             B.N      ??Search_BlackEdge_60
    966              {
    967                  center_white[n] = MID;  
   \                     ??Search_BlackEdge_61:
   \   00000B42   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000B44   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000B48   0x224F             MOVS     R2,#+79
   \   00000B4A   0x5442             STRB     R2,[R0, R1]
    968                  left_black[n] = MID - 2;   
   \   00000B4C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000B4E   0x....             LDR.N    R1,??DataTable7_6
   \   00000B50   0x224D             MOVS     R2,#+77
   \   00000B52   0x5442             STRB     R2,[R0, R1]
    969                  right_black[n] = MID + 2;  
   \   00000B54   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000B56   0x....             LDR.N    R1,??DataTable7_9
   \   00000B58   0x2251             MOVS     R2,#+81
   \   00000B5A   0x5442             STRB     R2,[R0, R1]
    970              }
   \   00000B5C   0x1C40             ADDS     R0,R0,#+1
   \                     ??Search_BlackEdge_60:
   \   00000B5E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000B60   0x2841             CMP      R0,#+65
   \   00000B62   0xDBEE             BLT.N    ??Search_BlackEdge_61
    971            } 
    972            
    973          }
   \                     ??Search_BlackEdge_59:
   \   00000B64   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    974          
    975          //------------------------通过找出来的赛道对，两边沿线进行处理和虚构并拟合出中心线----------------------//
    976          /*对赛道进行拉线连接，左右各自连接自己的，然后对于中线，利用赛道的状态标志，再进行一次拟合
    977           0  表示左边沿线断点
    978           1  表示右边沿线断点
    979           2  表示两边都断了 
    980          到达边界后不能直接的拉线了
    981          对于虚线和十字道路的处理，只要保证两点就行了，即1、保证能找到在跑道上的点；2、保证对赛道的行状态的记录绝对的正确
    982          */

   \                                 In section .text, align 2, keep-with-next
    983          void Deal_BlackEdge(void)
    984          { 
   \                     Deal_BlackEdge:
   \   00000000   0xB4F0             PUSH     {R4-R7}
    985            int16 i=0,k=0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x2100             MOVS     R1,#+0
    986            uint8 un_out_hang = bottom_whitebase ;
   \   00000006   0x.... 0x....      LDR.W    R2,??DataTable8_2
   \   0000000A   0x7812             LDRB     R2,[R2, #+0]
    987            uint8 lost_start_line=0;
   \   0000000C   0x2300             MOVS     R3,#+0
    988            uint8 lost_end_line=0;
   \   0000000E   0x2400             MOVS     R4,#+0
    989            left_top_whiteline = top_whiteline;
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable8_3
   \   00000014   0x.... 0x....      LDR.W    R6,??DataTable8_4
   \   00000018   0x7836             LDRB     R6,[R6, #+0]
   \   0000001A   0x702E             STRB     R6,[R5, #+0]
    990            right_top_whiteline = top_whiteline;
   \   0000001C   0x.... 0x....      LDR.W    R5,??DataTable8_5
   \   00000020   0x.... 0x....      LDR.W    R6,??DataTable8_4
   \   00000024   0x7836             LDRB     R6,[R6, #+0]
   \   00000026   0x702E             STRB     R6,[R5, #+0]
    991          
    992            //图像的突变可能是噪点的出现，这里可以试着对Row_state[i]经行一下中值滤波
    993            //对Row_state[i]滤波
    994           for( i=bottom_whitebase + 1;i < top_whiteline-2;i++)
   \   00000028   0x.... 0x....      LDR.W    R5,??DataTable8_2
   \   0000002C   0x782D             LDRB     R5,[R5, #+0]
   \   0000002E   0x1C6D             ADDS     R5,R5,#+1
   \   00000030   0x0028             MOVS     R0,R5
   \   00000032   0xE023             B.N      ??Deal_BlackEdge_0
    995           {
    996             if(Row_state[i-1] == Row_state[i+1] && Row_state[i-1] != Row_state[i])
   \                     ??Deal_BlackEdge_1:
   \   00000034   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000036   0x.... 0x....      LDR.W    R3,??DataTable8_6
   \   0000003A   0x18C3             ADDS     R3,R0,R3
   \   0000003C   0xF813 0x3C01      LDRB     R3,[R3, #-1]
   \   00000040   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000042   0x.... 0x....      LDR.W    R4,??DataTable8_6
   \   00000046   0x1904             ADDS     R4,R0,R4
   \   00000048   0x7864             LDRB     R4,[R4, #+1]
   \   0000004A   0x42A3             CMP      R3,R4
   \   0000004C   0xD115             BNE.N    ??Deal_BlackEdge_2
   \   0000004E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000050   0x.... 0x....      LDR.W    R3,??DataTable8_6
   \   00000054   0x18C3             ADDS     R3,R0,R3
   \   00000056   0xF813 0x3C01      LDRB     R3,[R3, #-1]
   \   0000005A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000005C   0x.... 0x....      LDR.W    R4,??DataTable8_6
   \   00000060   0x5D04             LDRB     R4,[R0, R4]
   \   00000062   0x42A3             CMP      R3,R4
   \   00000064   0xD009             BEQ.N    ??Deal_BlackEdge_2
    997             {
    998               Row_state[i] = Row_state[i-1];
   \   00000066   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000068   0x.... 0x....      LDR.W    R3,??DataTable8_6
   \   0000006C   0x18C3             ADDS     R3,R0,R3
   \   0000006E   0xF813 0x3C01      LDRB     R3,[R3, #-1]
   \   00000072   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000074   0x.... 0x....      LDR.W    R4,??DataTable8_6
   \   00000078   0x5503             STRB     R3,[R0, R4]
    999             }
   1000           }
   \                     ??Deal_BlackEdge_2:
   \   0000007A   0x1C40             ADDS     R0,R0,#+1
   \                     ??Deal_BlackEdge_0:
   \   0000007C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000007E   0x.... 0x....      LDR.W    R3,??DataTable8_4
   \   00000082   0x781B             LDRB     R3,[R3, #+0]
   \   00000084   0x1E9B             SUBS     R3,R3,#+2
   \   00000086   0x4298             CMP      R0,R3
   \   00000088   0xDBD4             BLT.N    ??Deal_BlackEdge_1
   1001            
   1002            
   1003            
   1004            for( i=bottom_whitebase+1 ;i < top_whiteline-1;i++)
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   0000008E   0x7800             LDRB     R0,[R0, #+0]
   \   00000090   0x1C40             ADDS     R0,R0,#+1
   \   00000092   0xE000             B.N      ??Deal_BlackEdge_3
   \                     ??Deal_BlackEdge_4:
   \   00000094   0x1C40             ADDS     R0,R0,#+1
   \                     ??Deal_BlackEdge_3:
   \   00000096   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000098   0x.... 0x....      LDR.W    R3,??DataTable8_4
   \   0000009C   0x781B             LDRB     R3,[R3, #+0]
   \   0000009E   0x1E5B             SUBS     R3,R3,#+1
   \   000000A0   0x4298             CMP      R0,R3
   \   000000A2   0xF280 0x8095      BGE.W    ??Deal_BlackEdge_5
   1005            {
   1006              lost_start_line = 0;
   \   000000A6   0x2300             MOVS     R3,#+0
   1007              lost_end_line = 0;
   \   000000A8   0x2400             MOVS     R4,#+0
   1008              
   1009              if( (Row_state[i-1] == 1 || Row_state[i-1] == 3) && (Row_state[i] == 0 || Row_state[i] == 2))   //判断左边第i 点是否丢点   
   \   000000AA   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000AC   0x.... 0x....      LDR.W    R5,??DataTable8_6
   \   000000B0   0x1945             ADDS     R5,R0,R5
   \   000000B2   0xF815 0x5C01      LDRB     R5,[R5, #-1]
   \   000000B6   0x2D01             CMP      R5,#+1
   \   000000B8   0xD007             BEQ.N    ??Deal_BlackEdge_6
   \   000000BA   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000BC   0x.... 0x....      LDR.W    R3,??DataTable8_6
   \   000000C0   0x18C3             ADDS     R3,R0,R3
   \   000000C2   0xF813 0x3C01      LDRB     R3,[R3, #-1]
   \   000000C6   0x2B03             CMP      R3,#+3
   \   000000C8   0xD1E4             BNE.N    ??Deal_BlackEdge_4
   \                     ??Deal_BlackEdge_6:
   \   000000CA   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000CC   0x.... 0x....      LDR.W    R3,??DataTable8_6
   \   000000D0   0x5CC3             LDRB     R3,[R0, R3]
   \   000000D2   0x2B00             CMP      R3,#+0
   \   000000D4   0xD005             BEQ.N    ??Deal_BlackEdge_7
   \   000000D6   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000D8   0x.... 0x....      LDR.W    R3,??DataTable8_6
   \   000000DC   0x5CC3             LDRB     R3,[R0, R3]
   \   000000DE   0x2B02             CMP      R3,#+2
   \   000000E0   0xD1D8             BNE.N    ??Deal_BlackEdge_4
   1010              {
   1011                 lost_start_line = i - 1;//记录丢点的前一行
   \                     ??Deal_BlackEdge_7:
   \   000000E2   0x0003             MOVS     R3,R0
   \   000000E4   0x1E5B             SUBS     R3,R3,#+1
   \   000000E6   0xE000             B.N      ??Deal_BlackEdge_8
   1012                 while(i < top_whiteline-1)
   1013                  {
   1014                    if((Row_state[i] == 1 || Row_state[i] == 3) && (Row_state[i+1] == 1 || Row_state[i+1] == 3))  //
   1015                    {
   1016                      if(lost_end_line >= top_whiteline -2)
   1017                        lost_end_line = i;
   1018                      else
   1019                        lost_end_line = i + 1;
   1020                      
   1021                      break; 
   1022                    }
   1023                     i++;//i++必须要在if的判断之后进行，否则会导致出错
   \                     ??Deal_BlackEdge_9:
   \   000000E8   0x1C40             ADDS     R0,R0,#+1
   \                     ??Deal_BlackEdge_8:
   \   000000EA   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000EC   0x.... 0x....      LDR.W    R5,??DataTable8_4
   \   000000F0   0x782D             LDRB     R5,[R5, #+0]
   \   000000F2   0x1E6D             SUBS     R5,R5,#+1
   \   000000F4   0x42A8             CMP      R0,R5
   \   000000F6   0xDA23             BGE.N    ??Deal_BlackEdge_10
   \   000000F8   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000FA   0x.... 0x....      LDR.W    R5,??DataTable8_6
   \   000000FE   0x5D45             LDRB     R5,[R0, R5]
   \   00000100   0x2D01             CMP      R5,#+1
   \   00000102   0xD005             BEQ.N    ??Deal_BlackEdge_11
   \   00000104   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000106   0x.... 0x....      LDR.W    R5,??DataTable8_6
   \   0000010A   0x5D45             LDRB     R5,[R0, R5]
   \   0000010C   0x2D03             CMP      R5,#+3
   \   0000010E   0xD1EB             BNE.N    ??Deal_BlackEdge_9
   \                     ??Deal_BlackEdge_11:
   \   00000110   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000112   0x.... 0x....      LDR.W    R5,??DataTable8_6
   \   00000116   0x1945             ADDS     R5,R0,R5
   \   00000118   0x786D             LDRB     R5,[R5, #+1]
   \   0000011A   0x2D01             CMP      R5,#+1
   \   0000011C   0xD006             BEQ.N    ??Deal_BlackEdge_12
   \   0000011E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000120   0x.... 0x....      LDR.W    R5,??DataTable8_6
   \   00000124   0x1945             ADDS     R5,R0,R5
   \   00000126   0x786D             LDRB     R5,[R5, #+1]
   \   00000128   0x2D03             CMP      R5,#+3
   \   0000012A   0xD1DD             BNE.N    ??Deal_BlackEdge_9
   \                     ??Deal_BlackEdge_12:
   \   0000012C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000012E   0x.... 0x....      LDR.W    R5,??DataTable8_4
   \   00000132   0x782D             LDRB     R5,[R5, #+0]
   \   00000134   0x1EAD             SUBS     R5,R5,#+2
   \   00000136   0x42AC             CMP      R4,R5
   \   00000138   0xDB01             BLT.N    ??Deal_BlackEdge_13
   \   0000013A   0x0004             MOVS     R4,R0
   \   0000013C   0xE000             B.N      ??Deal_BlackEdge_14
   \                     ??Deal_BlackEdge_13:
   \   0000013E   0x1C44             ADDS     R4,R0,#+1
   1024                  }
   1025                 if(lost_end_line !=0)
   \                     ??Deal_BlackEdge_14:
   \                     ??Deal_BlackEdge_10:
   \   00000140   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000142   0x2C00             CMP      R4,#+0
   \   00000144   0xD026             BEQ.N    ??Deal_BlackEdge_15
   1026                 {  
   1027                   for(k = lost_start_line+1; k< lost_end_line;k++)
   \   00000146   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000148   0x1C59             ADDS     R1,R3,#+1
   \                     ??Deal_BlackEdge_16:
   \   0000014A   0x0025             MOVS     R5,R4
   \   0000014C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000014E   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000150   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000152   0x42A9             CMP      R1,R5
   \   00000154   0xDA9E             BGE.N    ??Deal_BlackEdge_4
   1028                   {
   1029                    left_black[k] = left_black[lost_start_line] + (k -lost_start_line)*(left_black[lost_end_line]-left_black[lost_start_line])/(lost_end_line - lost_start_line);  
   \   00000156   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000158   0x.... 0x....      LDR.W    R5,??DataTable8_7
   \   0000015C   0x5D5D             LDRB     R5,[R3, R5]
   \   0000015E   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000160   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000162   0x1ACE             SUBS     R6,R1,R3
   \   00000164   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000166   0x.... 0x....      LDR.W    R7,??DataTable8_7
   \   0000016A   0x5DE7             LDRB     R7,[R4, R7]
   \   0000016C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000016E   0x.... 0x....      LDR.W    R12,??DataTable8_7
   \   00000172   0xF813 0xC00C      LDRB     R12,[R3, R12]
   \   00000176   0xEBB7 0x070C      SUBS     R7,R7,R12
   \   0000017A   0x437E             MULS     R6,R7,R6
   \   0000017C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000017E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000180   0x1AE7             SUBS     R7,R4,R3
   \   00000182   0xFB96 0xF6F7      SDIV     R6,R6,R7
   \   00000186   0x1975             ADDS     R5,R6,R5
   \   00000188   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000018A   0x.... 0x....      LDR.W    R6,??DataTable8_7
   \   0000018E   0x558D             STRB     R5,[R1, R6]
   1030                   }
   \   00000190   0x1C49             ADDS     R1,R1,#+1
   \   00000192   0xE7DA             B.N      ??Deal_BlackEdge_16
   1031                 }   
   1032                else if(lost_end_line ==0 && lost_start_line >  top_whiteline/2 && lost_start_line <ROW-1  ) //当最顶行的点到达边沿的时候，不判定
   \                     ??Deal_BlackEdge_15:
   \   00000194   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000196   0x2C00             CMP      R4,#+0
   \   00000198   0xF47F 0xAF7C      BNE.W    ??Deal_BlackEdge_4
   \   0000019C   0x.... 0x....      LDR.W    R4,??DataTable8_4
   \   000001A0   0x7824             LDRB     R4,[R4, #+0]
   \   000001A2   0x2502             MOVS     R5,#+2
   \   000001A4   0xFB94 0xF4F5      SDIV     R4,R4,R5
   \   000001A8   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000001AA   0x429C             CMP      R4,R3
   \   000001AC   0xF6BF 0xAF72      BGE.W    ??Deal_BlackEdge_4
   \   000001B0   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000001B2   0x2B40             CMP      R3,#+64
   \   000001B4   0xF4BF 0xAF6E      BCS.W    ??Deal_BlackEdge_4
   1033                 {   
   1034                  if( left_black[top_whiteline] > 1)
   \   000001B8   0x.... 0x....      LDR.W    R4,??DataTable8_4
   \   000001BC   0x7824             LDRB     R4,[R4, #+0]
   \   000001BE   0x.... 0x....      LDR.W    R5,??DataTable8_7
   \   000001C2   0x5D64             LDRB     R4,[R4, R5]
   \   000001C4   0x2C02             CMP      R4,#+2
   \   000001C6   0xF4FF 0xAF65      BCC.W    ??Deal_BlackEdge_4
   1035                   {
   1036                     left_top_whiteline = lost_start_line;
   \   000001CA   0x.... 0x....      LDR.W    R0,??DataTable8_3
   \   000001CE   0x7003             STRB     R3,[R0, #+0]
   1037                     break;
   1038                  }
   1039                 }
   1040                   
   1041              }
   1042            }
   1043            
   1044            //右边
   1045            for( i=bottom_whitebase ;i < top_whiteline-1;i++)
   \                     ??Deal_BlackEdge_5:
   \   000001D0   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   000001D4   0x7800             LDRB     R0,[R0, #+0]
   \   000001D6   0xE000             B.N      ??Deal_BlackEdge_17
   \                     ??Deal_BlackEdge_18:
   \   000001D8   0x1C40             ADDS     R0,R0,#+1
   \                     ??Deal_BlackEdge_17:
   \   000001DA   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000001DC   0x.... 0x....      LDR.W    R3,??DataTable8_4
   \   000001E0   0x781B             LDRB     R3,[R3, #+0]
   \   000001E2   0x1E5B             SUBS     R3,R3,#+1
   \   000001E4   0x4298             CMP      R0,R3
   \   000001E6   0xF280 0x8095      BGE.W    ??Deal_BlackEdge_19
   1046            {
   1047              lost_start_line = 0;
   \   000001EA   0x2300             MOVS     R3,#+0
   1048              lost_end_line = 0;
   \   000001EC   0x2400             MOVS     R4,#+0
   1049              if( (Row_state[i-1] == 0 || Row_state[i-1] == 3) && (Row_state[i] == 1 || Row_state[i] == 2))//判断右边第i 点是否丢点
   \   000001EE   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000001F0   0x.... 0x....      LDR.W    R5,??DataTable8_6
   \   000001F4   0x1945             ADDS     R5,R0,R5
   \   000001F6   0xF815 0x5C01      LDRB     R5,[R5, #-1]
   \   000001FA   0x2D00             CMP      R5,#+0
   \   000001FC   0xD007             BEQ.N    ??Deal_BlackEdge_20
   \   000001FE   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000200   0x.... 0x....      LDR.W    R3,??DataTable8_6
   \   00000204   0x18C3             ADDS     R3,R0,R3
   \   00000206   0xF813 0x3C01      LDRB     R3,[R3, #-1]
   \   0000020A   0x2B03             CMP      R3,#+3
   \   0000020C   0xD1E4             BNE.N    ??Deal_BlackEdge_18
   \                     ??Deal_BlackEdge_20:
   \   0000020E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000210   0x.... 0x....      LDR.W    R3,??DataTable8_6
   \   00000214   0x5CC3             LDRB     R3,[R0, R3]
   \   00000216   0x2B01             CMP      R3,#+1
   \   00000218   0xD005             BEQ.N    ??Deal_BlackEdge_21
   \   0000021A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000021C   0x.... 0x....      LDR.W    R3,??DataTable8_6
   \   00000220   0x5CC3             LDRB     R3,[R0, R3]
   \   00000222   0x2B02             CMP      R3,#+2
   \   00000224   0xD1D8             BNE.N    ??Deal_BlackEdge_18
   1050              {
   1051                  lost_start_line = i - 1;//记录丢点的前一行
   \                     ??Deal_BlackEdge_21:
   \   00000226   0x0003             MOVS     R3,R0
   \   00000228   0x1E5B             SUBS     R3,R3,#+1
   \   0000022A   0xE000             B.N      ??Deal_BlackEdge_22
   1052                 while(i< top_whiteline-1)
   1053                  {
   1054                    //连续的两行找到了点则认为找到了连接点
   1055                    if((Row_state[i] == 0 || Row_state[i] == 3) && (Row_state[i+1] == 0 || Row_state[i+1] == 3))
   1056                    {
   1057                      if(lost_end_line >= top_whiteline -2)
   1058                        lost_end_line = i;
   1059                      else
   1060                        lost_end_line = i + 1;
   1061                      break;
   1062                    }  
   1063                    i++;
   \                     ??Deal_BlackEdge_23:
   \   0000022C   0x1C40             ADDS     R0,R0,#+1
   \                     ??Deal_BlackEdge_22:
   \   0000022E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000230   0x.... 0x....      LDR.W    R5,??DataTable8_4
   \   00000234   0x782D             LDRB     R5,[R5, #+0]
   \   00000236   0x1E6D             SUBS     R5,R5,#+1
   \   00000238   0x42A8             CMP      R0,R5
   \   0000023A   0xDA23             BGE.N    ??Deal_BlackEdge_24
   \   0000023C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000023E   0x.... 0x....      LDR.W    R5,??DataTable8_6
   \   00000242   0x5D45             LDRB     R5,[R0, R5]
   \   00000244   0x2D00             CMP      R5,#+0
   \   00000246   0xD005             BEQ.N    ??Deal_BlackEdge_25
   \   00000248   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000024A   0x.... 0x....      LDR.W    R5,??DataTable8_6
   \   0000024E   0x5D45             LDRB     R5,[R0, R5]
   \   00000250   0x2D03             CMP      R5,#+3
   \   00000252   0xD1EB             BNE.N    ??Deal_BlackEdge_23
   \                     ??Deal_BlackEdge_25:
   \   00000254   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000256   0x.... 0x....      LDR.W    R5,??DataTable8_6
   \   0000025A   0x1945             ADDS     R5,R0,R5
   \   0000025C   0x786D             LDRB     R5,[R5, #+1]
   \   0000025E   0x2D00             CMP      R5,#+0
   \   00000260   0xD006             BEQ.N    ??Deal_BlackEdge_26
   \   00000262   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000264   0x.... 0x....      LDR.W    R5,??DataTable8_6
   \   00000268   0x1945             ADDS     R5,R0,R5
   \   0000026A   0x786D             LDRB     R5,[R5, #+1]
   \   0000026C   0x2D03             CMP      R5,#+3
   \   0000026E   0xD1DD             BNE.N    ??Deal_BlackEdge_23
   \                     ??Deal_BlackEdge_26:
   \   00000270   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000272   0x.... 0x....      LDR.W    R5,??DataTable8_4
   \   00000276   0x782D             LDRB     R5,[R5, #+0]
   \   00000278   0x1EAD             SUBS     R5,R5,#+2
   \   0000027A   0x42AC             CMP      R4,R5
   \   0000027C   0xDB01             BLT.N    ??Deal_BlackEdge_27
   \   0000027E   0x0004             MOVS     R4,R0
   \   00000280   0xE000             B.N      ??Deal_BlackEdge_28
   \                     ??Deal_BlackEdge_27:
   \   00000282   0x1C44             ADDS     R4,R0,#+1
   1064                  }
   1065                 if(lost_end_line !=0)
   \                     ??Deal_BlackEdge_28:
   \                     ??Deal_BlackEdge_24:
   \   00000284   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000286   0x2C00             CMP      R4,#+0
   \   00000288   0xD026             BEQ.N    ??Deal_BlackEdge_29
   1066                 {
   1067                   for(k = lost_start_line+1; k< lost_end_line;k++)
   \   0000028A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000028C   0x1C59             ADDS     R1,R3,#+1
   \                     ??Deal_BlackEdge_30:
   \   0000028E   0x0025             MOVS     R5,R4
   \   00000290   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000292   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000294   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000296   0x42A9             CMP      R1,R5
   \   00000298   0xDA9E             BGE.N    ??Deal_BlackEdge_18
   1068                   {
   1069                    right_black[k] = right_black[lost_start_line] + (k -lost_start_line)*(right_black[lost_end_line]-right_black[lost_start_line])/(lost_end_line - lost_start_line);  
   \   0000029A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000029C   0x.... 0x....      LDR.W    R5,??DataTable8_8
   \   000002A0   0x5D5D             LDRB     R5,[R3, R5]
   \   000002A2   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000002A4   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000002A6   0x1ACE             SUBS     R6,R1,R3
   \   000002A8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002AA   0x.... 0x....      LDR.W    R7,??DataTable8_8
   \   000002AE   0x5DE7             LDRB     R7,[R4, R7]
   \   000002B0   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000002B2   0x.... 0x....      LDR.W    R12,??DataTable8_8
   \   000002B6   0xF813 0xC00C      LDRB     R12,[R3, R12]
   \   000002BA   0xEBB7 0x070C      SUBS     R7,R7,R12
   \   000002BE   0x437E             MULS     R6,R7,R6
   \   000002C0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002C2   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000002C4   0x1AE7             SUBS     R7,R4,R3
   \   000002C6   0xFB96 0xF6F7      SDIV     R6,R6,R7
   \   000002CA   0x1975             ADDS     R5,R6,R5
   \   000002CC   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000002CE   0x.... 0x....      LDR.W    R6,??DataTable8_8
   \   000002D2   0x558D             STRB     R5,[R1, R6]
   1070                   }
   \   000002D4   0x1C49             ADDS     R1,R1,#+1
   \   000002D6   0xE7DA             B.N      ??Deal_BlackEdge_30
   1071                 }
   1072                 else if(lost_end_line ==0 && lost_start_line > top_whiteline/2 && lost_start_line <ROW-1 )
   \                     ??Deal_BlackEdge_29:
   \   000002D8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002DA   0x2C00             CMP      R4,#+0
   \   000002DC   0xF47F 0xAF7C      BNE.W    ??Deal_BlackEdge_18
   \   000002E0   0x.... 0x....      LDR.W    R4,??DataTable8_4
   \   000002E4   0x7824             LDRB     R4,[R4, #+0]
   \   000002E6   0x2502             MOVS     R5,#+2
   \   000002E8   0xFB94 0xF4F5      SDIV     R4,R4,R5
   \   000002EC   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000002EE   0x429C             CMP      R4,R3
   \   000002F0   0xF6BF 0xAF72      BGE.W    ??Deal_BlackEdge_18
   \   000002F4   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000002F6   0x2B40             CMP      R3,#+64
   \   000002F8   0xF4BF 0xAF6E      BCS.W    ??Deal_BlackEdge_18
   1073                 {   
   1074                   if(right_black[top_whiteline] < COLUMN -2)
   \   000002FC   0x.... 0x....      LDR.W    R4,??DataTable8_4
   \   00000300   0x7824             LDRB     R4,[R4, #+0]
   \   00000302   0x.... 0x....      LDR.W    R5,??DataTable8_8
   \   00000306   0x5D64             LDRB     R4,[R4, R5]
   \   00000308   0x2C9D             CMP      R4,#+157
   \   0000030A   0xF4BF 0xAF65      BCS.W    ??Deal_BlackEdge_18
   1075                   {
   1076                     right_top_whiteline  = lost_start_line;
   \   0000030E   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   00000312   0x7003             STRB     R3,[R0, #+0]
   1077                     break;
   1078                  }
   1079                 }
   1080                 
   1081              }
   1082            }
   1083           
   1084            if(right_top_whiteline > left_top_whiteline)
   \                     ??Deal_BlackEdge_19:
   \   00000314   0x.... 0x....      LDR.W    R0,??DataTable8_3
   \   00000318   0x7800             LDRB     R0,[R0, #+0]
   \   0000031A   0x.... 0x....      LDR.W    R3,??DataTable8_5
   \   0000031E   0x781B             LDRB     R3,[R3, #+0]
   \   00000320   0x4298             CMP      R0,R3
   \   00000322   0xD242             BCS.N    ??Deal_BlackEdge_31
   1085            {
   1086              top_whiteline = right_top_whiteline;//除了定义最高行以外，还要对丢线的那一边做补线处理,这里是右边
   \   00000324   0x.... 0x....      LDR.W    R0,??DataTable8_4
   \   00000328   0x.... 0x....      LDR.W    R3,??DataTable8_5
   \   0000032C   0x781B             LDRB     R3,[R3, #+0]
   \   0000032E   0x7003             STRB     R3,[R0, #+0]
   1087              for(i = left_top_whiteline;i<=right_top_whiteline;i++)
   \   00000330   0x.... 0x....      LDR.W    R0,??DataTable8_3
   \   00000334   0x7800             LDRB     R0,[R0, #+0]
   \   00000336   0xE016             B.N      ??Deal_BlackEdge_32
   1088              {
   1089                 if(right_black[i]- (right_black[i-1] - left_black[i-1]) <= 0 )//限幅
   1090                    left_black[i]=0;
   1091                  else
   1092                  left_black[i] = right_black[i] - (right_black[i-1] - left_black[i-1]);
   \                     ??Deal_BlackEdge_33:
   \   00000338   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000033A   0x.... 0x....      LDR.W    R3,??DataTable8_8
   \   0000033E   0x5CC3             LDRB     R3,[R0, R3]
   \   00000340   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000342   0x.... 0x....      LDR.W    R4,??DataTable8_8
   \   00000346   0x1904             ADDS     R4,R0,R4
   \   00000348   0xF814 0x4C01      LDRB     R4,[R4, #-1]
   \   0000034C   0x1B1B             SUBS     R3,R3,R4
   \   0000034E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000350   0x.... 0x....      LDR.W    R4,??DataTable8_7
   \   00000354   0x1904             ADDS     R4,R0,R4
   \   00000356   0xF814 0x4C01      LDRB     R4,[R4, #-1]
   \   0000035A   0x18E3             ADDS     R3,R4,R3
   \   0000035C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000035E   0x.... 0x....      LDR.W    R4,??DataTable8_7
   \   00000362   0x5503             STRB     R3,[R0, R4]
   \                     ??Deal_BlackEdge_34:
   \   00000364   0x1C40             ADDS     R0,R0,#+1
   \                     ??Deal_BlackEdge_32:
   \   00000366   0x.... 0x....      LDR.W    R3,??DataTable8_5
   \   0000036A   0x781B             LDRB     R3,[R3, #+0]
   \   0000036C   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   0000036E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000370   0x4283             CMP      R3,R0
   \   00000372   0xDB6A             BLT.N    ??Deal_BlackEdge_35
   \   00000374   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000376   0x.... 0x....      LDR.W    R3,??DataTable8_8
   \   0000037A   0x5CC3             LDRB     R3,[R0, R3]
   \   0000037C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000037E   0x.... 0x....      LDR.W    R4,??DataTable8_8
   \   00000382   0x1904             ADDS     R4,R0,R4
   \   00000384   0xF814 0x4C01      LDRB     R4,[R4, #-1]
   \   00000388   0x1B1B             SUBS     R3,R3,R4
   \   0000038A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000038C   0x.... 0x....      LDR.W    R4,??DataTable8_7
   \   00000390   0x1904             ADDS     R4,R0,R4
   \   00000392   0xF814 0x4C01      LDRB     R4,[R4, #-1]
   \   00000396   0xFA53 0xF384      UXTAB    R3,R3,R4
   \   0000039A   0x2B01             CMP      R3,#+1
   \   0000039C   0xDACC             BGE.N    ??Deal_BlackEdge_33
   \   0000039E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000003A0   0x.... 0x....      LDR.W    R3,??DataTable8_7
   \   000003A4   0x2400             MOVS     R4,#+0
   \   000003A6   0x54C4             STRB     R4,[R0, R3]
   \   000003A8   0xE7DC             B.N      ??Deal_BlackEdge_34
   1093              }
   1094              
   1095            }
   1096           else if(right_top_whiteline < left_top_whiteline)
   \                     ??Deal_BlackEdge_31:
   \   000003AA   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   000003AE   0x7800             LDRB     R0,[R0, #+0]
   \   000003B0   0x.... 0x....      LDR.W    R3,??DataTable8_3
   \   000003B4   0x781B             LDRB     R3,[R3, #+0]
   \   000003B6   0x4298             CMP      R0,R3
   \   000003B8   0xD241             BCS.N    ??Deal_BlackEdge_36
   1097           {
   1098             top_whiteline = left_top_whiteline;
   \   000003BA   0x.... 0x....      LDR.W    R0,??DataTable8_4
   \   000003BE   0x.... 0x....      LDR.W    R3,??DataTable8_3
   \   000003C2   0x781B             LDRB     R3,[R3, #+0]
   \   000003C4   0x7003             STRB     R3,[R0, #+0]
   1099               for(i = right_top_whiteline;i<=left_top_whiteline;i++)
   \   000003C6   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   000003CA   0x7800             LDRB     R0,[R0, #+0]
   \   000003CC   0xE016             B.N      ??Deal_BlackEdge_37
   1100            {
   1101              if(left_black[i] + (right_black[i-1] - left_black[i-1]) >= COLUMN-1)
   1102                right_black[i] = COLUMN-1;   
   1103              else
   1104                right_black[i] = left_black[i] + (right_black[i-1] - left_black[i-1]);//
   \                     ??Deal_BlackEdge_38:
   \   000003CE   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000003D0   0x.... 0x....      LDR.W    R3,??DataTable8_7
   \   000003D4   0x5CC3             LDRB     R3,[R0, R3]
   \   000003D6   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000003D8   0x.... 0x....      LDR.W    R4,??DataTable8_8
   \   000003DC   0x1904             ADDS     R4,R0,R4
   \   000003DE   0xF814 0x4C01      LDRB     R4,[R4, #-1]
   \   000003E2   0x18E3             ADDS     R3,R4,R3
   \   000003E4   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000003E6   0x.... 0x....      LDR.W    R4,??DataTable8_7
   \   000003EA   0x1904             ADDS     R4,R0,R4
   \   000003EC   0xF814 0x4C01      LDRB     R4,[R4, #-1]
   \   000003F0   0x1B1B             SUBS     R3,R3,R4
   \   000003F2   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000003F4   0x.... 0x....      LDR.W    R4,??DataTable8_8
   \   000003F8   0x5503             STRB     R3,[R0, R4]
   \                     ??Deal_BlackEdge_39:
   \   000003FA   0x1C40             ADDS     R0,R0,#+1
   \                     ??Deal_BlackEdge_37:
   \   000003FC   0x.... 0x....      LDR.W    R3,??DataTable8_3
   \   00000400   0x781B             LDRB     R3,[R3, #+0]
   \   00000402   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   00000404   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000406   0x4283             CMP      R3,R0
   \   00000408   0xDB1F             BLT.N    ??Deal_BlackEdge_35
   \   0000040A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000040C   0x.... 0x....      LDR.W    R3,??DataTable8_7
   \   00000410   0x5CC3             LDRB     R3,[R0, R3]
   \   00000412   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000414   0x.... 0x....      LDR.W    R4,??DataTable8_8
   \   00000418   0x1904             ADDS     R4,R0,R4
   \   0000041A   0xF814 0x4C01      LDRB     R4,[R4, #-1]
   \   0000041E   0x18E3             ADDS     R3,R4,R3
   \   00000420   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000422   0x.... 0x....      LDR.W    R4,??DataTable8_7
   \   00000426   0x1904             ADDS     R4,R0,R4
   \   00000428   0xF814 0x4C01      LDRB     R4,[R4, #-1]
   \   0000042C   0x1B1B             SUBS     R3,R3,R4
   \   0000042E   0x2B9E             CMP      R3,#+158
   \   00000430   0xDBCD             BLT.N    ??Deal_BlackEdge_38
   \   00000432   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000434   0x.... 0x....      LDR.W    R3,??DataTable8_8
   \   00000438   0x249E             MOVS     R4,#+158
   \   0000043A   0x54C4             STRB     R4,[R0, R3]
   \   0000043C   0xE7DD             B.N      ??Deal_BlackEdge_39
   1105            }
   1106           }
   1107            else
   1108            {
   1109              top_whiteline = right_top_whiteline;
   \                     ??Deal_BlackEdge_36:
   \   0000043E   0x.... 0x....      LDR.W    R0,??DataTable8_4
   \   00000442   0x.... 0x....      LDR.W    R3,??DataTable8_5
   \   00000446   0x781B             LDRB     R3,[R3, #+0]
   \   00000448   0x7003             STRB     R3,[R0, #+0]
   1110            }
   1111           if(top_whiteline+1 <= ROW - 1) 
   \                     ??Deal_BlackEdge_35:
   \   0000044A   0x.... 0x....      LDR.W    R0,??DataTable8_4
   \   0000044E   0x7800             LDRB     R0,[R0, #+0]
   \   00000450   0x1C40             ADDS     R0,R0,#+1
   \   00000452   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000454   0x2841             CMP      R0,#+65
   \   00000456   0xD217             BCS.N    ??Deal_BlackEdge_40
   1112           {
   1113             for(k = top_whiteline+1; k < ROW; k++)
   \   00000458   0x.... 0x....      LDR.W    R0,??DataTable8_4
   \   0000045C   0x7800             LDRB     R0,[R0, #+0]
   \   0000045E   0x1C41             ADDS     R1,R0,#+1
   \   00000460   0xE00F             B.N      ??Deal_BlackEdge_41
   1114             {
   1115                center_white[k] = MID;  
   \                     ??Deal_BlackEdge_42:
   \   00000462   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000464   0x.... 0x....      LDR.W    R0,??DataTable8
   \   00000468   0x234F             MOVS     R3,#+79
   \   0000046A   0x540B             STRB     R3,[R1, R0]
   1116                left_black[k] = MID - 2;   
   \   0000046C   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000046E   0x.... 0x....      LDR.W    R0,??DataTable8_7
   \   00000472   0x234D             MOVS     R3,#+77
   \   00000474   0x540B             STRB     R3,[R1, R0]
   1117                right_black[k] = MID + 2;  
   \   00000476   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000478   0x.... 0x....      LDR.W    R0,??DataTable8_8
   \   0000047C   0x2351             MOVS     R3,#+81
   \   0000047E   0x540B             STRB     R3,[R1, R0]
   1118             }
   \   00000480   0x1C49             ADDS     R1,R1,#+1
   \                     ??Deal_BlackEdge_41:
   \   00000482   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000484   0x2941             CMP      R1,#+65
   \   00000486   0xDBEC             BLT.N    ??Deal_BlackEdge_42
   1119           }
   1120          
   1121           //滤除左右的变沿线的单个跳变
   1122            for( i=bottom_whitebase + 1 ;i <= top_whiteline;i++)
   \                     ??Deal_BlackEdge_40:
   \   00000488   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   0000048C   0x7800             LDRB     R0,[R0, #+0]
   \   0000048E   0x1C40             ADDS     R0,R0,#+1
   \   00000490   0xE061             B.N      ??Deal_BlackEdge_43
   1123            {
   1124              if(left_black[i-1] <= 1 && left_black[i] > 1 && left_black[i+1] <= 1)
   \                     ??Deal_BlackEdge_44:
   \   00000492   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000494   0x.... 0x....      LDR.W    R3,??DataTable8_7
   \   00000498   0x18C3             ADDS     R3,R0,R3
   \   0000049A   0xF813 0x3C01      LDRB     R3,[R3, #-1]
   \   0000049E   0x2B02             CMP      R3,#+2
   \   000004A0   0xD22B             BCS.N    ??Deal_BlackEdge_45
   \   000004A2   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000004A4   0x.... 0x....      LDR.W    R3,??DataTable8_7
   \   000004A8   0x5CC3             LDRB     R3,[R0, R3]
   \   000004AA   0x2B02             CMP      R3,#+2
   \   000004AC   0xD325             BCC.N    ??Deal_BlackEdge_45
   \   000004AE   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000004B0   0x.... 0x....      LDR.W    R3,??DataTable8_7
   \   000004B4   0x18C3             ADDS     R3,R0,R3
   \   000004B6   0x785B             LDRB     R3,[R3, #+1]
   \   000004B8   0x2B02             CMP      R3,#+2
   \   000004BA   0xD21E             BCS.N    ??Deal_BlackEdge_45
   1125              {
   1126                left_black[i] = 0;
   \   000004BC   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000004BE   0x.... 0x....      LDR.W    R3,??DataTable8_7
   \   000004C2   0x2400             MOVS     R4,#+0
   \   000004C4   0x54C4             STRB     R4,[R0, R3]
   1127                
   1128                if(Row_state[k] == 1 ||Row_state[k] == 2)
   \   000004C6   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000004C8   0x.... 0x....      LDR.W    R3,??DataTable8_6
   \   000004CC   0x5CCB             LDRB     R3,[R1, R3]
   \   000004CE   0x2B01             CMP      R3,#+1
   \   000004D0   0xD005             BEQ.N    ??Deal_BlackEdge_46
   \   000004D2   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000004D4   0x.... 0x....      LDR.W    R3,??DataTable8_6
   \   000004D8   0x5CCB             LDRB     R3,[R1, R3]
   \   000004DA   0x2B02             CMP      R3,#+2
   \   000004DC   0xD104             BNE.N    ??Deal_BlackEdge_47
   1129                {
   1130                  Row_state[k] = 2;
   \                     ??Deal_BlackEdge_46:
   \   000004DE   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000004E0   0x.... 0x....      LDR.W    R3,??DataTable8_6
   \   000004E4   0x2402             MOVS     R4,#+2
   \   000004E6   0x54CC             STRB     R4,[R1, R3]
   1131                }
   1132                if(Row_state[k] == 3)
   \                     ??Deal_BlackEdge_47:
   \   000004E8   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000004EA   0x....             LDR.N    R3,??DataTable8_6
   \   000004EC   0x5CCB             LDRB     R3,[R1, R3]
   \   000004EE   0x2B03             CMP      R3,#+3
   \   000004F0   0xD103             BNE.N    ??Deal_BlackEdge_45
   1133                {
   1134                  Row_state[k] = 0;
   \   000004F2   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000004F4   0x....             LDR.N    R3,??DataTable8_6
   \   000004F6   0x2400             MOVS     R4,#+0
   \   000004F8   0x54CC             STRB     R4,[R1, R3]
   1135                }
   1136              }
   1137              
   1138             if(right_black[i-1] >= COLUMN-2 && right_black[i] < COLUMN-2 && right_black[i+1] >= COLUMN-2)
   \                     ??Deal_BlackEdge_45:
   \   000004FA   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000004FC   0x....             LDR.N    R3,??DataTable8_8
   \   000004FE   0x18C3             ADDS     R3,R0,R3
   \   00000500   0xF813 0x3C01      LDRB     R3,[R3, #-1]
   \   00000504   0x2B9D             CMP      R3,#+157
   \   00000506   0xD325             BCC.N    ??Deal_BlackEdge_48
   \   00000508   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000050A   0x....             LDR.N    R3,??DataTable8_8
   \   0000050C   0x5CC3             LDRB     R3,[R0, R3]
   \   0000050E   0x2B9D             CMP      R3,#+157
   \   00000510   0xD220             BCS.N    ??Deal_BlackEdge_48
   \   00000512   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000514   0x....             LDR.N    R3,??DataTable8_8
   \   00000516   0x18C3             ADDS     R3,R0,R3
   \   00000518   0x785B             LDRB     R3,[R3, #+1]
   \   0000051A   0x2B9D             CMP      R3,#+157
   \   0000051C   0xD31A             BCC.N    ??Deal_BlackEdge_48
   1139              {
   1140                right_black[i] = COLUMN-1;
   \   0000051E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000520   0x....             LDR.N    R3,??DataTable8_8
   \   00000522   0x249E             MOVS     R4,#+158
   \   00000524   0x54C4             STRB     R4,[R0, R3]
   1141                
   1142                if(Row_state[k] == 0 ||Row_state[k] == 2)
   \   00000526   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000528   0x....             LDR.N    R3,??DataTable8_6
   \   0000052A   0x5CCB             LDRB     R3,[R1, R3]
   \   0000052C   0x2B00             CMP      R3,#+0
   \   0000052E   0xD004             BEQ.N    ??Deal_BlackEdge_49
   \   00000530   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000532   0x....             LDR.N    R3,??DataTable8_6
   \   00000534   0x5CCB             LDRB     R3,[R1, R3]
   \   00000536   0x2B02             CMP      R3,#+2
   \   00000538   0xD103             BNE.N    ??Deal_BlackEdge_50
   1143                {
   1144                  Row_state[k] = 2;
   \                     ??Deal_BlackEdge_49:
   \   0000053A   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000053C   0x....             LDR.N    R3,??DataTable8_6
   \   0000053E   0x2402             MOVS     R4,#+2
   \   00000540   0x54CC             STRB     R4,[R1, R3]
   1145                }
   1146                if(Row_state[k] == 3)
   \                     ??Deal_BlackEdge_50:
   \   00000542   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000544   0x....             LDR.N    R3,??DataTable8_6
   \   00000546   0x5CCB             LDRB     R3,[R1, R3]
   \   00000548   0x2B03             CMP      R3,#+3
   \   0000054A   0xD103             BNE.N    ??Deal_BlackEdge_48
   1147                {
   1148                  Row_state[k] = 1;
   \   0000054C   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000054E   0x....             LDR.N    R3,??DataTable8_6
   \   00000550   0x2401             MOVS     R4,#+1
   \   00000552   0x54CC             STRB     R4,[R1, R3]
   1149                }
   1150              }
   1151            }
   \                     ??Deal_BlackEdge_48:
   \   00000554   0x1C40             ADDS     R0,R0,#+1
   \                     ??Deal_BlackEdge_43:
   \   00000556   0x....             LDR.N    R3,??DataTable8_4
   \   00000558   0x781B             LDRB     R3,[R3, #+0]
   \   0000055A   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   0000055C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000055E   0x4283             CMP      R3,R0
   \   00000560   0xDA97             BGE.N    ??Deal_BlackEdge_44
   1152           //边沿线滤波结束
   1153            
   1154           //对之前的错误的补线进行重新的虚构
   1155            //这里的虚构会导致有一种情况发生就是，在弯道的顶行的时候，可能会出现补点，与不补点的区别，这样就导致了舵机的抖动
   1156            for( i=bottom_whitebase ;i <= top_whiteline;i++)
   \   00000562   0x....             LDR.N    R0,??DataTable8_2
   \   00000564   0x7800             LDRB     R0,[R0, #+0]
   \   00000566   0xE012             B.N      ??Deal_BlackEdge_51
   1157            {
   1158              if(Row_state[i] != 3)
   \                     ??Deal_BlackEdge_52:
   \   00000568   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000056A   0x....             LDR.N    R1,??DataTable8_6
   \   0000056C   0x5C41             LDRB     R1,[R0, R1]
   \   0000056E   0x2903             CMP      R1,#+3
   \   00000570   0xD00C             BEQ.N    ??Deal_BlackEdge_53
   1159              {
   1160                center_white[i] = (right_black[i]+left_black[i])/2;
   \   00000572   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000574   0x....             LDR.N    R1,??DataTable8_8
   \   00000576   0x5C41             LDRB     R1,[R0, R1]
   \   00000578   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000057A   0x....             LDR.N    R3,??DataTable8_7
   \   0000057C   0x5CC3             LDRB     R3,[R0, R3]
   \   0000057E   0x1859             ADDS     R1,R3,R1
   \   00000580   0x2302             MOVS     R3,#+2
   \   00000582   0xFB91 0xF1F3      SDIV     R1,R1,R3
   \   00000586   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000588   0x....             LDR.N    R3,??DataTable8
   \   0000058A   0x54C1             STRB     R1,[R0, R3]
   1161              }
   1162            }
   \                     ??Deal_BlackEdge_53:
   \   0000058C   0x1C40             ADDS     R0,R0,#+1
   \                     ??Deal_BlackEdge_51:
   \   0000058E   0x....             LDR.N    R1,??DataTable8_4
   \   00000590   0x7809             LDRB     R1,[R1, #+0]
   \   00000592   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000594   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000596   0x4281             CMP      R1,R0
   \   00000598   0xDAE6             BGE.N    ??Deal_BlackEdge_52
   1163            
   1164            //对于两边出界的点，不利用求平均值的方法去做，而是利用前一行的状态进行补充
   1165            for(i= bottom_whitebase; i <= top_whiteline; i++)
   \   0000059A   0x....             LDR.N    R0,??DataTable8_2
   \   0000059C   0x7800             LDRB     R0,[R0, #+0]
   \   0000059E   0xE001             B.N      ??Deal_BlackEdge_54
   1166            {
   1167              if(left_black[i] <= 1 && right_black[i] <= COLUMN-5)  //对于左边出界的点进行补充
   1168              {
   1169                if( right_black[i] - (right_black[un_out_hang]-left_black[un_out_hang])/2 < 0)
   1170                  center_white[i] = 0;
   1171                else
   1172                 center_white[i] = right_black[i] - (right_black[un_out_hang]-left_black[un_out_hang])/2;
   1173              }
   1174              else if(right_black[i] >= COLUMN-2 && left_black[i] >= 3)
   1175              {
   1176                if( left_black[i] + (right_black[un_out_hang]-left_black[un_out_hang])/2 > COLUMN - 1)
   1177                  center_white[i] = COLUMN - 1 ;
   1178                else
   1179                 center_white[i] = left_black[i] + (right_black[un_out_hang]-left_black[un_out_hang])/2;
   1180              }
   1181              else
   1182                un_out_hang = i;
   \                     ??Deal_BlackEdge_55:
   \   000005A0   0x0002             MOVS     R2,R0
   \                     ??Deal_BlackEdge_56:
   \   000005A2   0x1C40             ADDS     R0,R0,#+1
   \                     ??Deal_BlackEdge_54:
   \   000005A4   0x....             LDR.N    R1,??DataTable8_4
   \   000005A6   0x7809             LDRB     R1,[R1, #+0]
   \   000005A8   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000005AA   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000005AC   0x4281             CMP      R1,R0
   \   000005AE   0xDB61             BLT.N    ??Deal_BlackEdge_57
   \   000005B0   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000005B2   0x....             LDR.N    R1,??DataTable8_7
   \   000005B4   0x5C41             LDRB     R1,[R0, R1]
   \   000005B6   0x2902             CMP      R1,#+2
   \   000005B8   0xD22B             BCS.N    ??Deal_BlackEdge_58
   \   000005BA   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000005BC   0x....             LDR.N    R1,??DataTable8_8
   \   000005BE   0x5C41             LDRB     R1,[R0, R1]
   \   000005C0   0x299B             CMP      R1,#+155
   \   000005C2   0xD226             BCS.N    ??Deal_BlackEdge_58
   \   000005C4   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000005C6   0x....             LDR.N    R1,??DataTable8_8
   \   000005C8   0x5C41             LDRB     R1,[R0, R1]
   \   000005CA   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000005CC   0x....             LDR.N    R3,??DataTable8_8
   \   000005CE   0x5CD3             LDRB     R3,[R2, R3]
   \   000005D0   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000005D2   0x....             LDR.N    R4,??DataTable8_7
   \   000005D4   0x5D14             LDRB     R4,[R2, R4]
   \   000005D6   0x1B1B             SUBS     R3,R3,R4
   \   000005D8   0x2402             MOVS     R4,#+2
   \   000005DA   0xFB93 0xF3F4      SDIV     R3,R3,R4
   \   000005DE   0x1AC9             SUBS     R1,R1,R3
   \   000005E0   0x2900             CMP      R1,#+0
   \   000005E2   0xD504             BPL.N    ??Deal_BlackEdge_59
   \   000005E4   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000005E6   0x....             LDR.N    R1,??DataTable8
   \   000005E8   0x2300             MOVS     R3,#+0
   \   000005EA   0x5443             STRB     R3,[R0, R1]
   \   000005EC   0xE7D9             B.N      ??Deal_BlackEdge_56
   \                     ??Deal_BlackEdge_59:
   \   000005EE   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000005F0   0x....             LDR.N    R1,??DataTable8_8
   \   000005F2   0x5C41             LDRB     R1,[R0, R1]
   \   000005F4   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000005F6   0x....             LDR.N    R3,??DataTable8_8
   \   000005F8   0x5CD3             LDRB     R3,[R2, R3]
   \   000005FA   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000005FC   0x....             LDR.N    R4,??DataTable8_7
   \   000005FE   0x5D14             LDRB     R4,[R2, R4]
   \   00000600   0x1B1B             SUBS     R3,R3,R4
   \   00000602   0x2402             MOVS     R4,#+2
   \   00000604   0xFB93 0xF3F4      SDIV     R3,R3,R4
   \   00000608   0x1AC9             SUBS     R1,R1,R3
   \   0000060A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000060C   0x....             LDR.N    R3,??DataTable8
   \   0000060E   0x54C1             STRB     R1,[R0, R3]
   \   00000610   0xE7C7             B.N      ??Deal_BlackEdge_56
   \                     ??Deal_BlackEdge_58:
   \   00000612   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000614   0x....             LDR.N    R1,??DataTable8_8
   \   00000616   0x5C41             LDRB     R1,[R0, R1]
   \   00000618   0x299D             CMP      R1,#+157
   \   0000061A   0xD3C1             BCC.N    ??Deal_BlackEdge_55
   \   0000061C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000061E   0x....             LDR.N    R1,??DataTable8_7
   \   00000620   0x5C41             LDRB     R1,[R0, R1]
   \   00000622   0x2903             CMP      R1,#+3
   \   00000624   0xD3BC             BCC.N    ??Deal_BlackEdge_55
   \   00000626   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000628   0x....             LDR.N    R1,??DataTable8_7
   \   0000062A   0x5C41             LDRB     R1,[R0, R1]
   \   0000062C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000062E   0x....             LDR.N    R3,??DataTable8_8
   \   00000630   0x5CD3             LDRB     R3,[R2, R3]
   \   00000632   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000634   0x....             LDR.N    R4,??DataTable8_7
   \   00000636   0x5D14             LDRB     R4,[R2, R4]
   \   00000638   0x1B1B             SUBS     R3,R3,R4
   \   0000063A   0x2402             MOVS     R4,#+2
   \   0000063C   0xFB93 0xF3F4      SDIV     R3,R3,R4
   \   00000640   0x1859             ADDS     R1,R3,R1
   \   00000642   0x299F             CMP      R1,#+159
   \   00000644   0xDB04             BLT.N    ??Deal_BlackEdge_60
   \   00000646   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000648   0x....             LDR.N    R1,??DataTable8
   \   0000064A   0x239E             MOVS     R3,#+158
   \   0000064C   0x5443             STRB     R3,[R0, R1]
   \   0000064E   0xE7A8             B.N      ??Deal_BlackEdge_56
   \                     ??Deal_BlackEdge_60:
   \   00000650   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000652   0x....             LDR.N    R1,??DataTable8_7
   \   00000654   0x5C41             LDRB     R1,[R0, R1]
   \   00000656   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000658   0x....             LDR.N    R3,??DataTable8_8
   \   0000065A   0x5CD3             LDRB     R3,[R2, R3]
   \   0000065C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000065E   0x....             LDR.N    R4,??DataTable8_7
   \   00000660   0x5D14             LDRB     R4,[R2, R4]
   \   00000662   0x1B1B             SUBS     R3,R3,R4
   \   00000664   0x2402             MOVS     R4,#+2
   \   00000666   0xFB93 0xF3F4      SDIV     R3,R3,R4
   \   0000066A   0x1859             ADDS     R1,R3,R1
   \   0000066C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000066E   0x....             LDR.N    R3,??DataTable8
   \   00000670   0x54C1             STRB     R1,[R0, R3]
   \   00000672   0xE796             B.N      ??Deal_BlackEdge_56
   1183            }
   1184           
   1185           
   1186           
   1187           //对中线进行中值滤波
   1188           //对中线和边沿线进行中值滤波
   1189           for( i=bottom_whitebase + 1;i < top_whiteline-2;i++)
   \                     ??Deal_BlackEdge_57:
   \   00000674   0x....             LDR.N    R0,??DataTable8_2
   \   00000676   0x7800             LDRB     R0,[R0, #+0]
   \   00000678   0x1C40             ADDS     R0,R0,#+1
   \   0000067A   0xE0A5             B.N      ??Deal_BlackEdge_61
   1190           {
   1191             if((center_white[i] > center_white[i-1] && center_white[i] > center_white[i+1]) ||(center_white[i] < center_white[i-1] && center_white[i] < center_white[i+1]))
   \                     ??Deal_BlackEdge_62:
   \   0000067C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000067E   0x....             LDR.N    R1,??DataTable8
   \   00000680   0x1841             ADDS     R1,R0,R1
   \   00000682   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000686   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000688   0x....             LDR.N    R2,??DataTable8
   \   0000068A   0x5C82             LDRB     R2,[R0, R2]
   \   0000068C   0x4291             CMP      R1,R2
   \   0000068E   0xD208             BCS.N    ??Deal_BlackEdge_63
   \   00000690   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000692   0x....             LDR.N    R1,??DataTable8
   \   00000694   0x1841             ADDS     R1,R0,R1
   \   00000696   0x7849             LDRB     R1,[R1, #+1]
   \   00000698   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000069A   0x....             LDR.N    R2,??DataTable8
   \   0000069C   0x5C82             LDRB     R2,[R0, R2]
   \   0000069E   0x4291             CMP      R1,R2
   \   000006A0   0xD312             BCC.N    ??Deal_BlackEdge_64
   \                     ??Deal_BlackEdge_63:
   \   000006A2   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000006A4   0x....             LDR.N    R1,??DataTable8
   \   000006A6   0x5C41             LDRB     R1,[R0, R1]
   \   000006A8   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000006AA   0x....             LDR.N    R2,??DataTable8
   \   000006AC   0x1882             ADDS     R2,R0,R2
   \   000006AE   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \   000006B2   0x4291             CMP      R1,R2
   \   000006B4   0xD219             BCS.N    ??Deal_BlackEdge_65
   \   000006B6   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000006B8   0x....             LDR.N    R1,??DataTable8
   \   000006BA   0x5C41             LDRB     R1,[R0, R1]
   \   000006BC   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000006BE   0x....             LDR.N    R2,??DataTable8
   \   000006C0   0x1882             ADDS     R2,R0,R2
   \   000006C2   0x7852             LDRB     R2,[R2, #+1]
   \   000006C4   0x4291             CMP      R1,R2
   \   000006C6   0xD210             BCS.N    ??Deal_BlackEdge_65
   1192             {
   1193               center_white[i] = (center_white[i-1] + center_white[i+1])/2;
   \                     ??Deal_BlackEdge_64:
   \   000006C8   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000006CA   0x....             LDR.N    R1,??DataTable8
   \   000006CC   0x1841             ADDS     R1,R0,R1
   \   000006CE   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000006D2   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000006D4   0x....             LDR.N    R2,??DataTable8
   \   000006D6   0x1882             ADDS     R2,R0,R2
   \   000006D8   0x7852             LDRB     R2,[R2, #+1]
   \   000006DA   0xFA52 0xF181      UXTAB    R1,R2,R1
   \   000006DE   0x2202             MOVS     R2,#+2
   \   000006E0   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   000006E4   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000006E6   0x....             LDR.N    R2,??DataTable8
   \   000006E8   0x5481             STRB     R1,[R0, R2]
   1194             }
   1195                if((left_black[i] > left_black[i-1] && left_black[i] > left_black[i+1]) ||(left_black[i] < left_black[i-1] && left_black[i] < left_black[i+1]))
   \                     ??Deal_BlackEdge_65:
   \   000006EA   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000006EC   0x....             LDR.N    R1,??DataTable8_7
   \   000006EE   0x1841             ADDS     R1,R0,R1
   \   000006F0   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000006F4   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000006F6   0x....             LDR.N    R2,??DataTable8_7
   \   000006F8   0x5C82             LDRB     R2,[R0, R2]
   \   000006FA   0x4291             CMP      R1,R2
   \   000006FC   0xD208             BCS.N    ??Deal_BlackEdge_66
   \   000006FE   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000700   0x....             LDR.N    R1,??DataTable8_7
   \   00000702   0x1841             ADDS     R1,R0,R1
   \   00000704   0x7849             LDRB     R1,[R1, #+1]
   \   00000706   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000708   0x....             LDR.N    R2,??DataTable8_7
   \   0000070A   0x5C82             LDRB     R2,[R0, R2]
   \   0000070C   0x4291             CMP      R1,R2
   \   0000070E   0xD312             BCC.N    ??Deal_BlackEdge_67
   \                     ??Deal_BlackEdge_66:
   \   00000710   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000712   0x....             LDR.N    R1,??DataTable8_7
   \   00000714   0x5C41             LDRB     R1,[R0, R1]
   \   00000716   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000718   0x....             LDR.N    R2,??DataTable8_7
   \   0000071A   0x1882             ADDS     R2,R0,R2
   \   0000071C   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \   00000720   0x4291             CMP      R1,R2
   \   00000722   0xD219             BCS.N    ??Deal_BlackEdge_68
   \   00000724   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000726   0x....             LDR.N    R1,??DataTable8_7
   \   00000728   0x5C41             LDRB     R1,[R0, R1]
   \   0000072A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000072C   0x....             LDR.N    R2,??DataTable8_7
   \   0000072E   0x1882             ADDS     R2,R0,R2
   \   00000730   0x7852             LDRB     R2,[R2, #+1]
   \   00000732   0x4291             CMP      R1,R2
   \   00000734   0xD210             BCS.N    ??Deal_BlackEdge_68
   1196             {
   1197               left_black[i] = (left_black[i-1] + left_black[i+1])/2;
   \                     ??Deal_BlackEdge_67:
   \   00000736   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000738   0x....             LDR.N    R1,??DataTable8_7
   \   0000073A   0x1841             ADDS     R1,R0,R1
   \   0000073C   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000740   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000742   0x....             LDR.N    R2,??DataTable8_7
   \   00000744   0x1882             ADDS     R2,R0,R2
   \   00000746   0x7852             LDRB     R2,[R2, #+1]
   \   00000748   0xFA52 0xF181      UXTAB    R1,R2,R1
   \   0000074C   0x2202             MOVS     R2,#+2
   \   0000074E   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000752   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000754   0x....             LDR.N    R2,??DataTable8_7
   \   00000756   0x5481             STRB     R1,[R0, R2]
   1198             }
   1199                if((right_black[i] > right_black[i-1] && right_black[i] > right_black[i+1]) ||(right_black[i] < right_black[i-1] && right_black[i] < right_black[i+1]))
   \                     ??Deal_BlackEdge_68:
   \   00000758   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000075A   0x....             LDR.N    R1,??DataTable8_8
   \   0000075C   0x1841             ADDS     R1,R0,R1
   \   0000075E   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000762   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000764   0x....             LDR.N    R2,??DataTable8_8
   \   00000766   0x5C82             LDRB     R2,[R0, R2]
   \   00000768   0x4291             CMP      R1,R2
   \   0000076A   0xD208             BCS.N    ??Deal_BlackEdge_69
   \   0000076C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000076E   0x....             LDR.N    R1,??DataTable8_8
   \   00000770   0x1841             ADDS     R1,R0,R1
   \   00000772   0x7849             LDRB     R1,[R1, #+1]
   \   00000774   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000776   0x....             LDR.N    R2,??DataTable8_8
   \   00000778   0x5C82             LDRB     R2,[R0, R2]
   \   0000077A   0x4291             CMP      R1,R2
   \   0000077C   0xD312             BCC.N    ??Deal_BlackEdge_70
   \                     ??Deal_BlackEdge_69:
   \   0000077E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000780   0x....             LDR.N    R1,??DataTable8_8
   \   00000782   0x5C41             LDRB     R1,[R0, R1]
   \   00000784   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000786   0x....             LDR.N    R2,??DataTable8_8
   \   00000788   0x1882             ADDS     R2,R0,R2
   \   0000078A   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \   0000078E   0x4291             CMP      R1,R2
   \   00000790   0xD219             BCS.N    ??Deal_BlackEdge_71
   \   00000792   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000794   0x....             LDR.N    R1,??DataTable8_8
   \   00000796   0x5C41             LDRB     R1,[R0, R1]
   \   00000798   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000079A   0x....             LDR.N    R2,??DataTable8_8
   \   0000079C   0x1882             ADDS     R2,R0,R2
   \   0000079E   0x7852             LDRB     R2,[R2, #+1]
   \   000007A0   0x4291             CMP      R1,R2
   \   000007A2   0xD210             BCS.N    ??Deal_BlackEdge_71
   1200             {
   1201               right_black[i] = (right_black[i-1] + right_black[i+1])/2;
   \                     ??Deal_BlackEdge_70:
   \   000007A4   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000007A6   0x....             LDR.N    R1,??DataTable8_8
   \   000007A8   0x1841             ADDS     R1,R0,R1
   \   000007AA   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000007AE   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000007B0   0x....             LDR.N    R2,??DataTable8_8
   \   000007B2   0x1882             ADDS     R2,R0,R2
   \   000007B4   0x7852             LDRB     R2,[R2, #+1]
   \   000007B6   0xFA52 0xF181      UXTAB    R1,R2,R1
   \   000007BA   0x2202             MOVS     R2,#+2
   \   000007BC   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   000007C0   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000007C2   0x....             LDR.N    R2,??DataTable8_8
   \   000007C4   0x5481             STRB     R1,[R0, R2]
   1202             }
   1203           } 
   \                     ??Deal_BlackEdge_71:
   \   000007C6   0x1C40             ADDS     R0,R0,#+1
   \                     ??Deal_BlackEdge_61:
   \   000007C8   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000007CA   0x....             LDR.N    R1,??DataTable8_4
   \   000007CC   0x7809             LDRB     R1,[R1, #+0]
   \   000007CE   0x1E89             SUBS     R1,R1,#+2
   \   000007D0   0x4288             CMP      R0,R1
   \   000007D2   0xF6FF 0xAF53      BLT.W    ??Deal_BlackEdge_62
   1204           
   1205          }
   \   000007D6   0xBCF0             POP      {R4-R7}
   \   000007D8   0x4770             BX       LR               ;; return
   1206          
   1207          /*这个程序包含了两部分，其一是赛道特征的提取；其二是赛道类型的判断
   1208          */

   \                                 In section .text, align 2, keep-with-next
   1209          void get_line_information(void)
   1210          {
   \                     get_line_information:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   1211            int16 i;
   1212            uint8 ramp_count = 0;  //用于记录宽度超出限制的行的个数
   \   00000002   0x2100             MOVS     R1,#+0
   1213            uint16 temp_center_line = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   1214            center_lost_hang = 0;
   \   00000006   0x.... 0x....      LDR.W    R2,??DataTable11
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0x7013             STRB     R3,[R2, #+0]
   1215            
   1216              /*程序的开始首先对中线出现断点的情况进行修补
   1217            当图像的中线出现了巨大的跳变时，他前面的线全部用左右两边的中值代替
   1218            */
   1219            for(i = bottom_whitebase + 10 ; i < top_whiteline-5;i++)  //基准行上的偏差不用处理
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable11_1
   \   00000012   0x7812             LDRB     R2,[R2, #+0]
   \   00000014   0xF112 0x040A      ADDS     R4,R2,#+10
   \   00000018   0xE000             B.N      ??get_line_information_0
   \                     ??get_line_information_1:
   \   0000001A   0x1C64             ADDS     R4,R4,#+1
   \                     ??get_line_information_0:
   \   0000001C   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x1F40             SUBS     R0,R0,#+5
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xDA20             BGE.N    ??get_line_information_2
   1220            {
   1221              if(f_abs16(center_white[i] - center_white[i+2]) > CENTER_LOST_POINT
   1222                 &&f_abs16(center_white[i] - center_white[i+3]) > CENTER_LOST_POINT)
   \   0000002A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   00000030   0x5C20             LDRB     R0,[R4, R0]
   \   00000032   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   00000038   0x1861             ADDS     R1,R4,R1
   \   0000003A   0x7889             LDRB     R1,[R1, #+2]
   \   0000003C   0x1A40             SUBS     R0,R0,R1
   \   0000003E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000040   0x.... 0x....      BL       f_abs16
   \   00000044   0x2815             CMP      R0,#+21
   \   00000046   0xDBE8             BLT.N    ??get_line_information_1
   \   00000048   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   0000004E   0x5C20             LDRB     R0,[R4, R0]
   \   00000050   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   00000056   0x1861             ADDS     R1,R4,R1
   \   00000058   0x78C9             LDRB     R1,[R1, #+3]
   \   0000005A   0x1A40             SUBS     R0,R0,R1
   \   0000005C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000005E   0x.... 0x....      BL       f_abs16
   \   00000062   0x2815             CMP      R0,#+21
   \   00000064   0xDBD9             BLT.N    ??get_line_information_1
   1223              {
   1224                center_lost_hang = i;
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable11
   \   0000006A   0x7004             STRB     R4,[R0, #+0]
   1225                break;
   1226              }
   1227            }
   1228             if(center_lost_hang >0)
   \                     ??get_line_information_2:
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000070   0x7800             LDRB     R0,[R0, #+0]
   \   00000072   0x2801             CMP      R0,#+1
   \   00000074   0xD31B             BCC.N    ??get_line_information_3
   1229             {
   1230               for( i = bottom_whitebase ;  i< center_lost_hang + 2;i++)
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   0000007A   0x7804             LDRB     R4,[R0, #+0]
   \   0000007C   0xE010             B.N      ??get_line_information_4
   1231               {
   1232                 center_white[i] = (left_black[i]+right_black[i])/2;  
   \                     ??get_line_information_5:
   \   0000007E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable11_4
   \   00000084   0x5C20             LDRB     R0,[R4, R0]
   \   00000086   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable11_5
   \   0000008C   0x5C61             LDRB     R1,[R4, R1]
   \   0000008E   0x1808             ADDS     R0,R1,R0
   \   00000090   0x2102             MOVS     R1,#+2
   \   00000092   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000096   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   0000009C   0x5460             STRB     R0,[R4, R1]
   1233               }
   \   0000009E   0x1C64             ADDS     R4,R4,#+1
   \                     ??get_line_information_4:
   \   000000A0   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable11
   \   000000A6   0x7800             LDRB     R0,[R0, #+0]
   \   000000A8   0x1C80             ADDS     R0,R0,#+2
   \   000000AA   0x4284             CMP      R4,R0
   \   000000AC   0xDBE7             BLT.N    ??get_line_information_5
   1234             }
   1235            
   1236            for( i=top_whiteline;i>20;i--)
   \                     ??get_line_information_3:
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   000000B2   0x7804             LDRB     R4,[R0, #+0]
   \   000000B4   0xE000             B.N      ??get_line_information_6
   \                     ??get_line_information_7:
   \   000000B6   0x1E64             SUBS     R4,R4,#+1
   \                     ??get_line_information_6:
   \   000000B8   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000000BA   0x2C15             CMP      R4,#+21
   \   000000BC   0xDB42             BLT.N    ??get_line_information_8
   1237            {
   1238              if((f_abs16(center_white[i] - left_black[i])<=5 &&f_abs16(center_white[i-1] - left_black[i-1])<=5)
   1239                 ||(f_abs16(center_white[i] - right_black[i])<=5 &&f_abs16(center_white[i-1] - right_black[i-1])<=5))
   \   000000BE   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   000000C4   0x5C20             LDRB     R0,[R4, R0]
   \   000000C6   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000000C8   0x.... 0x....      LDR.W    R1,??DataTable11_4
   \   000000CC   0x5C61             LDRB     R1,[R4, R1]
   \   000000CE   0x1A40             SUBS     R0,R0,R1
   \   000000D0   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000D2   0x.... 0x....      BL       f_abs16
   \   000000D6   0x2806             CMP      R0,#+6
   \   000000D8   0xDA11             BGE.N    ??get_line_information_9
   \   000000DA   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   000000E0   0x1820             ADDS     R0,R4,R0
   \   000000E2   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   000000E6   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000000E8   0x.... 0x....      LDR.W    R1,??DataTable11_4
   \   000000EC   0x1861             ADDS     R1,R4,R1
   \   000000EE   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000000F2   0x1A40             SUBS     R0,R0,R1
   \   000000F4   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000F6   0x.... 0x....      BL       f_abs16
   \   000000FA   0x2806             CMP      R0,#+6
   \   000000FC   0xDB1F             BLT.N    ??get_line_information_10
   \                     ??get_line_information_9:
   \   000000FE   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000100   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   00000104   0x5C20             LDRB     R0,[R4, R0]
   \   00000106   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000108   0x.... 0x....      LDR.W    R1,??DataTable11_5
   \   0000010C   0x5C61             LDRB     R1,[R4, R1]
   \   0000010E   0x1A40             SUBS     R0,R0,R1
   \   00000110   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000112   0x.... 0x....      BL       f_abs16
   \   00000116   0x2806             CMP      R0,#+6
   \   00000118   0xDACD             BGE.N    ??get_line_information_7
   \   0000011A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000011C   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   00000120   0x1820             ADDS     R0,R4,R0
   \   00000122   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   00000126   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000128   0x.... 0x....      LDR.W    R1,??DataTable11_5
   \   0000012C   0x1861             ADDS     R1,R4,R1
   \   0000012E   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000132   0x1A40             SUBS     R0,R0,R1
   \   00000134   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000136   0x.... 0x....      BL       f_abs16
   \   0000013A   0x2806             CMP      R0,#+6
   \   0000013C   0xDABB             BGE.N    ??get_line_information_7
   1240              {
   1241                top_whiteline = i;
   \                     ??get_line_information_10:
   \   0000013E   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000142   0x7004             STRB     R4,[R0, #+0]
   1242                break;
   1243              }
   1244            }
   1245            if(top_whiteline < ROW - 2)
   \                     ??get_line_information_8:
   \   00000144   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000148   0x7800             LDRB     R0,[R0, #+0]
   \   0000014A   0x283F             CMP      R0,#+63
   \   0000014C   0xD217             BCS.N    ??get_line_information_11
   1246            {
   1247              for(i = top_whiteline+1;i<ROW;i++)
   \   0000014E   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000152   0x7800             LDRB     R0,[R0, #+0]
   \   00000154   0x1C44             ADDS     R4,R0,#+1
   \   00000156   0xE00F             B.N      ??get_line_information_12
   1248              {
   1249                center_white[i] =MID;
   \                     ??get_line_information_13:
   \   00000158   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000015A   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   0000015E   0x214F             MOVS     R1,#+79
   \   00000160   0x5421             STRB     R1,[R4, R0]
   1250                right_black[i] = MID+2;
   \   00000162   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000164   0x.... 0x....      LDR.W    R0,??DataTable11_5
   \   00000168   0x2151             MOVS     R1,#+81
   \   0000016A   0x5421             STRB     R1,[R4, R0]
   1251                left_black[i] = MID-2;
   \   0000016C   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000016E   0x.... 0x....      LDR.W    R0,??DataTable11_4
   \   00000172   0x214D             MOVS     R1,#+77
   \   00000174   0x5421             STRB     R1,[R4, R0]
   1252              }
   \   00000176   0x1C64             ADDS     R4,R4,#+1
   \                     ??get_line_information_12:
   \   00000178   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000017A   0x2C41             CMP      R4,#+65
   \   0000017C   0xDBEC             BLT.N    ??get_line_information_13
   1253            }
   1254            
   1255            
   1256            //图像的中心线出来之后，首先要确定能够到那些行，在此之后的行全部用控制的行的
   1257             /////////////////////求取控制的最高有效行////////////////////////////////
   1258            danger_count = 0;
   \                     ??get_line_information_11:
   \   0000017E   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   00000182   0x2100             MOVS     R1,#+0
   \   00000184   0x8001             STRH     R1,[R0, #+0]
   1259            danger_flag = 1;//没有判断之前都认为是危险状态
   \   00000186   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   0000018A   0x2101             MOVS     R1,#+1
   \   0000018C   0x7001             STRB     R1,[R0, #+0]
   1260            control_top_whiteline = top_whiteline;
   \   0000018E   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000192   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   00000196   0x7809             LDRB     R1,[R1, #+0]
   \   00000198   0x8001             STRH     R1,[R0, #+0]
   \   0000019A   0xE00A             B.N      ??get_line_information_14
   1261            
   1262            ////////////////////计算控制的最高有效行//////////////////////
   1263               while(danger_flag ==1)
   1264               {
   1265                 for(i = control_top_whiteline;i>=deal_start_line ;i--)//表示从上向下遍历
   1266                  {
   1267                    temp_center_line = center_white[control_top_whiteline] + (i - (control_top_whiteline)) *(center_white[deal_start_line] - center_white[control_top_whiteline])/( deal_start_line-(control_top_whiteline) );
   1268                  if( right_black[i] < COLUMN - 2 && left_black[i] > 1&&
   1269                     (right_black[i] - temp_center_line < (refer_road_width[i]/5) || (temp_center_line - left_black[i] < (refer_road_width[i]/5))))
   1270                      danger_count++;  
   1271                  }
   1272                 
   1273                 if(danger_count >0)
   1274                 {
   1275                   control_top_whiteline --;  
   \                     ??get_line_information_15:
   \   0000019C   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   000001A0   0x8800             LDRH     R0,[R0, #+0]
   \   000001A2   0x1E40             SUBS     R0,R0,#+1
   \   000001A4   0x.... 0x....      LDR.W    R1,??DataTable11_8
   \   000001A8   0x8008             STRH     R0,[R1, #+0]
   1276                   danger_count = 0;
   \   000001AA   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   000001AE   0x2100             MOVS     R1,#+0
   \   000001B0   0x8001             STRH     R1,[R0, #+0]
   1277                 }
   \                     ??get_line_information_14:
   \   000001B2   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   000001B6   0x7800             LDRB     R0,[R0, #+0]
   \   000001B8   0x2800             CMP      R0,#+0
   \   000001BA   0xD06A             BEQ.N    ??get_line_information_16
   \   000001BC   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   000001C0   0xF9B0 0x4000      LDRSH    R4,[R0, #+0]
   \   000001C4   0xE054             B.N      ??get_line_information_17
   \                     ??get_line_information_18:
   \   000001C6   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   000001CA   0x8800             LDRH     R0,[R0, #+0]
   \   000001CC   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   000001D0   0x5C40             LDRB     R0,[R0, R1]
   \   000001D2   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000001D4   0x.... 0x....      LDR.W    R1,??DataTable11_8
   \   000001D8   0x8809             LDRH     R1,[R1, #+0]
   \   000001DA   0x1A61             SUBS     R1,R4,R1
   \   000001DC   0x.... 0x....      LDR.W    R2,??DataTable11_9
   \   000001E0   0x7812             LDRB     R2,[R2, #+0]
   \   000001E2   0x.... 0x....      LDR.W    R3,??DataTable11_3
   \   000001E6   0x5CD2             LDRB     R2,[R2, R3]
   \   000001E8   0x.... 0x....      LDR.W    R3,??DataTable11_8
   \   000001EC   0x881B             LDRH     R3,[R3, #+0]
   \   000001EE   0x.... 0x....      LDR.W    R5,??DataTable11_3
   \   000001F2   0x5D5B             LDRB     R3,[R3, R5]
   \   000001F4   0x1AD2             SUBS     R2,R2,R3
   \   000001F6   0x4351             MULS     R1,R2,R1
   \   000001F8   0x.... 0x....      LDR.W    R2,??DataTable11_9
   \   000001FC   0x7812             LDRB     R2,[R2, #+0]
   \   000001FE   0x.... 0x....      LDR.W    R3,??DataTable11_8
   \   00000202   0x881B             LDRH     R3,[R3, #+0]
   \   00000204   0x1AD2             SUBS     R2,R2,R3
   \   00000206   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   0000020A   0x1808             ADDS     R0,R1,R0
   \   0000020C   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000020E   0x.... 0x....      LDR.W    R1,??DataTable11_5
   \   00000212   0x5C61             LDRB     R1,[R4, R1]
   \   00000214   0x299D             CMP      R1,#+157
   \   00000216   0xD22A             BCS.N    ??get_line_information_19
   \   00000218   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000021A   0x.... 0x....      LDR.W    R1,??DataTable11_4
   \   0000021E   0x5C61             LDRB     R1,[R4, R1]
   \   00000220   0x2902             CMP      R1,#+2
   \   00000222   0xD324             BCC.N    ??get_line_information_19
   \   00000224   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000226   0x.... 0x....      LDR.W    R1,??DataTable11_10
   \   0000022A   0x5C61             LDRB     R1,[R4, R1]
   \   0000022C   0x2205             MOVS     R2,#+5
   \   0000022E   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000232   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000234   0x.... 0x....      LDR.W    R2,??DataTable11_5
   \   00000238   0x5CA2             LDRB     R2,[R4, R2]
   \   0000023A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000023C   0x1A12             SUBS     R2,R2,R0
   \   0000023E   0x428A             CMP      R2,R1
   \   00000240   0xDB0E             BLT.N    ??get_line_information_20
   \   00000242   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000244   0x.... 0x....      LDR.W    R1,??DataTable11_10
   \   00000248   0x5C61             LDRB     R1,[R4, R1]
   \   0000024A   0x2205             MOVS     R2,#+5
   \   0000024C   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000250   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000252   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000254   0x.... 0x....      LDR.W    R2,??DataTable11_4
   \   00000258   0x5CA2             LDRB     R2,[R4, R2]
   \   0000025A   0x1A80             SUBS     R0,R0,R2
   \   0000025C   0x4288             CMP      R0,R1
   \   0000025E   0xDA06             BGE.N    ??get_line_information_19
   \                     ??get_line_information_20:
   \   00000260   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   00000264   0x8800             LDRH     R0,[R0, #+0]
   \   00000266   0x1C40             ADDS     R0,R0,#+1
   \   00000268   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   0000026C   0x8008             STRH     R0,[R1, #+0]
   \                     ??get_line_information_19:
   \   0000026E   0x1E64             SUBS     R4,R4,#+1
   \                     ??get_line_information_17:
   \   00000270   0x.... 0x....      LDR.W    R0,??DataTable11_9
   \   00000274   0x7800             LDRB     R0,[R0, #+0]
   \   00000276   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000278   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000027A   0x4284             CMP      R4,R0
   \   0000027C   0xDAA3             BGE.N    ??get_line_information_18
   \   0000027E   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   00000282   0x8800             LDRH     R0,[R0, #+0]
   \   00000284   0x2801             CMP      R0,#+1
   \   00000286   0xD289             BCS.N    ??get_line_information_15
   1278                 else
   1279                 {
   1280                   danger_flag = 0;//危险消除
   \   00000288   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   0000028C   0x2100             MOVS     R1,#+0
   \   0000028E   0x7001             STRB     R1,[R0, #+0]
   \   00000290   0xE78F             B.N      ??get_line_information_14
   1281                 }
   1282               }
   1283               
   1284               
   1285            /////////////////赛道的类型的判断/////////////////////////
   1286              S_right = 0;//向右拐的计数
   \                     ??get_line_information_16:
   \   00000292   0x.... 0x....      LDR.W    R0,??DataTable11_11
   \   00000296   0x2100             MOVS     R1,#+0
   \   00000298   0x7001             STRB     R1,[R0, #+0]
   1287              S_left =0 ; //向左拐计数
   \   0000029A   0x.... 0x....      LDR.W    R0,??DataTable11_12
   \   0000029E   0x2100             MOVS     R1,#+0
   \   000002A0   0x7001             STRB     R1,[R0, #+0]
   1288              S_straight = 0;
   \   000002A2   0x.... 0x....      LDR.W    R0,??DataTable11_13
   \   000002A6   0x2100             MOVS     R1,#+0
   \   000002A8   0x7001             STRB     R1,[R0, #+0]
   1289            for( i=bottom_whitebase ;i < control_top_whiteline;i++)
   \   000002AA   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   000002AE   0x7804             LDRB     R4,[R0, #+0]
   \   000002B0   0xE007             B.N      ??get_line_information_21
   1290           {
   1291             if(center_white[i+1]- center_white[i] > 1)
   1292             {
   1293               S_right++; //S 弯右加加
   1294             }
   1295             else if(center_white[i]- center_white[i+1] > 1)
   1296             {
   1297               S_left++; //S 弯左加加
   1298             }
   1299             else
   1300             {
   1301               S_straight++;
   \                     ??get_line_information_22:
   \   000002B2   0x.... 0x....      LDR.W    R0,??DataTable11_13
   \   000002B6   0x7800             LDRB     R0,[R0, #+0]
   \   000002B8   0x1C40             ADDS     R0,R0,#+1
   \   000002BA   0x.... 0x....      LDR.W    R1,??DataTable11_13
   \   000002BE   0x7008             STRB     R0,[R1, #+0]
   1302             }
   \                     ??get_line_information_23:
   \   000002C0   0x1C64             ADDS     R4,R4,#+1
   \                     ??get_line_information_21:
   \   000002C2   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000002C4   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   000002C8   0x8800             LDRH     R0,[R0, #+0]
   \   000002CA   0x4284             CMP      R4,R0
   \   000002CC   0xDA27             BGE.N    ??get_line_information_24
   \   000002CE   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000002D0   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   000002D4   0x1820             ADDS     R0,R4,R0
   \   000002D6   0x7840             LDRB     R0,[R0, #+1]
   \   000002D8   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000002DA   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   000002DE   0x5C61             LDRB     R1,[R4, R1]
   \   000002E0   0x1A40             SUBS     R0,R0,R1
   \   000002E2   0x2802             CMP      R0,#+2
   \   000002E4   0xDB07             BLT.N    ??get_line_information_25
   \   000002E6   0x.... 0x....      LDR.W    R0,??DataTable11_11
   \   000002EA   0x7800             LDRB     R0,[R0, #+0]
   \   000002EC   0x1C40             ADDS     R0,R0,#+1
   \   000002EE   0x.... 0x....      LDR.W    R1,??DataTable11_11
   \   000002F2   0x7008             STRB     R0,[R1, #+0]
   \   000002F4   0xE7E4             B.N      ??get_line_information_23
   \                     ??get_line_information_25:
   \   000002F6   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000002F8   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   000002FC   0x5C20             LDRB     R0,[R4, R0]
   \   000002FE   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000300   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   00000304   0x1861             ADDS     R1,R4,R1
   \   00000306   0x7849             LDRB     R1,[R1, #+1]
   \   00000308   0x1A40             SUBS     R0,R0,R1
   \   0000030A   0x2802             CMP      R0,#+2
   \   0000030C   0xDBD1             BLT.N    ??get_line_information_22
   \   0000030E   0x.... 0x....      LDR.W    R0,??DataTable11_12
   \   00000312   0x7800             LDRB     R0,[R0, #+0]
   \   00000314   0x1C40             ADDS     R0,R0,#+1
   \   00000316   0x.... 0x....      LDR.W    R1,??DataTable11_12
   \   0000031A   0x7008             STRB     R0,[R1, #+0]
   \   0000031C   0xE7D0             B.N      ??get_line_information_23
   1303           }
   1304           
   1305           /*对赛道的判断
   1306           对于赛道的判断 只是区分直道(1) 、波浪弯道(2)、 入弯(3)、弯道(4) */
   1307           
   1308           
   1309           if( control_top_whiteline >= 62)
   \                     ??get_line_information_24:
   \   0000031E   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000322   0x8800             LDRH     R0,[R0, #+0]
   \   00000324   0x283E             CMP      R0,#+62
   \   00000326   0xD324             BCC.N    ??get_line_information_26
   1310           {
   1311             if(S_left<4 && S_right < 4 )
   \   00000328   0x.... 0x....      LDR.W    R0,??DataTable11_12
   \   0000032C   0x7800             LDRB     R0,[R0, #+0]
   \   0000032E   0x2804             CMP      R0,#+4
   \   00000330   0xD209             BCS.N    ??get_line_information_27
   \   00000332   0x.... 0x....      LDR.W    R0,??DataTable11_11
   \   00000336   0x7800             LDRB     R0,[R0, #+0]
   \   00000338   0x2804             CMP      R0,#+4
   \   0000033A   0xD204             BCS.N    ??get_line_information_27
   1312                direction = 1;  //直道
   \   0000033C   0x.... 0x....      LDR.W    R0,??DataTable11_14
   \   00000340   0x2101             MOVS     R1,#+1
   \   00000342   0x7001             STRB     R1,[R0, #+0]
   \   00000344   0xE02F             B.N      ??get_line_information_28
   1313             else if(f_abs16(S_left-S_right) < 15 )
   \                     ??get_line_information_27:
   \   00000346   0x.... 0x....      LDR.W    R0,??DataTable11_12
   \   0000034A   0x7800             LDRB     R0,[R0, #+0]
   \   0000034C   0x.... 0x....      LDR.W    R1,??DataTable11_11
   \   00000350   0x7809             LDRB     R1,[R1, #+0]
   \   00000352   0x1A40             SUBS     R0,R0,R1
   \   00000354   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000356   0x.... 0x....      BL       f_abs16
   \   0000035A   0x280F             CMP      R0,#+15
   \   0000035C   0xDA04             BGE.N    ??get_line_information_29
   1314                direction = 2;  //波浪弯道
   \   0000035E   0x.... 0x....      LDR.W    R0,??DataTable11_14
   \   00000362   0x2102             MOVS     R1,#+2
   \   00000364   0x7001             STRB     R1,[R0, #+0]
   \   00000366   0xE01E             B.N      ??get_line_information_28
   1315             else
   1316               direction =3;// re_direction;
   \                     ??get_line_information_29:
   \   00000368   0x.... 0x....      LDR.W    R0,??DataTable11_14
   \   0000036C   0x2103             MOVS     R1,#+3
   \   0000036E   0x7001             STRB     R1,[R0, #+0]
   \   00000370   0xE019             B.N      ??get_line_information_28
   1317           }
   1318           else if( control_top_whiteline >= 50 && control_top_whiteline < 62)
   \                     ??get_line_information_26:
   \   00000372   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000376   0x8800             LDRH     R0,[R0, #+0]
   \   00000378   0x3832             SUBS     R0,R0,#+50
   \   0000037A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000037C   0x280C             CMP      R0,#+12
   \   0000037E   0xD204             BCS.N    ??get_line_information_30
   1319           {
   1320             direction = 3;  //入弯道
   \   00000380   0x.... 0x....      LDR.W    R0,??DataTable11_14
   \   00000384   0x2103             MOVS     R1,#+3
   \   00000386   0x7001             STRB     R1,[R0, #+0]
   \   00000388   0xE00D             B.N      ??get_line_information_28
   1321           }
   1322           else
   1323           {
   1324             if(ramp_flag == 1)
   \                     ??get_line_information_30:
   \   0000038A   0x.... 0x....      LDR.W    R0,??DataTable11_15
   \   0000038E   0x7800             LDRB     R0,[R0, #+0]
   \   00000390   0x2800             CMP      R0,#+0
   \   00000392   0xD004             BEQ.N    ??get_line_information_31
   1325                direction = 1;//坡道视为直道
   \   00000394   0x.... 0x....      LDR.W    R0,??DataTable11_14
   \   00000398   0x2101             MOVS     R1,#+1
   \   0000039A   0x7001             STRB     R1,[R0, #+0]
   \   0000039C   0xE003             B.N      ??get_line_information_28
   1326             else
   1327                direction = 4;  //弯道当中
   \                     ??get_line_information_31:
   \   0000039E   0x.... 0x....      LDR.W    R0,??DataTable11_14
   \   000003A2   0x2104             MOVS     R1,#+4
   \   000003A4   0x7001             STRB     R1,[R0, #+0]
   1328           }
   1329           re_direction =direction ;
   \                     ??get_line_information_28:
   \   000003A6   0x.... 0x....      LDR.W    R0,??DataTable11_16
   \   000003AA   0x.... 0x....      LDR.W    R1,??DataTable11_14
   \   000003AE   0x7809             LDRB     R1,[R1, #+0]
   \   000003B0   0x7001             STRB     R1,[R0, #+0]
   1330           //////////////////////赛道的类型的判断结束///////////////////////////////
   1331           
   1332          
   1333               
   1334            //////////////////////////////对赛道进行优化//////////////////////////////
   1335           //需要注意的是既然已经将赛道的类型判断出来了，那么就可以按照不同的赛道实现不同的优化特别是针对波浪弯道o
   1336           if(direction == 2)  //波浪弯道  控制行大于60
   \   000003B2   0x.... 0x....      LDR.W    R0,??DataTable11_14
   \   000003B6   0x7800             LDRB     R0,[R0, #+0]
   \   000003B8   0x2802             CMP      R0,#+2
   \   000003BA   0xD14F             BNE.N    ??get_line_information_32
   1337           {
   1338             for( i=bottom_whitebase ;i <= control_top_whiteline;i++)//无论是什么样的赛道，将中线向图像的中心平移
   \   000003BC   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   000003C0   0x7804             LDRB     R4,[R0, #+0]
   \   000003C2   0xE005             B.N      ??get_line_information_33
   1339               {
   1340                if(center_white[i] > MID)//归中
   1341                {
   1342                  if( center_white[i] - (control_top_whiteline - 62 ) >= MID )
   1343                    center_white[i] = center_white[i] - (control_top_whiteline - 62 );
   1344                  else
   1345                    center_white[i] = MID;
   1346                }
   1347                else 
   1348                {
   1349                  if(center_white[i] + (control_top_whiteline - 62 ) <= MID)  //归中防止在波浪弯道的较大的打角
   1350                    center_white[i] = center_white[i] + (control_top_whiteline - 62 );  
   1351                  else
   1352                    center_white[i] = MID; 
   \                     ??get_line_information_34:
   \   000003C4   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000003C6   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   000003CA   0x214F             MOVS     R1,#+79
   \   000003CC   0x5421             STRB     R1,[R4, R0]
   \                     ??get_line_information_35:
   \   000003CE   0x1C64             ADDS     R4,R4,#+1
   \                     ??get_line_information_33:
   \   000003D0   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   000003D4   0x8800             LDRH     R0,[R0, #+0]
   \   000003D6   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000003D8   0x42A0             CMP      R0,R4
   \   000003DA   0xF2C0 0x8083      BLT.W    ??get_line_information_36
   \   000003DE   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000003E0   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   000003E4   0x5C20             LDRB     R0,[R4, R0]
   \   000003E6   0x2850             CMP      R0,#+80
   \   000003E8   0xD31E             BCC.N    ??get_line_information_37
   \   000003EA   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000003EC   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   000003F0   0x5C20             LDRB     R0,[R4, R0]
   \   000003F2   0x.... 0x....      LDR.W    R1,??DataTable11_8
   \   000003F6   0x8809             LDRH     R1,[R1, #+0]
   \   000003F8   0x1A40             SUBS     R0,R0,R1
   \   000003FA   0x303E             ADDS     R0,R0,#+62
   \   000003FC   0x284F             CMP      R0,#+79
   \   000003FE   0xDB0D             BLT.N    ??get_line_information_38
   \   00000400   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000402   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   00000406   0x5C20             LDRB     R0,[R4, R0]
   \   00000408   0x.... 0x....      LDR.W    R1,??DataTable11_8
   \   0000040C   0x8809             LDRH     R1,[R1, #+0]
   \   0000040E   0x1A40             SUBS     R0,R0,R1
   \   00000410   0x38C2             SUBS     R0,R0,#+194
   \   00000412   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000414   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   00000418   0x5460             STRB     R0,[R4, R1]
   \   0000041A   0xE7D8             B.N      ??get_line_information_35
   \                     ??get_line_information_38:
   \   0000041C   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000041E   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   00000422   0x214F             MOVS     R1,#+79
   \   00000424   0x5421             STRB     R1,[R4, R0]
   \   00000426   0xE7D2             B.N      ??get_line_information_35
   \                     ??get_line_information_37:
   \   00000428   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000042A   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   0000042E   0x5C20             LDRB     R0,[R4, R0]
   \   00000430   0x.... 0x....      LDR.W    R1,??DataTable11_8
   \   00000434   0x8809             LDRH     R1,[R1, #+0]
   \   00000436   0xFA10 0xF081      UXTAH    R0,R0,R1
   \   0000043A   0x383E             SUBS     R0,R0,#+62
   \   0000043C   0x2850             CMP      R0,#+80
   \   0000043E   0xDAC1             BGE.N    ??get_line_information_34
   \   00000440   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000442   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   00000446   0x5C20             LDRB     R0,[R4, R0]
   \   00000448   0x.... 0x....      LDR.W    R1,??DataTable11_8
   \   0000044C   0x8809             LDRH     R1,[R1, #+0]
   \   0000044E   0x393E             SUBS     R1,R1,#+62
   \   00000450   0x1808             ADDS     R0,R1,R0
   \   00000452   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000454   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   00000458   0x5460             STRB     R0,[R4, R1]
   \   0000045A   0xE7B8             B.N      ??get_line_information_35
   1353                }
   1354               }
   1355           }
   1356           else if(direction != 1 )   //直线状态不进行归中，防止直道漂浮
   \                     ??get_line_information_32:
   \   0000045C   0x.... 0x....      LDR.W    R0,??DataTable11_14
   \   00000460   0x7800             LDRB     R0,[R0, #+0]
   \   00000462   0x2801             CMP      R0,#+1
   \   00000464   0xD03E             BEQ.N    ??get_line_information_36
   1357            {
   1358             for( i=bottom_whitebase ;i <= control_top_whiteline;i++)//无论是什么样的赛道，将中线向图像的中心平移
   \   00000466   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   0000046A   0x7804             LDRB     R4,[R0, #+0]
   \   0000046C   0xE005             B.N      ??get_line_information_39
   1359               {
   1360                if(center_white[i] > MID)//归中
   1361                {
   1362                  if( center_white[i] - 1 >= MID )
   1363                    center_white[i] = center_white[i] - 1;
   1364                  else
   1365                    center_white[i] = MID;
   1366                }
   1367                else 
   1368                {
   1369                  if(center_white[i] + 1 <= MID)  //归中防止在波浪弯道的较大的打角
   1370                    center_white[i] = center_white[i] + 1;  
   1371                  else
   1372                    center_white[i] = MID; 
   \                     ??get_line_information_40:
   \   0000046E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000470   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   00000474   0x214F             MOVS     R1,#+79
   \   00000476   0x5421             STRB     R1,[R4, R0]
   \                     ??get_line_information_41:
   \   00000478   0x1C64             ADDS     R4,R4,#+1
   \                     ??get_line_information_39:
   \   0000047A   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   0000047E   0x8800             LDRH     R0,[R0, #+0]
   \   00000480   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000482   0x42A0             CMP      R0,R4
   \   00000484   0xDB2E             BLT.N    ??get_line_information_36
   \   00000486   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000488   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   0000048C   0x5C20             LDRB     R0,[R4, R0]
   \   0000048E   0x2850             CMP      R0,#+80
   \   00000490   0xD316             BCC.N    ??get_line_information_42
   \   00000492   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000494   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   00000498   0x5C20             LDRB     R0,[R4, R0]
   \   0000049A   0x1E40             SUBS     R0,R0,#+1
   \   0000049C   0x284F             CMP      R0,#+79
   \   0000049E   0xDB09             BLT.N    ??get_line_information_43
   \   000004A0   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000004A2   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   000004A6   0x5C20             LDRB     R0,[R4, R0]
   \   000004A8   0x1E40             SUBS     R0,R0,#+1
   \   000004AA   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000004AC   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   000004B0   0x5460             STRB     R0,[R4, R1]
   \   000004B2   0xE7E1             B.N      ??get_line_information_41
   \                     ??get_line_information_43:
   \   000004B4   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000004B6   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   000004BA   0x214F             MOVS     R1,#+79
   \   000004BC   0x5421             STRB     R1,[R4, R0]
   \   000004BE   0xE7DB             B.N      ??get_line_information_41
   \                     ??get_line_information_42:
   \   000004C0   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000004C2   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   000004C6   0x5C20             LDRB     R0,[R4, R0]
   \   000004C8   0x1C40             ADDS     R0,R0,#+1
   \   000004CA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000004CC   0x2850             CMP      R0,#+80
   \   000004CE   0xD2CE             BCS.N    ??get_line_information_40
   \   000004D0   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000004D2   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   000004D6   0x5C20             LDRB     R0,[R4, R0]
   \   000004D8   0x1C40             ADDS     R0,R0,#+1
   \   000004DA   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000004DC   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   000004E0   0x5460             STRB     R0,[R4, R1]
   \   000004E2   0xE7C9             B.N      ??get_line_information_41
   1373                }
   1374               }
   1375           }
   1376          //////////////////////////////对赛道的优化结束//////////////////////////////
   1377            /*
   1378           对赛道信息的提取，主要包括以下几个量。
   1379           只是对处于控制行一下的中线求取平均值，
   1380           */
   1381          
   1382           //////////////////////对图像的平均值的提取/////////////////////
   1383            center_average = 0;//清零
   \                     ??get_line_information_36:
   \   000004E4   0x.... 0x....      LDR.W    R0,??DataTable11_17
   \   000004E8   0x2100             MOVS     R1,#+0
   \   000004EA   0x6001             STR      R1,[R0, #+0]
   1384            center_error_average = 0;
   \   000004EC   0x.... 0x....      LDR.W    R0,??DataTable11_18
   \   000004F0   0x2100             MOVS     R1,#+0
   \   000004F2   0x8001             STRH     R1,[R0, #+0]
   1385            if(control_top_whiteline > 50)
   \   000004F4   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   000004F8   0x8800             LDRH     R0,[R0, #+0]
   \   000004FA   0x2833             CMP      R0,#+51
   \   000004FC   0xD364             BCC.N    ??get_line_information_44
   1386            {
   1387              for(i = bottom_whitebase+1;i<=control_top_whiteline- 10;i++)
   \   000004FE   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00000502   0x7800             LDRB     R0,[R0, #+0]
   \   00000504   0x1C44             ADDS     R4,R0,#+1
   \   00000506   0xE028             B.N      ??get_line_information_45
   1388             {
   1389               center_average +=  center_white[i];
   \                     ??get_line_information_46:
   \   00000508   0x.... 0x....      LDR.W    R0,??DataTable11_17
   \   0000050C   0x6800             LDR      R0,[R0, #+0]
   \   0000050E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000510   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   00000514   0x5C61             LDRB     R1,[R4, R1]
   \   00000516   0x1840             ADDS     R0,R0,R1
   \   00000518   0x.... 0x....      LDR.W    R1,??DataTable11_17
   \   0000051C   0x6008             STR      R0,[R1, #+0]
   1390               if(i == control_top_whiteline - 10)    //只是对前100cm左右的前瞻进行加权
   \   0000051E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000520   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000524   0x8800             LDRH     R0,[R0, #+0]
   \   00000526   0x380A             SUBS     R0,R0,#+10
   \   00000528   0x4284             CMP      R4,R0
   \   0000052A   0xD115             BNE.N    ??get_line_information_47
   1391               {
   1392                 center_average = center_average /(control_top_whiteline - bottom_whitebase -10);
   \   0000052C   0x.... 0x....      LDR.W    R0,??DataTable11_17
   \   00000530   0x6800             LDR      R0,[R0, #+0]
   \   00000532   0x.... 0x....      LDR.W    R1,??DataTable11_8
   \   00000536   0x8809             LDRH     R1,[R1, #+0]
   \   00000538   0x.... 0x....      LDR.W    R2,??DataTable11_1
   \   0000053C   0x7812             LDRB     R2,[R2, #+0]
   \   0000053E   0x1A89             SUBS     R1,R1,R2
   \   00000540   0x390A             SUBS     R1,R1,#+10
   \   00000542   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000546   0x.... 0x....      LDR.W    R1,??DataTable11_17
   \   0000054A   0x6008             STR      R0,[R1, #+0]
   1393                 center_linear_average = center_average ;
   \   0000054C   0x.... 0x....      LDR.W    R0,??DataTable11_19
   \   00000550   0x.... 0x....      LDR.W    R1,??DataTable11_17
   \   00000554   0x6809             LDR      R1,[R1, #+0]
   \   00000556   0x6001             STR      R1,[R0, #+0]
   1394               }
   1395             }
   \                     ??get_line_information_47:
   \   00000558   0x1C64             ADDS     R4,R4,#+1
   \                     ??get_line_information_45:
   \   0000055A   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   0000055E   0x8800             LDRH     R0,[R0, #+0]
   \   00000560   0x380A             SUBS     R0,R0,#+10
   \   00000562   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000564   0x42A0             CMP      R0,R4
   \   00000566   0xDACF             BGE.N    ??get_line_information_46
   1396             
   1397               //进行偏差的绝对值求和
   1398              for( i=bottom_whitebase+1 ;i <= control_top_whiteline- 10;i++)
   \   00000568   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   0000056C   0x7800             LDRB     R0,[R0, #+0]
   \   0000056E   0x1C44             ADDS     R4,R0,#+1
   \   00000570   0xE012             B.N      ??get_line_information_48
   1399              {
   1400                center_error_average += f_abs16( center_white[i]  - center_average);
   \                     ??get_line_information_49:
   \   00000572   0x.... 0x....      LDR.W    R0,??DataTable11_18
   \   00000576   0x8805             LDRH     R5,[R0, #+0]
   \   00000578   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000057A   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   0000057E   0x5C20             LDRB     R0,[R4, R0]
   \   00000580   0x.... 0x....      LDR.W    R1,??DataTable11_17
   \   00000584   0x6809             LDR      R1,[R1, #+0]
   \   00000586   0x1A40             SUBS     R0,R0,R1
   \   00000588   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000058A   0x.... 0x....      BL       f_abs16
   \   0000058E   0x1940             ADDS     R0,R0,R5
   \   00000590   0x.... 0x....      LDR.W    R1,??DataTable11_18
   \   00000594   0x8008             STRH     R0,[R1, #+0]
   1401              }
   \   00000596   0x1C64             ADDS     R4,R4,#+1
   \                     ??get_line_information_48:
   \   00000598   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   0000059C   0x8800             LDRH     R0,[R0, #+0]
   \   0000059E   0x380A             SUBS     R0,R0,#+10
   \   000005A0   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000005A2   0x42A0             CMP      R0,R4
   \   000005A4   0xDAE5             BGE.N    ??get_line_information_49
   1402              center_error_average /= (control_top_whiteline - bottom_whitebase - 10) ;    //反应了所有的中线偏离中线中心的绝对的大小。他的大小在一定的程度上反应了，中线的线性度的大小
   \   000005A6   0x.... 0x....      LDR.W    R0,??DataTable11_18
   \   000005AA   0x8800             LDRH     R0,[R0, #+0]
   \   000005AC   0x.... 0x....      LDR.W    R1,??DataTable11_8
   \   000005B0   0x8809             LDRH     R1,[R1, #+0]
   \   000005B2   0x.... 0x....      LDR.W    R2,??DataTable11_1
   \   000005B6   0x7812             LDRB     R2,[R2, #+0]
   \   000005B8   0x1A89             SUBS     R1,R1,R2
   \   000005BA   0x390A             SUBS     R1,R1,#+10
   \   000005BC   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000005C0   0x.... 0x....      LDR.W    R1,??DataTable11_18
   \   000005C4   0x8008             STRH     R0,[R1, #+0]
   \   000005C6   0xE058             B.N      ??get_line_information_50
   1403              
   1404            }
   1405            else
   1406            {
   1407             for(i = bottom_whitebase+1;i<=control_top_whiteline;i++)
   \                     ??get_line_information_44:
   \   000005C8   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   000005CC   0x7800             LDRB     R0,[R0, #+0]
   \   000005CE   0x1C44             ADDS     R4,R0,#+1
   \   000005D0   0xE020             B.N      ??get_line_information_51
   1408             {
   1409               center_average +=  center_white[i];
   \                     ??get_line_information_52:
   \   000005D2   0x.... 0x....      LDR.W    R0,??DataTable11_17
   \   000005D6   0x6800             LDR      R0,[R0, #+0]
   \   000005D8   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000005DA   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   000005DE   0x5C61             LDRB     R1,[R4, R1]
   \   000005E0   0x1840             ADDS     R0,R0,R1
   \   000005E2   0x.... 0x....      LDR.W    R1,??DataTable11_17
   \   000005E6   0x6008             STR      R0,[R1, #+0]
   1410               if(i == control_top_whiteline)    //只是对前100cm左右的前瞻进行加权
   \   000005E8   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000005EA   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   000005EE   0x8800             LDRH     R0,[R0, #+0]
   \   000005F0   0x4284             CMP      R4,R0
   \   000005F2   0xD10E             BNE.N    ??get_line_information_53
   1411               {
   1412                 center_average = center_average /(control_top_whiteline - bottom_whitebase);
   \   000005F4   0x.... 0x....      LDR.W    R0,??DataTable11_17
   \   000005F8   0x6800             LDR      R0,[R0, #+0]
   \   000005FA   0x.... 0x....      LDR.W    R1,??DataTable11_8
   \   000005FE   0x8809             LDRH     R1,[R1, #+0]
   \   00000600   0x.... 0x....      LDR.W    R2,??DataTable11_1
   \   00000604   0x7812             LDRB     R2,[R2, #+0]
   \   00000606   0x1A89             SUBS     R1,R1,R2
   \   00000608   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000060C   0x.... 0x....      LDR.W    R1,??DataTable11_17
   \   00000610   0x6008             STR      R0,[R1, #+0]
   1413               }
   1414             }
   \                     ??get_line_information_53:
   \   00000612   0x1C64             ADDS     R4,R4,#+1
   \                     ??get_line_information_51:
   \   00000614   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000618   0x8800             LDRH     R0,[R0, #+0]
   \   0000061A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000061C   0x42A0             CMP      R0,R4
   \   0000061E   0xDAD8             BGE.N    ??get_line_information_52
   1415                  //进行偏差的绝对值求和
   1416              for( i=bottom_whitebase+1 ;i <= control_top_whiteline;i++)
   \   00000620   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00000624   0x7800             LDRB     R0,[R0, #+0]
   \   00000626   0x1C44             ADDS     R4,R0,#+1
   \   00000628   0xE012             B.N      ??get_line_information_54
   1417              {
   1418                center_error_average += f_abs16( center_white[i]  - center_average);
   \                     ??get_line_information_55:
   \   0000062A   0x.... 0x....      LDR.W    R0,??DataTable11_18
   \   0000062E   0x8805             LDRH     R5,[R0, #+0]
   \   00000630   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000632   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   00000636   0x5C20             LDRB     R0,[R4, R0]
   \   00000638   0x.... 0x....      LDR.W    R1,??DataTable11_17
   \   0000063C   0x6809             LDR      R1,[R1, #+0]
   \   0000063E   0x1A40             SUBS     R0,R0,R1
   \   00000640   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000642   0x.... 0x....      BL       f_abs16
   \   00000646   0x1940             ADDS     R0,R0,R5
   \   00000648   0x.... 0x....      LDR.W    R1,??DataTable11_18
   \   0000064C   0x8008             STRH     R0,[R1, #+0]
   1419              }
   \   0000064E   0x1C64             ADDS     R4,R4,#+1
   \                     ??get_line_information_54:
   \   00000650   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000654   0x8800             LDRH     R0,[R0, #+0]
   \   00000656   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000658   0x42A0             CMP      R0,R4
   \   0000065A   0xDAE6             BGE.N    ??get_line_information_55
   1420              center_error_average /= (control_top_whiteline - bottom_whitebase) ;    //反应了所有的中线偏离中线中心的绝对的大小。他的大小在一定的程度上反应了，中线的线性度的大小
   \   0000065C   0x.... 0x....      LDR.W    R0,??DataTable11_18
   \   00000660   0x8800             LDRH     R0,[R0, #+0]
   \   00000662   0x.... 0x....      LDR.W    R1,??DataTable11_8
   \   00000666   0x8809             LDRH     R1,[R1, #+0]
   \   00000668   0x.... 0x....      LDR.W    R2,??DataTable11_1
   \   0000066C   0x7812             LDRB     R2,[R2, #+0]
   \   0000066E   0x1A89             SUBS     R1,R1,R2
   \   00000670   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000674   0x.... 0x....      LDR.W    R1,??DataTable11_18
   \   00000678   0x8008             STRH     R0,[R1, #+0]
   1421              
   1422            }
   1423             
   1424              //为了准确的判断出赛道的变化趋势，十分有必要的是对这个数的历史进行存储。这里存储7个历史值，然后进行模糊判断。
   1425              //通过测试发现 这个值的变化趋势在0 到 25之间变化  当在直道的时候，值在0 - -8之间在弯道中的时候，是在16--25之间变化
   1426              //当数值达到19后，则认为已经到达弯道中间或是在出弯道
   1427            ///////////////均值提取结束//////////////////////////////
   1428            
   1429            /*/////对坡道的判断，当坡道判断出来之后，用标志位标志，且其只是作用在电机的给定控制上
   1430            对于坡道的检测只需要将上坡道检测出来（最高行接近顶行，且其宽度达到了一定的范围）下坡检测比较的困难，
   1431            所以这里不检测下坡，一般只是做一下坡道状态延时就行了（延时时间为1s--2s之间），
   1432            且检测出来之后，只需要降速，对于舵机可以不用去管。图像已经做得可以了。
   1433            对坡道的检测不能只是用宽度去判定，这样容易和弯道出现误检。所以还要加上对端点的限制，将其限制在某一个范围之内,
   1434            这就要求进入弯道之前车子是摆正的。
   1435            #define RAMP_WIDTH  45                  //图像10~20行的宽度范围超过该范围确定为坡道
   1436            #define RAMP_TIME   60
   1437            uint8 ramp_time = 50;                     //进入坡道后多长时间重新开启起跑线检测
   1438            int8 ramp_speed = 0;                    //坡道减速值
   1439            bool ramp_flag;                          //进入坡道标志,主要用于控制
   1440            bool ramp_dis_flag;                     //主要是防止下坡误判
   1441            
   1442            对于坡道的检测不能用最高的几行，因为这样容易和十字道路误检
   1443           */
   1444            
   1445            ramp_count = 0;//3,65,4,25
   \                     ??get_line_information_50:
   \   0000067A   0x2100             MOVS     R1,#+0
   1446            if( ramp_dis_flag ==0 && direction == 1 && control_top_whiteline >= ROW - 2 ) //直线状态检测  //加入这个ramp_dis_flag标志，是为了让车子在检测数跑道后的这段时间里，不对坡道进行检测
   \   0000067C   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000680   0x7800             LDRB     R0,[R0, #+0]
   \   00000682   0x2800             CMP      R0,#+0
   \   00000684   0xD14D             BNE.N    ??get_line_information_56
   \   00000686   0x.... 0x....      LDR.W    R0,??DataTable11_14
   \   0000068A   0x7800             LDRB     R0,[R0, #+0]
   \   0000068C   0x2801             CMP      R0,#+1
   \   0000068E   0xD148             BNE.N    ??get_line_information_56
   \   00000690   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000694   0x8800             LDRH     R0,[R0, #+0]
   \   00000696   0x283F             CMP      R0,#+63
   \   00000698   0xD343             BCC.N    ??get_line_information_56
   1447            {
   1448              for(i = 35; i<60; i++)
   \   0000069A   0x2423             MOVS     R4,#+35
   \   0000069C   0xE011             B.N      ??get_line_information_57
   1449                {
   1450                  if(right_black[i]-left_black[i] > refer_road_width[i] + 8)
   \                     ??get_line_information_58:
   \   0000069E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000006A0   0x.... 0x....      LDR.W    R0,??DataTable11_10
   \   000006A4   0x5C20             LDRB     R0,[R4, R0]
   \   000006A6   0x3008             ADDS     R0,R0,#+8
   \   000006A8   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000006AA   0x.... 0x....      LDR.W    R2,??DataTable11_5
   \   000006AE   0x5CA2             LDRB     R2,[R4, R2]
   \   000006B0   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000006B2   0x.... 0x....      LDR.W    R3,??DataTable11_4
   \   000006B6   0x5CE3             LDRB     R3,[R4, R3]
   \   000006B8   0x1AD2             SUBS     R2,R2,R3
   \   000006BA   0x4290             CMP      R0,R2
   \   000006BC   0xDA00             BGE.N    ??get_line_information_59
   1451                    ramp_count ++;
   \   000006BE   0x1C49             ADDS     R1,R1,#+1
   1452                }        
   \                     ??get_line_information_59:
   \   000006C0   0x1C64             ADDS     R4,R4,#+1
   \                     ??get_line_information_57:
   \   000006C2   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000006C4   0x2C3C             CMP      R4,#+60
   \   000006C6   0xDBEA             BLT.N    ??get_line_information_58
   1453              if(ramp_count >= 20)
   \   000006C8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000006CA   0x2914             CMP      R1,#+20
   \   000006CC   0xD329             BCC.N    ??get_line_information_56
   1454              { 
   1455                if(left_black[ 40] - left_black[35] > 0 && left_black[ 40] - right_black[35] < 5
   1456                   && right_black[35] -right_black[40] > 0 && right_black[35] -right_black[40] < 5)
   \   000006CE   0x.... 0x....      LDR.W    R0,??DataTable11_4
   \   000006D2   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   000006D6   0x.... 0x....      LDR.W    R1,??DataTable11_4
   \   000006DA   0xF891 0x1023      LDRB     R1,[R1, #+35]
   \   000006DE   0x1A40             SUBS     R0,R0,R1
   \   000006E0   0x2801             CMP      R0,#+1
   \   000006E2   0xDB1E             BLT.N    ??get_line_information_56
   \   000006E4   0x.... 0x....      LDR.W    R0,??DataTable11_4
   \   000006E8   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   000006EC   0x.... 0x....      LDR.W    R1,??DataTable11_5
   \   000006F0   0xF891 0x1023      LDRB     R1,[R1, #+35]
   \   000006F4   0x1A40             SUBS     R0,R0,R1
   \   000006F6   0x2805             CMP      R0,#+5
   \   000006F8   0xDA13             BGE.N    ??get_line_information_56
   \   000006FA   0x.... 0x....      LDR.W    R0,??DataTable11_5
   \   000006FE   0xF890 0x0023      LDRB     R0,[R0, #+35]
   \   00000702   0x.... 0x....      LDR.W    R1,??DataTable11_5
   \   00000706   0xF891 0x1028      LDRB     R1,[R1, #+40]
   \   0000070A   0x1A40             SUBS     R0,R0,R1
   \   0000070C   0x1E40             SUBS     R0,R0,#+1
   \   0000070E   0x2804             CMP      R0,#+4
   \   00000710   0xD207             BCS.N    ??get_line_information_56
   1457                {   
   1458                ramp_flag = 1;
   \   00000712   0x.... 0x....      LDR.W    R0,??DataTable11_15
   \   00000716   0x2101             MOVS     R1,#+1
   \   00000718   0x7001             STRB     R1,[R0, #+0]
   1459                ramp_dis_flag = 1;
   \   0000071A   0x.... 0x....      LDR.W    R0,??DataTable12
   \   0000071E   0x2101             MOVS     R1,#+1
   \   00000720   0x7001             STRB     R1,[R0, #+0]
   1460                }
   1461              } 
   1462            }
   1463            if(ramp_flag == 1)
   \                     ??get_line_information_56:
   \   00000722   0x.... 0x....      LDR.W    R0,??DataTable11_15
   \   00000726   0x7800             LDRB     R0,[R0, #+0]
   \   00000728   0x2800             CMP      R0,#+0
   \   0000072A   0xD016             BEQ.N    ??get_line_information_60
   1464            {
   1465              ramp_time++;
   \   0000072C   0x.... 0x....      LDR.W    R0,??DataTable11_20
   \   00000730   0x8800             LDRH     R0,[R0, #+0]
   \   00000732   0x1C40             ADDS     R0,R0,#+1
   \   00000734   0x.... 0x....      LDR.W    R1,??DataTable11_20
   \   00000738   0x8008             STRH     R0,[R1, #+0]
   1466              if(ramp_time >= ramp_delay_time)
   \   0000073A   0x.... 0x....      LDR.W    R0,??DataTable11_20
   \   0000073E   0x8800             LDRH     R0,[R0, #+0]
   \   00000740   0x.... 0x....      LDR.W    R1,??DataTable11_21
   \   00000744   0x8809             LDRH     R1,[R1, #+0]
   \   00000746   0x4288             CMP      R0,R1
   \   00000748   0xD307             BCC.N    ??get_line_information_60
   1467              {
   1468                ramp_time = 0;
   \   0000074A   0x.... 0x....      LDR.W    R0,??DataTable11_20
   \   0000074E   0x2100             MOVS     R1,#+0
   \   00000750   0x8001             STRH     R1,[R0, #+0]
   1469                ramp_flag = 0;
   \   00000752   0x.... 0x....      LDR.W    R0,??DataTable11_15
   \   00000756   0x2100             MOVS     R1,#+0
   \   00000758   0x7001             STRB     R1,[R0, #+0]
   1470              }
   1471            }
   1472            if(ramp_dis_flag == 1)
   \                     ??get_line_information_60:
   \   0000075A   0x.... 0x....      LDR.W    R0,??DataTable12
   \   0000075E   0x7800             LDRB     R0,[R0, #+0]
   \   00000760   0x2800             CMP      R0,#+0
   \   00000762   0xD017             BEQ.N    ??get_line_information_61
   1473            {
   1474              ramp_dis_time++;
   \   00000764   0x.... 0x....      LDR.W    R0,??DataTable11_22
   \   00000768   0x8800             LDRH     R0,[R0, #+0]
   \   0000076A   0x1C40             ADDS     R0,R0,#+1
   \   0000076C   0x.... 0x....      LDR.W    R1,??DataTable11_22
   \   00000770   0x8008             STRH     R0,[R1, #+0]
   1475              if(ramp_dis_time >= 4 * ramp_delay_time)
   \   00000772   0x.... 0x....      LDR.W    R0,??DataTable11_22
   \   00000776   0x8800             LDRH     R0,[R0, #+0]
   \   00000778   0x.... 0x....      LDR.W    R1,??DataTable11_21
   \   0000077C   0x8809             LDRH     R1,[R1, #+0]
   \   0000077E   0xEBB0 0x0F81      CMP      R0,R1, LSL #+2
   \   00000782   0xDB07             BLT.N    ??get_line_information_61
   1476              {
   1477                ramp_dis_time = 0;
   \   00000784   0x.... 0x....      LDR.W    R0,??DataTable11_22
   \   00000788   0x2100             MOVS     R1,#+0
   \   0000078A   0x8001             STRH     R1,[R0, #+0]
   1478                ramp_dis_flag = 0;
   \   0000078C   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000790   0x2100             MOVS     R1,#+0
   \   00000792   0x7001             STRB     R1,[R0, #+0]
   1479              }
   1480            }
   1481          }
   \                     ??get_line_information_61:
   \   00000794   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1482          
   1483          
   1484          /*-------------------------------获取中线的线性相关系数-----------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1485          float get_linear_factor(uint8 bottom,uint8 top,uint8 average)            //传递三个参数基准行，顶行，所有行与MID的差值
   1486          {
   \                     get_linear_factor:
   \   00000000   0xE92D 0x4FF7      PUSH     {R0-R2,R4-R11,LR}
   \   00000004   0x0001             MOVS     R1,R0
   1487              uint8 i;
   1488              uint8 Y_aver=0;
   \   00000006   0x2400             MOVS     R4,#+0
   1489              float X_square_sum=0;   //X轴平方和
   \   00000008   0x2500             MOVS     R5,#+0
   1490              float Y_square_sum=0;   //Y轴平方和
   \   0000000A   0x2700             MOVS     R7,#+0
   1491              float multi_sum=0;      //XY乘积之和
   \   0000000C   0x2600             MOVS     R6,#+0
   1492              int temp=0,temp1=0,temp2=0; //减轻浮点运算的寄存器
   \   0000000E   0xF05F 0x0800      MOVS     R8,#+0
   \   00000012   0xF05F 0x0900      MOVS     R9,#+0
   \   00000016   0xF05F 0x0A00      MOVS     R10,#+0
   1493              float factor=0;
   \   0000001A   0x2000             MOVS     R0,#+0
   1494              
   1495               Y_aver=(uint8)((bottom+top)/2);  //Y坐标的范围
   \   0000001C   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   00000020   0xFA52 0xF281      UXTAB    R2,R2,R1
   \   00000024   0x2302             MOVS     R3,#+2
   \   00000026   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   0000002A   0x0014             MOVS     R4,R2
   1496              for(i=bottom;i<=top;i++)
   \   0000002C   0x468B             MOV      R11,R1
   \   0000002E   0xE05B             B.N      ??get_linear_factor_0
   1497              {
   1498                  temp=temp+(center_white[i]-average)*(center_white[i]-average);
   \                     ??get_linear_factor_1:
   \   00000030   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   00000038   0xF81B 0x0000      LDRB     R0,[R11, R0]
   \   0000003C   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00000040   0x1A40             SUBS     R0,R0,R1
   \   00000042   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   0000004A   0xF81B 0x1001      LDRB     R1,[R11, R1]
   \   0000004E   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \   00000052   0x1A89             SUBS     R1,R1,R2
   \   00000054   0xFB01 0x8800      MLA      R8,R1,R0,R8
   1499                  if(temp>30000)
   \   00000058   0xF247 0x5031      MOVW     R0,#+30001
   \   0000005C   0x4580             CMP      R8,R0
   \   0000005E   0xDB08             BLT.N    ??get_linear_factor_2
   1500                  {
   1501                      X_square_sum=X_square_sum+temp;   //X平方和
   \   00000060   0x4640             MOV      R0,R8
   \   00000062   0x.... 0x....      BL       __aeabi_i2f
   \   00000066   0x0029             MOVS     R1,R5
   \   00000068   0x.... 0x....      BL       __aeabi_fadd
   \   0000006C   0x0005             MOVS     R5,R0
   1502                      temp=0;
   \   0000006E   0xF05F 0x0800      MOVS     R8,#+0
   1503                  }
   1504          
   1505                  temp1=temp1+(i-Y_aver)*(i-Y_aver);
   \                     ??get_linear_factor_2:
   \   00000072   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000076   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000078   0xEBBB 0x0004      SUBS     R0,R11,R4
   \   0000007C   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000080   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000082   0xEBBB 0x0104      SUBS     R1,R11,R4
   \   00000086   0xFB01 0x9900      MLA      R9,R1,R0,R9
   1506                  if(temp1>30000)
   \   0000008A   0xF247 0x5031      MOVW     R0,#+30001
   \   0000008E   0x4581             CMP      R9,R0
   \   00000090   0xDB08             BLT.N    ??get_linear_factor_3
   1507                  {
   1508                      Y_square_sum=Y_square_sum+temp1;   //Y平方和
   \   00000092   0x4648             MOV      R0,R9
   \   00000094   0x.... 0x....      BL       __aeabi_i2f
   \   00000098   0x0039             MOVS     R1,R7
   \   0000009A   0x.... 0x....      BL       __aeabi_fadd
   \   0000009E   0x0007             MOVS     R7,R0
   1509                      temp1=0;
   \   000000A0   0xF05F 0x0900      MOVS     R9,#+0
   1510                  }
   1511          
   1512                  temp2=temp2+(center_white[i]-average)*(i-Y_aver);
   \                     ??get_linear_factor_3:
   \   000000A4   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000A8   0x....             LDR.N    R0,??DataTable11_3
   \   000000AA   0xF81B 0x0000      LDRB     R0,[R11, R0]
   \   000000AE   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   000000B2   0x1A40             SUBS     R0,R0,R1
   \   000000B4   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000B8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000BA   0xEBBB 0x0104      SUBS     R1,R11,R4
   \   000000BE   0xFB01 0xAA00      MLA      R10,R1,R0,R10
   1513                  if(f_abs16(temp2)>30000)
   \   000000C2   0x4650             MOV      R0,R10
   \   000000C4   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000C6   0x.... 0x....      BL       f_abs16
   \   000000CA   0xF247 0x5131      MOVW     R1,#+30001
   \   000000CE   0x4288             CMP      R0,R1
   \   000000D0   0xDB08             BLT.N    ??get_linear_factor_4
   1514                  {
   1515                      multi_sum=multi_sum+temp2;    //X、Y的积
   \   000000D2   0x4650             MOV      R0,R10
   \   000000D4   0x.... 0x....      BL       __aeabi_i2f
   \   000000D8   0x0031             MOVS     R1,R6
   \   000000DA   0x.... 0x....      BL       __aeabi_fadd
   \   000000DE   0x0006             MOVS     R6,R0
   1516                      temp2=0;
   \   000000E0   0xF05F 0x0A00      MOVS     R10,#+0
   1517                  }
   1518              }
   \                     ??get_linear_factor_4:
   \   000000E4   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \                     ??get_linear_factor_0:
   \   000000E8   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000EC   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000F0   0x4558             CMP      R0,R11
   \   000000F2   0xD29D             BCS.N    ??get_linear_factor_1
   1519               
   1520                  X_square_sum=X_square_sum+temp;   //得出x的平方和
   \   000000F4   0x4640             MOV      R0,R8
   \   000000F6   0x.... 0x....      BL       __aeabi_i2f
   \   000000FA   0x0029             MOVS     R1,R5
   \   000000FC   0x.... 0x....      BL       __aeabi_fadd
   \   00000100   0x0005             MOVS     R5,R0
   1521                  Y_square_sum=Y_square_sum+temp1;  //计算出y的平方和
   \   00000102   0x4648             MOV      R0,R9
   \   00000104   0x.... 0x....      BL       __aeabi_i2f
   \   00000108   0x0039             MOVS     R1,R7
   \   0000010A   0x.... 0x....      BL       __aeabi_fadd
   \   0000010E   0x0007             MOVS     R7,R0
   1522                  multi_sum=multi_sum+temp2;        //计算出xy的乘积
   \   00000110   0x4650             MOV      R0,R10
   \   00000112   0x.... 0x....      BL       __aeabi_i2f
   \   00000116   0x0031             MOVS     R1,R6
   \   00000118   0x.... 0x....      BL       __aeabi_fadd
   \   0000011C   0x0006             MOVS     R6,R0
   1523              
   1524                 /* XX_square_sum =X_square_sum;      //用于检测
   1525                  YY_square_sum =Y_square_sum;
   1526                  XYmulti_sum = multi_sum;*/
   1527                  
   1528                  if(X_square_sum<0.1)   //防止除数为0
   \   0000011E   0x0028             MOVS     R0,R5
   \   00000120   0x.... 0x....      LDR.W    R1,??DataTable12_1  ;; 0x3dcccccd
   \   00000124   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000128   0xD201             BCS.N    ??get_linear_factor_5
   1529                      X_square_sum=0.1;
   \   0000012A   0x.... 0x....      LDR.W    R5,??DataTable12_1  ;; 0x3dcccccd
   1530                  if(Y_square_sum<0.1)
   \                     ??get_linear_factor_5:
   \   0000012E   0x0038             MOVS     R0,R7
   \   00000130   0x.... 0x....      LDR.W    R1,??DataTable12_1  ;; 0x3dcccccd
   \   00000134   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000138   0xD201             BCS.N    ??get_linear_factor_6
   1531                      Y_square_sum=0.1;
   \   0000013A   0x.... 0x....      LDR.W    R7,??DataTable12_1  ;; 0x3dcccccd
   1532                  
   1533                  if(X_square_sum<300)  //小于300出现在直道
   \                     ??get_linear_factor_6:
   \   0000013E   0x0028             MOVS     R0,R5
   \   00000140   0x.... 0x....      LDR.W    R1,??DataTable12_2  ;; 0x43960000
   \   00000144   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000148   0xD207             BCS.N    ??get_linear_factor_7
   1534                      factor=multi_sum/f_absf(multi_sum); // =1 or =-1 //完全是直线
   \   0000014A   0x0030             MOVS     R0,R6
   \   0000014C   0x.... 0x....      BL       f_absf
   \   00000150   0x0001             MOVS     R1,R0
   \   00000152   0x0030             MOVS     R0,R6
   \   00000154   0x.... 0x....      BL       __aeabi_fdiv
   \   00000158   0xE026             B.N      ??get_linear_factor_8
   1535                  else  //否则用公式计算 //注意处理速度，小于200时处理时间少很多
   1536                      factor=multi_sum/sqrt(X_square_sum*Y_square_sum)*(bottom_whitebase+control_top_whiteline-20)/(65-20);
   \                     ??get_linear_factor_7:
   \   0000015A   0x0028             MOVS     R0,R5
   \   0000015C   0x0039             MOVS     R1,R7
   \   0000015E   0x.... 0x....      BL       __aeabi_fmul
   \   00000162   0x.... 0x....      BL       __aeabi_f2d
   \   00000166   0x.... 0x....      BL       sqrt
   \   0000016A   0x0004             MOVS     R4,R0
   \   0000016C   0x000D             MOVS     R5,R1
   \   0000016E   0x0030             MOVS     R0,R6
   \   00000170   0x.... 0x....      BL       __aeabi_f2d
   \   00000174   0x0022             MOVS     R2,R4
   \   00000176   0x002B             MOVS     R3,R5
   \   00000178   0x.... 0x....      BL       __aeabi_ddiv
   \   0000017C   0x0004             MOVS     R4,R0
   \   0000017E   0x000D             MOVS     R5,R1
   \   00000180   0x....             LDR.N    R0,??DataTable11_1
   \   00000182   0x7800             LDRB     R0,[R0, #+0]
   \   00000184   0x....             LDR.N    R1,??DataTable11_8
   \   00000186   0x8809             LDRH     R1,[R1, #+0]
   \   00000188   0xFA10 0xF081      UXTAH    R0,R0,R1
   \   0000018C   0x3814             SUBS     R0,R0,#+20
   \   0000018E   0x.... 0x....      BL       __aeabi_i2d
   \   00000192   0x0022             MOVS     R2,R4
   \   00000194   0x002B             MOVS     R3,R5
   \   00000196   0x.... 0x....      BL       __aeabi_dmul
   \   0000019A   0x2200             MOVS     R2,#+0
   \   0000019C   0x.... 0x....      LDR.W    R3,??DataTable12_3  ;; 0x40468000
   \   000001A0   0x.... 0x....      BL       __aeabi_ddiv
   \   000001A4   0x.... 0x....      BL       __aeabi_d2f
   1537                  
   1538                  if(factor>0.95)
   \                     ??get_linear_factor_8:
   \   000001A8   0x.... 0x....      LDR.W    R1,??DataTable12_4  ;; 0x3f733334
   \   000001AC   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000001B0   0xD801             BHI.N    ??get_linear_factor_9
   1539                    factor=1;
   \   000001B2   0xF05F 0x507E      MOVS     R0,#+1065353216
   1540                  if(factor<-0.95)
   \                     ??get_linear_factor_9:
   \   000001B6   0x.... 0x....      LDR.W    R1,??DataTable12_5  ;; 0xbf733333
   \   000001BA   0x.... 0x....      BL       __aeabi_cfcmple
   \   000001BE   0xD201             BCS.N    ??get_linear_factor_10
   1541                    factor=-1;
   \   000001C0   0x.... 0x....      LDR.W    R0,??DataTable14  ;; 0xbf800000
   1542              
   1543                  return factor;
   \                     ??get_linear_factor_10:
   \   000001C4   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
   1544          }
   1545          
   1546          
   1547          /*加入起跑线检测的停车程序，利用摄像头进行检测
   1548           这里的主要目的是给stop_flag置位,为了能够检测起跑线，必须保证的是检测的距离为起跑线前的20厘米以上。
   1549          这里的图像而言的话就是图像的30行，
   1550          以五米的速度来看的话，也就是必须保证两场图像至少有一场检测到，40ms*5m = 20厘米
   1551          注意这里的检测是检测黑到白的跳变。这个比检测白到黑的跳变更加的准确
   1552          */

   \                                 In section .text, align 2, keep-with-next
   1553          void check_start_stop_line()
   1554          { 
   \                     check_start_stop_line:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   1555            int i,j;
   1556            uint8 left_start_stop_hang = 0;
   \   00000004   0x2400             MOVS     R4,#+0
   1557            uint8 left_start_stop_flag = 0;
   \   00000006   0x2500             MOVS     R5,#+0
   1558            uint8 right_start_stop_hang = 0;
   \   00000008   0x2600             MOVS     R6,#+0
   1559            uint8 right_start_stop_flag = 0;
   \   0000000A   0x2700             MOVS     R7,#+0
   1560            //弯道不检测起跑线
   1561            if(top_whiteline - bottom_whitebase > 50)
   \   0000000C   0x....             LDR.N    R0,??DataTable11_2
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x....             LDR.N    R1,??DataTable11_1
   \   00000012   0x7809             LDRB     R1,[R1, #+0]
   \   00000014   0x1A40             SUBS     R0,R0,R1
   \   00000016   0x2833             CMP      R0,#+51
   \   00000018   0xF2C0 0x8124      BLT.W    ??check_start_stop_line_0
   1562            {
   1563              for(i=bottom_whitebase+3;i< bottom_whitebase + 40;i++) //只是检测前二十五行，大于车身的前20几个厘米  
   \   0000001C   0x....             LDR.N    R0,??DataTable11_1
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0xF110 0x0803      ADDS     R8,R0,#+3
   \   00000024   0xE001             B.N      ??check_start_stop_line_1
   \                     ??check_start_stop_line_2:
   \   00000026   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??check_start_stop_line_1:
   \   0000002A   0x....             LDR.N    R0,??DataTable11_1
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x3028             ADDS     R0,R0,#+40
   \   00000030   0x4580             CMP      R8,R0
   \   00000032   0xF280 0x8117      BGE.W    ??check_start_stop_line_0
   1564              {
   1565                  //至少保证中线的左右的三个点是白色的 并且要保证这个时候的行的状态为3
   1566                if( top_whiteline >= 50
   1567                   && (VideoImage2[i - 1][ center_white[i]] -  VideoImage2[i + 1][ center_white[i]])< OT
   1568                    && (VideoImage2[i - 1][ center_white[i] - 1] -  VideoImage2[i + 1][ center_white[i] - 1]) < OT
   1569                     && (VideoImage2[i - 1][ center_white[i] + 1] -  VideoImage2[i + 1][ center_white[i] + 1]) < OT)
   \   00000036   0x....             LDR.N    R0,??DataTable11_2
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0x2832             CMP      R0,#+50
   \   0000003C   0xF0C0 0x80FD      BCC.W    ??check_start_stop_line_3
   \   00000040   0x....             LDR.N    R0,??DataTable11_3
   \   00000042   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   00000046   0x219F             MOVS     R1,#+159
   \   00000048   0x.... 0x....      LDR.W    R2,??DataTable13
   \   0000004C   0xFB01 0x2108      MLA      R1,R1,R8,R2
   \   00000050   0x1840             ADDS     R0,R0,R1
   \   00000052   0xF810 0x0C9F      LDRB     R0,[R0, #-159]
   \   00000056   0x....             LDR.N    R1,??DataTable11_3
   \   00000058   0xF818 0x1001      LDRB     R1,[R8, R1]
   \   0000005C   0x229F             MOVS     R2,#+159
   \   0000005E   0x.... 0x....      LDR.W    R3,??DataTable13
   \   00000062   0xFB02 0x3208      MLA      R2,R2,R8,R3
   \   00000066   0x1889             ADDS     R1,R1,R2
   \   00000068   0xF891 0x109F      LDRB     R1,[R1, #+159]
   \   0000006C   0x1A40             SUBS     R0,R0,R1
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   00000072   0x7809             LDRB     R1,[R1, #+0]
   \   00000074   0x4288             CMP      R0,R1
   \   00000076   0xF280 0x80E0      BGE.W    ??check_start_stop_line_3
   \   0000007A   0x....             LDR.N    R0,??DataTable11_3
   \   0000007C   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   00000080   0x219F             MOVS     R1,#+159
   \   00000082   0x.... 0x....      LDR.W    R2,??DataTable13
   \   00000086   0xFB01 0x2108      MLA      R1,R1,R8,R2
   \   0000008A   0x1840             ADDS     R0,R0,R1
   \   0000008C   0xF810 0x0CA0      LDRB     R0,[R0, #-160]
   \   00000090   0x....             LDR.N    R1,??DataTable11_3
   \   00000092   0xF818 0x1001      LDRB     R1,[R8, R1]
   \   00000096   0x229F             MOVS     R2,#+159
   \   00000098   0x.... 0x....      LDR.W    R3,??DataTable13
   \   0000009C   0xFB02 0x3208      MLA      R2,R2,R8,R3
   \   000000A0   0x1889             ADDS     R1,R1,R2
   \   000000A2   0xF891 0x109E      LDRB     R1,[R1, #+158]
   \   000000A6   0x1A40             SUBS     R0,R0,R1
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000000AC   0x7809             LDRB     R1,[R1, #+0]
   \   000000AE   0x4288             CMP      R0,R1
   \   000000B0   0xF280 0x80C3      BGE.W    ??check_start_stop_line_3
   \   000000B4   0x....             LDR.N    R0,??DataTable11_3
   \   000000B6   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   000000BA   0x219F             MOVS     R1,#+159
   \   000000BC   0x.... 0x....      LDR.W    R2,??DataTable13
   \   000000C0   0xFB01 0x2108      MLA      R1,R1,R8,R2
   \   000000C4   0x1840             ADDS     R0,R0,R1
   \   000000C6   0xF810 0x0C9E      LDRB     R0,[R0, #-158]
   \   000000CA   0x....             LDR.N    R1,??DataTable11_3
   \   000000CC   0xF818 0x1001      LDRB     R1,[R8, R1]
   \   000000D0   0x229F             MOVS     R2,#+159
   \   000000D2   0x.... 0x....      LDR.W    R3,??DataTable13
   \   000000D6   0xFB02 0x3208      MLA      R2,R2,R8,R3
   \   000000DA   0x1889             ADDS     R1,R1,R2
   \   000000DC   0xF891 0x10A0      LDRB     R1,[R1, #+160]
   \   000000E0   0x1A40             SUBS     R0,R0,R1
   \   000000E2   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000000E6   0x7809             LDRB     R1,[R1, #+0]
   \   000000E8   0x4288             CMP      R0,R1
   \   000000EA   0xF280 0x80A6      BGE.W    ??check_start_stop_line_3
   1570                {//左右两边能够有两段是黑色的
   1571                  //这两段白色的检测用的是左右边沿各自向内缩减5格子
   1572                  for(j = left_black[i] + 5 ; j <   center_white[i] - 2;j++)
   \   000000EE   0x....             LDR.N    R0,??DataTable11_4
   \   000000F0   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   000000F4   0x1D40             ADDS     R0,R0,#+5
   \   000000F6   0xE047             B.N      ??check_start_stop_line_4
   1573                  {
   1574                    if((VideoImage2[i + 1][ j ] -  VideoImage2[i - 1][ j])> OT-10
   1575                       &&(VideoImage2[i + 1][ j + 1] -  VideoImage2[i - 1][ j+1])> OT-10
   1576                         &&(VideoImage2[i + 1][ j + 2] -  VideoImage2[i - 1][ j + 2])> OT-10)
   \                     ??check_start_stop_line_5:
   \   000000F8   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000000FC   0x7809             LDRB     R1,[R1, #+0]
   \   000000FE   0x390A             SUBS     R1,R1,#+10
   \   00000100   0x229F             MOVS     R2,#+159
   \   00000102   0x.... 0x....      LDR.W    R3,??DataTable13
   \   00000106   0xFB02 0x3208      MLA      R2,R2,R8,R3
   \   0000010A   0x1882             ADDS     R2,R0,R2
   \   0000010C   0xF892 0x209F      LDRB     R2,[R2, #+159]
   \   00000110   0x239F             MOVS     R3,#+159
   \   00000112   0x.... 0x....      LDR.W    R12,??DataTable13
   \   00000116   0xFB03 0xC308      MLA      R3,R3,R8,R12
   \   0000011A   0x18C3             ADDS     R3,R0,R3
   \   0000011C   0xF813 0x3C9F      LDRB     R3,[R3, #-159]
   \   00000120   0x1AD2             SUBS     R2,R2,R3
   \   00000122   0x4291             CMP      R1,R2
   \   00000124   0xDA2F             BGE.N    ??check_start_stop_line_6
   \   00000126   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   0000012A   0x7809             LDRB     R1,[R1, #+0]
   \   0000012C   0x390A             SUBS     R1,R1,#+10
   \   0000012E   0x229F             MOVS     R2,#+159
   \   00000130   0x.... 0x....      LDR.W    R3,??DataTable13
   \   00000134   0xFB02 0x3208      MLA      R2,R2,R8,R3
   \   00000138   0x1882             ADDS     R2,R0,R2
   \   0000013A   0xF892 0x20A0      LDRB     R2,[R2, #+160]
   \   0000013E   0x239F             MOVS     R3,#+159
   \   00000140   0x.... 0x....      LDR.W    R12,??DataTable13
   \   00000144   0xFB03 0xC308      MLA      R3,R3,R8,R12
   \   00000148   0x18C3             ADDS     R3,R0,R3
   \   0000014A   0xF813 0x3C9E      LDRB     R3,[R3, #-158]
   \   0000014E   0x1AD2             SUBS     R2,R2,R3
   \   00000150   0x4291             CMP      R1,R2
   \   00000152   0xDA18             BGE.N    ??check_start_stop_line_6
   \   00000154   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   00000158   0x7809             LDRB     R1,[R1, #+0]
   \   0000015A   0x390A             SUBS     R1,R1,#+10
   \   0000015C   0x229F             MOVS     R2,#+159
   \   0000015E   0x.... 0x....      LDR.W    R3,??DataTable13
   \   00000162   0xFB02 0x3208      MLA      R2,R2,R8,R3
   \   00000166   0x1882             ADDS     R2,R0,R2
   \   00000168   0xF892 0x20A1      LDRB     R2,[R2, #+161]
   \   0000016C   0x239F             MOVS     R3,#+159
   \   0000016E   0x.... 0x....      LDR.W    R12,??DataTable13
   \   00000172   0xFB03 0xC308      MLA      R3,R3,R8,R12
   \   00000176   0x18C3             ADDS     R3,R0,R3
   \   00000178   0xF813 0x3C9D      LDRB     R3,[R3, #-157]
   \   0000017C   0x1AD2             SUBS     R2,R2,R3
   \   0000017E   0x4291             CMP      R1,R2
   \   00000180   0xDA01             BGE.N    ??check_start_stop_line_6
   1577                    {
   1578                       left_start_stop_hang = i;
   \   00000182   0x4644             MOV      R4,R8
   1579                       left_start_stop_flag = 1;
   \   00000184   0x2501             MOVS     R5,#+1
   1580                    }
   1581                  }
   \                     ??check_start_stop_line_6:
   \   00000186   0x1C40             ADDS     R0,R0,#+1
   \                     ??check_start_stop_line_4:
   \   00000188   0x....             LDR.N    R1,??DataTable11_3
   \   0000018A   0xF818 0x1001      LDRB     R1,[R8, R1]
   \   0000018E   0x1E89             SUBS     R1,R1,#+2
   \   00000190   0x4288             CMP      R0,R1
   \   00000192   0xDBB1             BLT.N    ??check_start_stop_line_5
   1582                  
   1583                  for(j = right_black[i] - 5 ; j > center_white[i] + 2;j--)
   \   00000194   0x....             LDR.N    R0,??DataTable11_5
   \   00000196   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   0000019A   0x1F40             SUBS     R0,R0,#+5
   \   0000019C   0xE047             B.N      ??check_start_stop_line_7
   1584                  {
   1585                    if((VideoImage2[i + 1][ j] -  VideoImage2[i - 1][ j]) > OT-10
   1586                       &&(VideoImage2[i + 1][ j - 1] -  VideoImage2[i - 1][ j - 1])> OT-10
   1587                         &&(VideoImage2[i + 1][ j - 2] -  VideoImage2[i - 1][ j - 2])> OT-10 )
   \                     ??check_start_stop_line_8:
   \   0000019E   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000001A2   0x7809             LDRB     R1,[R1, #+0]
   \   000001A4   0x390A             SUBS     R1,R1,#+10
   \   000001A6   0x229F             MOVS     R2,#+159
   \   000001A8   0x.... 0x....      LDR.W    R3,??DataTable13
   \   000001AC   0xFB02 0x3208      MLA      R2,R2,R8,R3
   \   000001B0   0x1882             ADDS     R2,R0,R2
   \   000001B2   0xF892 0x209F      LDRB     R2,[R2, #+159]
   \   000001B6   0x239F             MOVS     R3,#+159
   \   000001B8   0x.... 0x....      LDR.W    R12,??DataTable13
   \   000001BC   0xFB03 0xC308      MLA      R3,R3,R8,R12
   \   000001C0   0x18C3             ADDS     R3,R0,R3
   \   000001C2   0xF813 0x3C9F      LDRB     R3,[R3, #-159]
   \   000001C6   0x1AD2             SUBS     R2,R2,R3
   \   000001C8   0x4291             CMP      R1,R2
   \   000001CA   0xDA2F             BGE.N    ??check_start_stop_line_9
   \   000001CC   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000001D0   0x7809             LDRB     R1,[R1, #+0]
   \   000001D2   0x390A             SUBS     R1,R1,#+10
   \   000001D4   0x229F             MOVS     R2,#+159
   \   000001D6   0x.... 0x....      LDR.W    R3,??DataTable13
   \   000001DA   0xFB02 0x3208      MLA      R2,R2,R8,R3
   \   000001DE   0x1882             ADDS     R2,R0,R2
   \   000001E0   0xF892 0x209E      LDRB     R2,[R2, #+158]
   \   000001E4   0x239F             MOVS     R3,#+159
   \   000001E6   0x.... 0x....      LDR.W    R12,??DataTable13
   \   000001EA   0xFB03 0xC308      MLA      R3,R3,R8,R12
   \   000001EE   0x18C3             ADDS     R3,R0,R3
   \   000001F0   0xF813 0x3CA0      LDRB     R3,[R3, #-160]
   \   000001F4   0x1AD2             SUBS     R2,R2,R3
   \   000001F6   0x4291             CMP      R1,R2
   \   000001F8   0xDA18             BGE.N    ??check_start_stop_line_9
   \   000001FA   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000001FE   0x7809             LDRB     R1,[R1, #+0]
   \   00000200   0x390A             SUBS     R1,R1,#+10
   \   00000202   0x229F             MOVS     R2,#+159
   \   00000204   0x.... 0x....      LDR.W    R3,??DataTable13
   \   00000208   0xFB02 0x3208      MLA      R2,R2,R8,R3
   \   0000020C   0x1882             ADDS     R2,R0,R2
   \   0000020E   0xF892 0x209D      LDRB     R2,[R2, #+157]
   \   00000212   0x239F             MOVS     R3,#+159
   \   00000214   0x.... 0x....      LDR.W    R12,??DataTable13
   \   00000218   0xFB03 0xC308      MLA      R3,R3,R8,R12
   \   0000021C   0x18C3             ADDS     R3,R0,R3
   \   0000021E   0xF813 0x3CA1      LDRB     R3,[R3, #-161]
   \   00000222   0x1AD2             SUBS     R2,R2,R3
   \   00000224   0x4291             CMP      R1,R2
   \   00000226   0xDA01             BGE.N    ??check_start_stop_line_9
   1588                    {
   1589                       right_start_stop_hang = i;
   \   00000228   0x4646             MOV      R6,R8
   1590                       right_start_stop_flag = 1;
   \   0000022A   0x2701             MOVS     R7,#+1
   1591                    }
   1592                  }//右边搜索 
   \                     ??check_start_stop_line_9:
   \   0000022C   0x1E40             SUBS     R0,R0,#+1
   \                     ??check_start_stop_line_7:
   \   0000022E   0x....             LDR.N    R1,??DataTable11_3
   \   00000230   0xF818 0x1001      LDRB     R1,[R8, R1]
   \   00000234   0x1C89             ADDS     R1,R1,#+2
   \   00000236   0x4281             CMP      R1,R0
   \   00000238   0xDBB1             BLT.N    ??check_start_stop_line_8
   1593                } //中线符合标准
   1594                  //当找到了符合的起跑线的时候，跳出循环//判断是还要防止图像的错位
   1595                  if(  left_start_stop_flag == 1 && right_start_stop_flag == 1 && f_abs16(right_start_stop_hang - left_start_stop_hang) < 3)
   \                     ??check_start_stop_line_3:
   \   0000023A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000023C   0x2D01             CMP      R5,#+1
   \   0000023E   0xF47F 0xAEF2      BNE.W    ??check_start_stop_line_2
   \   00000242   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000244   0x2F01             CMP      R7,#+1
   \   00000246   0xF47F 0xAEEE      BNE.W    ??check_start_stop_line_2
   \   0000024A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000024C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000024E   0x1B30             SUBS     R0,R6,R4
   \   00000250   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000252   0x.... 0x....      BL       f_abs16
   \   00000256   0x2803             CMP      R0,#+3
   \   00000258   0xF6BF 0xAEE5      BGE.W    ??check_start_stop_line_2
   1596                  {
   1597                    stopflag = 1;
   \   0000025C   0x.... 0x....      LDR.W    R0,??DataTable15
   \   00000260   0x2101             MOVS     R1,#+1
   \   00000262   0x7001             STRB     R1,[R0, #+0]
   1598                    break;//
   1599                  }
   1600              }//for循环
   1601            }
   1602          }
   \                     ??check_start_stop_line_0:
   \   00000264   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1603          
   1604          
   1605          /*-----------------------------------舵机和电机的控制函数的变量---------------------------------
   1606          这个函数用于进行赛道的优化和控制，其中控制包括电机和舵机，这两部分。对其进行统一的控制
   1607          */
   1608          

   \                                 In section .text, align 2, keep-with-next
   1609          void Control()
   1610          {
   \                     Control:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   1611           int16 i=0,j=0; //
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2000             MOVS     R0,#+0
   1612            p_error = 0;
   \   00000006   0x.... 0x....      LDR.W    R2,??DataTable14_1
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0x8013             STRH     R3,[R2, #+0]
   1613            refer_error = 0;
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable14_2
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0x8013             STRH     R3,[R2, #+0]
   1614            get_p_errorline = 55;
   \   00000016   0x.... 0x....      LDR.W    R2,??DataTable14_3
   \   0000001A   0x2337             MOVS     R3,#+55
   \   0000001C   0x7013             STRB     R3,[R2, #+0]
   1615            
   1616            //求解偏差和舵机的控制p、d参数
   1617            if(control_top_whiteline -deal_start_line >10)
   \   0000001E   0x.... 0x....      LDR.W    R2,??DataTable14_4
   \   00000022   0x8812             LDRH     R2,[R2, #+0]
   \   00000024   0x.... 0x....      LDR.W    R3,??DataTable14_5
   \   00000028   0x781B             LDRB     R3,[R3, #+0]
   \   0000002A   0x1AD2             SUBS     R2,R2,R3
   \   0000002C   0x2A0B             CMP      R2,#+11
   \   0000002E   0xF2C0 0x8118      BLT.W    ??Control_0
   1618            {
   1619              if(control_top_whiteline < get_p_errorline )
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   00000036   0x8800             LDRH     R0,[R0, #+0]
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable14_3
   \   0000003C   0x7809             LDRB     R1,[R1, #+0]
   \   0000003E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000040   0x4288             CMP      R0,R1
   \   00000042   0xD205             BCS.N    ??Control_1
   1620                get_p_errorline = control_top_whiteline ;  //限制舵机的控制行舵机的控制行不能太长，太长容易在弯道入直道出现震荡
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable14_3
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable14_4
   \   0000004C   0x8809             LDRH     R1,[R1, #+0]
   \   0000004E   0x7001             STRB     R1,[R0, #+0]
   1621              
   1622              for(j= get_p_errorline; j>= get_p_errorline -4; j--)
   \                     ??Control_1:
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable14_3
   \   00000054   0x7800             LDRB     R0,[R0, #+0]
   \   00000056   0xE00B             B.N      ??Control_2
   1623              {
   1624                p_error += center_white[j];
   \                     ??Control_3:
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable14_1
   \   0000005C   0x8809             LDRH     R1,[R1, #+0]
   \   0000005E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000060   0x.... 0x....      LDR.W    R2,??DataTable15_1
   \   00000064   0x5C82             LDRB     R2,[R0, R2]
   \   00000066   0x1889             ADDS     R1,R1,R2
   \   00000068   0x.... 0x....      LDR.W    R2,??DataTable14_1
   \   0000006C   0x8011             STRH     R1,[R2, #+0]
   1625              }
   \   0000006E   0x1E40             SUBS     R0,R0,#+1
   \                     ??Control_2:
   \   00000070   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable14_3
   \   00000076   0x7809             LDRB     R1,[R1, #+0]
   \   00000078   0x1F09             SUBS     R1,R1,#+4
   \   0000007A   0x4288             CMP      R0,R1
   \   0000007C   0xDAEC             BGE.N    ??Control_3
   1626              //得出本场的error  
   1627              p_error  = (MID -  p_error/ 5);
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   00000082   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000086   0x2105             MOVS     R1,#+5
   \   00000088   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000008C   0xF1D0 0x004F      RSBS     R0,R0,#+79
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable14_1
   \   00000094   0x8008             STRH     R0,[R1, #+0]
   1628              
   1629              //获取全场的一个偏差
   1630              refer_error = MID - center_average;       //在车子出入直角弯道和一般的弯道进入直道的时候，容易出现震荡，这个和以前直接用加权平均的算法很相似，所以这里将其变的连续写
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0xF1D0 0x004F      RSBS     R0,R0,#+79
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable14_2
   \   000000A4   0x8008             STRH     R0,[R1, #+0]
   1631              
   1632              ref_his_error[0] = ref_his_error[1] ;
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   000000AA   0x8840             LDRH     R0,[R0, #+2]
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable14_7
   \   000000B0   0x8008             STRH     R0,[R1, #+0]
   1633              ref_his_error[1] = ref_his_error[2] ;
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable14_7
   \   000000BA   0x8889             LDRH     R1,[R1, #+4]
   \   000000BC   0x8041             STRH     R1,[R0, #+2]
   1634              ref_his_error[2] = ref_his_error[3] ;
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable14_7
   \   000000C6   0x88C9             LDRH     R1,[R1, #+6]
   \   000000C8   0x8081             STRH     R1,[R0, #+4]
   1635              ref_his_error[3] = ref_his_error[4] ;
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   000000CE   0x.... 0x....      LDR.W    R1,??DataTable14_7
   \   000000D2   0x8909             LDRH     R1,[R1, #+8]
   \   000000D4   0x80C1             STRH     R1,[R0, #+6]
   1636              ref_his_error[4] = refer_error ;
   \   000000D6   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable14_2
   \   000000DE   0x8809             LDRH     R1,[R1, #+0]
   \   000000E0   0x8101             STRH     R1,[R0, #+8]
   1637              
   1638              //得到加权之后的引导的偏差
   1639             refer_error  =((ref_his_error[0] + ref_his_error[1] + ref_his_error[2]+ 2*ref_his_error[3])+95*ref_his_error[4])/100;  //取出顶端的10行，有利于对波浪弯道的控制
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   000000E6   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable14_7
   \   000000EE   0xF9B1 0x1002      LDRSH    R1,[R1, #+2]
   \   000000F2   0x1808             ADDS     R0,R1,R0
   \   000000F4   0x.... 0x....      LDR.W    R1,??DataTable14_7
   \   000000F8   0xF9B1 0x1004      LDRSH    R1,[R1, #+4]
   \   000000FC   0x1840             ADDS     R0,R0,R1
   \   000000FE   0x.... 0x....      LDR.W    R1,??DataTable14_7
   \   00000102   0xF9B1 0x1006      LDRSH    R1,[R1, #+6]
   \   00000106   0xEB10 0x0041      ADDS     R0,R0,R1, LSL #+1
   \   0000010A   0x.... 0x....      LDR.W    R1,??DataTable14_7
   \   0000010E   0xF9B1 0x1008      LDRSH    R1,[R1, #+8]
   \   00000112   0x225F             MOVS     R2,#+95
   \   00000114   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   00000118   0x2164             MOVS     R1,#+100
   \   0000011A   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000011E   0x.... 0x....      LDR.W    R1,??DataTable14_2
   \   00000122   0x8008             STRH     R0,[R1, #+0]
   1640              
   1641              //引导的error
   1642             /*if((re_control_top_whiteline < control_top_whiteline) && (direction == 3 || direction== 4))  //re_control_top_whiteline top_error_servo_p
   1643               top_error_servo_p = 1*(control_top_whiteline - re_control_top_whiteline)/6;
   1644             else if((re_control_top_whiteline > control_top_whiteline) &&  direction== 4)        //入弯道加大打角
   1645               top_error_servo_p = 1*(re_control_top_whiteline - control_top_whiteline)/6;
   1646             else
   1647             
   1648             uint16 side_count_p = 0;
   1649             side_count_p = 0;
   1650             for(i=deal_start_line;i<=control_top_whiteline;i++)
   1651             {
   1652               if(center_white[i]>MID)
   1653               {
   1654                  side_count_p ++;
   1655               }
   1656               else if(center_white[i]<MID)
   1657               {
   1658                 side_count_p--;
   1659               }
   1660             }
   1661             */
   1662             if(direction == 1 && control_top_whiteline >= ROW - 2)  //当时直线状态的时候，顶部与底部有较大的偏差的时候，这个时候仍然需要一个p的作用
   \   00000124   0x.... 0x....      LDR.W    R0,??DataTable15_2
   \   00000128   0x7800             LDRB     R0,[R0, #+0]
   \   0000012A   0x2801             CMP      R0,#+1
   \   0000012C   0xD11F             BNE.N    ??Control_4
   \   0000012E   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   00000132   0x8800             LDRH     R0,[R0, #+0]
   \   00000134   0x283F             CMP      R0,#+63
   \   00000136   0xD31A             BCC.N    ??Control_4
   1663             {
   1664               top_error_servo_p = 3*f_abs16(center_white[deal_start_line] - center_white[control_top_whiteline-1])/4;       //顶部与底部的偏差最大能达到70左右
   \   00000138   0x.... 0x....      LDR.W    R0,??DataTable14_5
   \   0000013C   0x7800             LDRB     R0,[R0, #+0]
   \   0000013E   0x.... 0x....      LDR.W    R1,??DataTable15_1
   \   00000142   0x5C40             LDRB     R0,[R0, R1]
   \   00000144   0x.... 0x....      LDR.W    R1,??DataTable14_4
   \   00000148   0x8809             LDRH     R1,[R1, #+0]
   \   0000014A   0x.... 0x....      LDR.W    R2,??DataTable15_1
   \   0000014E   0x1889             ADDS     R1,R1,R2
   \   00000150   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000154   0x1A40             SUBS     R0,R0,R1
   \   00000156   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000158   0x.... 0x....      BL       f_abs16
   \   0000015C   0x2103             MOVS     R1,#+3
   \   0000015E   0x4348             MULS     R0,R1,R0
   \   00000160   0x2104             MOVS     R1,#+4
   \   00000162   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000166   0x.... 0x....      LDR.W    R1,??DataTable15_3
   \   0000016A   0x8008             STRH     R0,[R1, #+0]
   \   0000016C   0xE003             B.N      ??Control_5
   1665             }
   1666             else
   1667               top_error_servo_p = 0;
   \                     ??Control_4:
   \   0000016E   0x.... 0x....      LDR.W    R0,??DataTable15_3
   \   00000172   0x2100             MOVS     R1,#+0
   \   00000174   0x8001             STRH     R1,[R0, #+0]
   1668               
   1669              error_servo_p = 5*(ROW - control_top_whiteline )/13  +  1*f_abs16(p_error)/8 + lcd_error_servo_p;  //增加这个p有利于进弯道切
   \                     ??Control_5:
   \   00000176   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   0000017A   0x8800             LDRH     R0,[R0, #+0]
   \   0000017C   0xF1D0 0x0041      RSBS     R0,R0,#+65
   \   00000180   0x2105             MOVS     R1,#+5
   \   00000182   0x4348             MULS     R0,R1,R0
   \   00000184   0x210D             MOVS     R1,#+13
   \   00000186   0xFB90 0xF4F1      SDIV     R4,R0,R1
   \   0000018A   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   0000018E   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000192   0x.... 0x....      BL       f_abs16
   \   00000196   0x2108             MOVS     R1,#+8
   \   00000198   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000019C   0x1900             ADDS     R0,R0,R4
   \   0000019E   0x.... 0x....      LDR.W    R1,??DataTable15_4
   \   000001A2   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000001A6   0x1808             ADDS     R0,R1,R0
   \   000001A8   0x.... 0x....      LDR.W    R1,??DataTable15_5
   \   000001AC   0x8008             STRH     R0,[R1, #+0]
   1670              error_servo_d =lcd_error_servo_d;//control_top_whiteline ;  //当在比较直的线路上要求d稍微大一点 波浪弯道，过不了一直是d的问题 ，太大了
   \   000001AE   0x.... 0x....      LDR.W    R0,??DataTable15_6
   \   000001B2   0x.... 0x....      LDR.W    R1,??DataTable15_7
   \   000001B6   0x8809             LDRH     R1,[R1, #+0]
   \   000001B8   0x8001             STRH     R1,[R0, #+0]
   1671              
   1672              //归中的error
   1673              error_servo_ref_p = 1 * f_abs16(refer_error)/7 + lcd_ref_p + top_error_servo_p;  //增加这个p有利于出弯道内切     1/7
   \   000001BA   0x.... 0x....      LDR.W    R0,??DataTable14_2
   \   000001BE   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000001C2   0x.... 0x....      BL       f_abs16
   \   000001C6   0x2107             MOVS     R1,#+7
   \   000001C8   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000001CC   0x.... 0x....      LDR.W    R1,??DataTable15_8
   \   000001D0   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000001D4   0x1808             ADDS     R0,R1,R0
   \   000001D6   0x.... 0x....      LDR.W    R1,??DataTable15_3
   \   000001DA   0x8809             LDRH     R1,[R1, #+0]
   \   000001DC   0x1808             ADDS     R0,R1,R0
   \   000001DE   0x.... 0x....      LDR.W    R1,??DataTable15_9
   \   000001E2   0x8008             STRH     R0,[R1, #+0]
   1674              error_servo_ref_d = lcd_ref_d;//2*center_white_average;
   \   000001E4   0x.... 0x....      LDR.W    R0,??DataTable15_10
   \   000001E8   0x.... 0x....      LDR.W    R1,??DataTable15_11
   \   000001EC   0x8809             LDRH     R1,[R1, #+0]
   \   000001EE   0x8001             STRH     R1,[R0, #+0]
   1675              
   1676              angle=(uint16)(mid_angle + (error_servo_p * p_error + error_servo_d * (p_error - p_re_error) + 
   1677                                          error_servo_ref_p * refer_error + error_servo_ref_d * (refer_error - re_refer_error)) / 10);//
   \   000001F0   0x.... 0x....      LDR.W    R0,??DataTable15_12
   \   000001F4   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000001F8   0x.... 0x....      LDR.W    R1,??DataTable15_5
   \   000001FC   0x8809             LDRH     R1,[R1, #+0]
   \   000001FE   0x.... 0x....      LDR.W    R2,??DataTable14_1
   \   00000202   0xF9B2 0x2000      LDRSH    R2,[R2, #+0]
   \   00000206   0x.... 0x....      LDR.W    R3,??DataTable15_6
   \   0000020A   0x881B             LDRH     R3,[R3, #+0]
   \   0000020C   0x.... 0x....      LDR.W    R4,??DataTable14_1
   \   00000210   0xF9B4 0x4000      LDRSH    R4,[R4, #+0]
   \   00000214   0x.... 0x....      LDR.W    R5,??DataTable15_13
   \   00000218   0xF9B5 0x5000      LDRSH    R5,[R5, #+0]
   \   0000021C   0x1B64             SUBS     R4,R4,R5
   \   0000021E   0x4363             MULS     R3,R4,R3
   \   00000220   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   00000224   0x.... 0x....      LDR.W    R2,??DataTable15_9
   \   00000228   0x8812             LDRH     R2,[R2, #+0]
   \   0000022A   0x.... 0x....      LDR.W    R3,??DataTable14_2
   \   0000022E   0xF9B3 0x3000      LDRSH    R3,[R3, #+0]
   \   00000232   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   00000236   0x.... 0x....      LDR.W    R2,??DataTable15_10
   \   0000023A   0x8812             LDRH     R2,[R2, #+0]
   \   0000023C   0x.... 0x....      LDR.W    R3,??DataTable14_2
   \   00000240   0xF9B3 0x3000      LDRSH    R3,[R3, #+0]
   \   00000244   0x.... 0x....      LDR.W    R4,??DataTable15_14
   \   00000248   0xF9B4 0x4000      LDRSH    R4,[R4, #+0]
   \   0000024C   0x1B1B             SUBS     R3,R3,R4
   \   0000024E   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   00000252   0x220A             MOVS     R2,#+10
   \   00000254   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000258   0x1808             ADDS     R0,R1,R0
   \   0000025A   0x.... 0x....      LDR.W    R1,??DataTable15_15
   \   0000025E   0x8008             STRH     R0,[R1, #+0]
   \   00000260   0xE005             B.N      ??Control_6
   1678            } 
   1679           else
   1680             angle = re_angle;
   \                     ??Control_0:
   \   00000262   0x.... 0x....      LDR.W    R0,??DataTable15_15
   \   00000266   0x.... 0x....      LDR.W    R1,??DataTable15_16
   \   0000026A   0x8809             LDRH     R1,[R1, #+0]
   \   0000026C   0x8001             STRH     R1,[R0, #+0]
   1681          
   1682              if(angle > mid_angle +240)   //1570 235
   \                     ??Control_6:
   \   0000026E   0x.... 0x....      LDR.W    R0,??DataTable15_12
   \   00000272   0x8800             LDRH     R0,[R0, #+0]
   \   00000274   0x30F0             ADDS     R0,R0,#+240
   \   00000276   0x.... 0x....      LDR.W    R1,??DataTable15_15
   \   0000027A   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000027E   0x4288             CMP      R0,R1
   \   00000280   0xDA07             BGE.N    ??Control_7
   1683                angle = mid_angle +240;
   \   00000282   0x.... 0x....      LDR.W    R0,??DataTable15_12
   \   00000286   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000028A   0x30F0             ADDS     R0,R0,#+240
   \   0000028C   0x.... 0x....      LDR.W    R1,??DataTable15_15
   \   00000290   0x8008             STRH     R0,[R1, #+0]
   1684              if(angle<mid_angle -240)
   \                     ??Control_7:
   \   00000292   0x.... 0x....      LDR.W    R0,??DataTable15_15
   \   00000296   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000029A   0x.... 0x....      LDR.W    R1,??DataTable15_12
   \   0000029E   0x8809             LDRH     R1,[R1, #+0]
   \   000002A0   0x39F0             SUBS     R1,R1,#+240
   \   000002A2   0x4288             CMP      R0,R1
   \   000002A4   0xDA07             BGE.N    ??Control_8
   1685                angle=mid_angle -240;
   \   000002A6   0x.... 0x....      LDR.W    R0,??DataTable15_12
   \   000002AA   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000002AE   0x38F0             SUBS     R0,R0,#+240
   \   000002B0   0x.... 0x....      LDR.W    R1,??DataTable15_15
   \   000002B4   0x8008             STRH     R0,[R1, #+0]
   1686                FTM0_C3V=angle;
   \                     ??Control_8:
   \   000002B6   0x.... 0x....      LDR.W    R0,??DataTable15_17  ;; 0x40038028
   \   000002BA   0x.... 0x....      LDR.W    R1,??DataTable15_15
   \   000002BE   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000002C2   0x6001             STR      R1,[R0, #+0]
   1687                //这个时候可以调节舵机的中心值来使得车子跑正
   1688                //历史值的保留
   1689                re_angle= angle;
   \   000002C4   0x.... 0x....      LDR.W    R0,??DataTable15_16
   \   000002C8   0x.... 0x....      LDR.W    R1,??DataTable15_15
   \   000002CC   0x8809             LDRH     R1,[R1, #+0]
   \   000002CE   0x8001             STRH     R1,[R0, #+0]
   1690            p_re_error = p_error;
   \   000002D0   0x.... 0x....      LDR.W    R0,??DataTable15_13
   \   000002D4   0x.... 0x....      LDR.W    R1,??DataTable14_1
   \   000002D8   0x8809             LDRH     R1,[R1, #+0]
   \   000002DA   0x8001             STRH     R1,[R0, #+0]
   1691            re_refer_error =refer_error;
   \   000002DC   0x.... 0x....      LDR.W    R0,??DataTable15_14
   \   000002E0   0x.... 0x....      LDR.W    R1,??DataTable14_2
   \   000002E4   0x8809             LDRH     R1,[R1, #+0]
   \   000002E6   0x8001             STRH     R1,[R0, #+0]
   1692            re_control_top_whiteline = control_top_whiteline;
   \   000002E8   0x.... 0x....      LDR.W    R0,??DataTable15_18
   \   000002EC   0x.... 0x....      LDR.W    R1,??DataTable14_4
   \   000002F0   0x8809             LDRH     R1,[R1, #+0]
   \   000002F2   0x8001             STRH     R1,[R0, #+0]
   1693            
   1694            
   1695            //下面是电机的控制程序 速度的控制融入了偏差和处理的有效行
   1696           //对于这两点的应用，根据最高有效行动态的改变最高速和最低速
   1697            //然后通过偏差来计算准确的速度
   1698            
   1699            //每次对速度需要重新的设定
   1700          
   1701              if(speed_select == 0)
   \   000002F4   0x.... 0x....      LDR.W    R0,??DataTable15_19
   \   000002F8   0x7800             LDRB     R0,[R0, #+0]
   \   000002FA   0x2800             CMP      R0,#+0
   \   000002FC   0xD112             BNE.N    ??Control_9
   1702            {
   1703                 straight_speed = mySpeedswitch[0].Cstraightspeed;
   \   000002FE   0x.... 0x....      LDR.W    R0,??DataTable16
   \   00000302   0x.... 0x....      LDR.W    R1,??DataTable15_20
   \   00000306   0x8809             LDRH     R1,[R1, #+0]
   \   00000308   0x8001             STRH     R1,[R0, #+0]
   1704                 bow_speed = mySpeedswitch[0].Cbowspeed;
   \   0000030A   0x.... 0x....      LDR.W    R0,??DataTable15_20
   \   0000030E   0x8840             LDRH     R0,[R0, #+2]
   \   00000310   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000314   0x8008             STRH     R0,[R1, #+0]
   1705                 straight_speed_ed = mySpeedswitch[0].Cstraightspeed_ed;
   \   00000316   0x.... 0x....      LDR.W    R0,??DataTable15_20
   \   0000031A   0x8880             LDRH     R0,[R0, #+4]
   \   0000031C   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   00000320   0x8008             STRH     R0,[R1, #+0]
   \   00000322   0xE071             B.N      ??Control_10
   1706             }
   1707             else if(speed_select == 1)
   \                     ??Control_9:
   \   00000324   0x.... 0x....      LDR.W    R0,??DataTable15_19
   \   00000328   0x7800             LDRB     R0,[R0, #+0]
   \   0000032A   0x2801             CMP      R0,#+1
   \   0000032C   0xD112             BNE.N    ??Control_11
   1708             {
   1709                 straight_speed = mySpeedswitch[1].Cstraightspeed;
   \   0000032E   0x.... 0x....      LDR.W    R0,??DataTable15_20
   \   00000332   0x88C0             LDRH     R0,[R0, #+6]
   \   00000334   0x.... 0x....      LDR.W    R1,??DataTable16
   \   00000338   0x8008             STRH     R0,[R1, #+0]
   1710                 bow_speed = mySpeedswitch[1].Cbowspeed;
   \   0000033A   0x.... 0x....      LDR.W    R0,??DataTable15_20
   \   0000033E   0x8900             LDRH     R0,[R0, #+8]
   \   00000340   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000344   0x8008             STRH     R0,[R1, #+0]
   1711                 straight_speed_ed = mySpeedswitch[1].Cstraightspeed_ed;
   \   00000346   0x.... 0x....      LDR.W    R0,??DataTable15_20
   \   0000034A   0x8940             LDRH     R0,[R0, #+10]
   \   0000034C   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   00000350   0x8008             STRH     R0,[R1, #+0]
   \   00000352   0xE059             B.N      ??Control_10
   1712             }
   1713                else if(speed_select == 2)
   \                     ??Control_11:
   \   00000354   0x.... 0x....      LDR.W    R0,??DataTable15_19
   \   00000358   0x7800             LDRB     R0,[R0, #+0]
   \   0000035A   0x2802             CMP      R0,#+2
   \   0000035C   0xD112             BNE.N    ??Control_12
   1714             {
   1715                 straight_speed = mySpeedswitch[2].Cstraightspeed;
   \   0000035E   0x.... 0x....      LDR.W    R0,??DataTable15_20
   \   00000362   0x8980             LDRH     R0,[R0, #+12]
   \   00000364   0x.... 0x....      LDR.W    R1,??DataTable16
   \   00000368   0x8008             STRH     R0,[R1, #+0]
   1716                 bow_speed = mySpeedswitch[2].Cbowspeed;
   \   0000036A   0x.... 0x....      LDR.W    R0,??DataTable15_20
   \   0000036E   0x89C0             LDRH     R0,[R0, #+14]
   \   00000370   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000374   0x8008             STRH     R0,[R1, #+0]
   1717                 straight_speed_ed = mySpeedswitch[2].Cstraightspeed_ed;
   \   00000376   0x.... 0x....      LDR.W    R0,??DataTable15_20
   \   0000037A   0x8A00             LDRH     R0,[R0, #+16]
   \   0000037C   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   00000380   0x8008             STRH     R0,[R1, #+0]
   \   00000382   0xE041             B.N      ??Control_10
   1718             }
   1719                else if(speed_select == 3)
   \                     ??Control_12:
   \   00000384   0x.... 0x....      LDR.W    R0,??DataTable15_19
   \   00000388   0x7800             LDRB     R0,[R0, #+0]
   \   0000038A   0x2803             CMP      R0,#+3
   \   0000038C   0xD112             BNE.N    ??Control_13
   1720             {
   1721                 straight_speed = mySpeedswitch[3].Cstraightspeed;
   \   0000038E   0x.... 0x....      LDR.W    R0,??DataTable15_20
   \   00000392   0x8A40             LDRH     R0,[R0, #+18]
   \   00000394   0x.... 0x....      LDR.W    R1,??DataTable16
   \   00000398   0x8008             STRH     R0,[R1, #+0]
   1722                 bow_speed = mySpeedswitch[3].Cbowspeed;
   \   0000039A   0x.... 0x....      LDR.W    R0,??DataTable15_20
   \   0000039E   0x8A80             LDRH     R0,[R0, #+20]
   \   000003A0   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000003A4   0x8008             STRH     R0,[R1, #+0]
   1723                 straight_speed_ed = mySpeedswitch[3].Cstraightspeed_ed;
   \   000003A6   0x.... 0x....      LDR.W    R0,??DataTable15_20
   \   000003AA   0x8AC0             LDRH     R0,[R0, #+22]
   \   000003AC   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   000003B0   0x8008             STRH     R0,[R1, #+0]
   \   000003B2   0xE029             B.N      ??Control_10
   1724             }
   1725                else if(speed_select == 4)
   \                     ??Control_13:
   \   000003B4   0x.... 0x....      LDR.W    R0,??DataTable15_19
   \   000003B8   0x7800             LDRB     R0,[R0, #+0]
   \   000003BA   0x2804             CMP      R0,#+4
   \   000003BC   0xD112             BNE.N    ??Control_14
   1726             {
   1727                 straight_speed = mySpeedswitch[4].Cstraightspeed;
   \   000003BE   0x.... 0x....      LDR.W    R0,??DataTable15_20
   \   000003C2   0x8B00             LDRH     R0,[R0, #+24]
   \   000003C4   0x.... 0x....      LDR.W    R1,??DataTable16
   \   000003C8   0x8008             STRH     R0,[R1, #+0]
   1728                 bow_speed = mySpeedswitch[4].Cbowspeed;
   \   000003CA   0x.... 0x....      LDR.W    R0,??DataTable15_20
   \   000003CE   0x8B40             LDRH     R0,[R0, #+26]
   \   000003D0   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000003D4   0x8008             STRH     R0,[R1, #+0]
   1729                 straight_speed_ed = mySpeedswitch[4].Cstraightspeed_ed;
   \   000003D6   0x.... 0x....      LDR.W    R0,??DataTable15_20
   \   000003DA   0x8B80             LDRH     R0,[R0, #+28]
   \   000003DC   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   000003E0   0x8008             STRH     R0,[R1, #+0]
   \   000003E2   0xE011             B.N      ??Control_10
   1730             }
   1731             else 
   1732             {
   1733                 straight_speed = mySpeedswitch[5].Cstraightspeed;
   \                     ??Control_14:
   \   000003E4   0x.... 0x....      LDR.W    R0,??DataTable15_20
   \   000003E8   0x8BC0             LDRH     R0,[R0, #+30]
   \   000003EA   0x.... 0x....      LDR.W    R1,??DataTable16
   \   000003EE   0x8008             STRH     R0,[R1, #+0]
   1734                 bow_speed = mySpeedswitch[5].Cbowspeed;
   \   000003F0   0x.... 0x....      LDR.W    R0,??DataTable15_20
   \   000003F4   0x8C00             LDRH     R0,[R0, #+32]
   \   000003F6   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000003FA   0x8008             STRH     R0,[R1, #+0]
   1735                 straight_speed_ed = mySpeedswitch[5].Cstraightspeed_ed;
   \   000003FC   0x.... 0x....      LDR.W    R0,??DataTable15_20
   \   00000400   0x8C40             LDRH     R0,[R0, #+34]
   \   00000402   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   00000406   0x8008             STRH     R0,[R1, #+0]
   1736             }
   1737             
   1738             straight_speed += lcd_straight_speed;
   \                     ??Control_10:
   \   00000408   0x.... 0x....      LDR.W    R0,??DataTable16
   \   0000040C   0x8800             LDRH     R0,[R0, #+0]
   \   0000040E   0x.... 0x....      LDR.W    R1,??DataTable16_3
   \   00000412   0x8809             LDRH     R1,[R1, #+0]
   \   00000414   0x1808             ADDS     R0,R1,R0
   \   00000416   0x.... 0x....      LDR.W    R1,??DataTable16
   \   0000041A   0x8008             STRH     R0,[R1, #+0]
   1739             bow_speed += lcd_bow_speed;
   \   0000041C   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000420   0x8800             LDRH     R0,[R0, #+0]
   \   00000422   0x.... 0x....      LDR.W    R1,??DataTable16_4
   \   00000426   0x8809             LDRH     R1,[R1, #+0]
   \   00000428   0x1808             ADDS     R0,R1,R0
   \   0000042A   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   0000042E   0x8008             STRH     R0,[R1, #+0]
   1740             straight_speed_ed += lcd_straight_speed_ed;
   \   00000430   0x.... 0x....      LDR.W    R0,??DataTable16_2
   \   00000434   0x8800             LDRH     R0,[R0, #+0]
   \   00000436   0x.... 0x....      LDR.W    R1,??DataTable17
   \   0000043A   0x8809             LDRH     R1,[R1, #+0]
   \   0000043C   0x1808             ADDS     R0,R1,R0
   \   0000043E   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   00000442   0x8008             STRH     R0,[R1, #+0]
   1741             
   1742                if( direction == 1 )  //对于速度的控制实现不同的赛道用不同的控速
   \   00000444   0x.... 0x....      LDR.W    R0,??DataTable15_2
   \   00000448   0x7800             LDRB     R0,[R0, #+0]
   \   0000044A   0x2801             CMP      R0,#+1
   \   0000044C   0xD122             BNE.N    ??Control_15
   1743                 {
   1744                   straight_speed = (control_top_whiteline+ROW)*straight_speed/ROW/2;  //限定了最高速度
   \   0000044E   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   00000452   0x8800             LDRH     R0,[R0, #+0]
   \   00000454   0x3041             ADDS     R0,R0,#+65
   \   00000456   0x.... 0x....      LDR.W    R1,??DataTable16
   \   0000045A   0x8809             LDRH     R1,[R1, #+0]
   \   0000045C   0x4348             MULS     R0,R1,R0
   \   0000045E   0x2141             MOVS     R1,#+65
   \   00000460   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000464   0x2102             MOVS     R1,#+2
   \   00000466   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000046A   0x.... 0x....      LDR.W    R1,??DataTable16
   \   0000046E   0x8008             STRH     R0,[R1, #+0]
   1745                   bow_speed = (control_top_whiteline+ROW)*(bow_speed)/2/ROW;         //只是限定了最低速度
   \   00000470   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   00000474   0x8800             LDRH     R0,[R0, #+0]
   \   00000476   0x3041             ADDS     R0,R0,#+65
   \   00000478   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   0000047C   0x8809             LDRH     R1,[R1, #+0]
   \   0000047E   0x4348             MULS     R0,R1,R0
   \   00000480   0x2102             MOVS     R1,#+2
   \   00000482   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000486   0x2141             MOVS     R1,#+65
   \   00000488   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000048C   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000490   0x8008             STRH     R0,[R1, #+0]
   \   00000492   0xE05F             B.N      ??Control_16
   1746                 }    
   1747                else if( direction == 2 )  //波浪弯
   \                     ??Control_15:
   \   00000494   0x.... 0x....      LDR.W    R0,??DataTable15_2
   \   00000498   0x7800             LDRB     R0,[R0, #+0]
   \   0000049A   0x2802             CMP      R0,#+2
   \   0000049C   0xD11C             BNE.N    ??Control_17
   1748                 {
   1749                   straight_speed = (control_top_whiteline-2)*straight_speed/ROW;  //   限定了最高速度
   \   0000049E   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   000004A2   0x8800             LDRH     R0,[R0, #+0]
   \   000004A4   0x1E80             SUBS     R0,R0,#+2
   \   000004A6   0x.... 0x....      LDR.W    R1,??DataTable16
   \   000004AA   0x8809             LDRH     R1,[R1, #+0]
   \   000004AC   0x4348             MULS     R0,R1,R0
   \   000004AE   0x2141             MOVS     R1,#+65
   \   000004B0   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000004B4   0x.... 0x....      LDR.W    R1,??DataTable16
   \   000004B8   0x8008             STRH     R0,[R1, #+0]
   1750                   bow_speed =  (control_top_whiteline-2)*(bow_speed)/ROW;         //只是限定了最低速度
   \   000004BA   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   000004BE   0x8800             LDRH     R0,[R0, #+0]
   \   000004C0   0x1E80             SUBS     R0,R0,#+2
   \   000004C2   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000004C6   0x8809             LDRH     R1,[R1, #+0]
   \   000004C8   0x4348             MULS     R0,R1,R0
   \   000004CA   0x2141             MOVS     R1,#+65
   \   000004CC   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000004D0   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000004D4   0x8008             STRH     R0,[R1, #+0]
   \   000004D6   0xE03D             B.N      ??Control_16
   1751                 }
   1752                  else if( direction == 3)  //入弯
   \                     ??Control_17:
   \   000004D8   0x.... 0x....      LDR.W    R0,??DataTable15_2
   \   000004DC   0x7800             LDRB     R0,[R0, #+0]
   \   000004DE   0x2803             CMP      R0,#+3
   \   000004E0   0xD11C             BNE.N    ??Control_18
   1753                 {
   1754                   straight_speed = (control_top_whiteline-4)*straight_speed/ROW;  //   限定了最高速度
   \   000004E2   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   000004E6   0x8800             LDRH     R0,[R0, #+0]
   \   000004E8   0x1F00             SUBS     R0,R0,#+4
   \   000004EA   0x.... 0x....      LDR.W    R1,??DataTable16
   \   000004EE   0x8809             LDRH     R1,[R1, #+0]
   \   000004F0   0x4348             MULS     R0,R1,R0
   \   000004F2   0x2141             MOVS     R1,#+65
   \   000004F4   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000004F8   0x.... 0x....      LDR.W    R1,??DataTable16
   \   000004FC   0x8008             STRH     R0,[R1, #+0]
   1755                   bow_speed =  (control_top_whiteline-4)*(bow_speed)/ROW;         //只是限定了最低速度
   \   000004FE   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   00000502   0x8800             LDRH     R0,[R0, #+0]
   \   00000504   0x1F00             SUBS     R0,R0,#+4
   \   00000506   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   0000050A   0x8809             LDRH     R1,[R1, #+0]
   \   0000050C   0x4348             MULS     R0,R1,R0
   \   0000050E   0x2141             MOVS     R1,#+65
   \   00000510   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000514   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000518   0x8008             STRH     R0,[R1, #+0]
   \   0000051A   0xE01B             B.N      ??Control_16
   1756                 }
   1757              
   1758                 else   //弯道
   1759                 { 
   1760                  straight_speed = (control_top_whiteline-4)*straight_speed/ROW;  //   限定了最高速度
   \                     ??Control_18:
   \   0000051C   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   00000520   0x8800             LDRH     R0,[R0, #+0]
   \   00000522   0x1F00             SUBS     R0,R0,#+4
   \   00000524   0x.... 0x....      LDR.W    R1,??DataTable16
   \   00000528   0x8809             LDRH     R1,[R1, #+0]
   \   0000052A   0x4348             MULS     R0,R1,R0
   \   0000052C   0x2141             MOVS     R1,#+65
   \   0000052E   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000532   0x.... 0x....      LDR.W    R1,??DataTable16
   \   00000536   0x8008             STRH     R0,[R1, #+0]
   1761                   bow_speed =   (control_top_whiteline-4)*(bow_speed)/ROW;         //只是限定了最低速度
   \   00000538   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   0000053C   0x8800             LDRH     R0,[R0, #+0]
   \   0000053E   0x1F00             SUBS     R0,R0,#+4
   \   00000540   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000544   0x8809             LDRH     R1,[R1, #+0]
   \   00000546   0x4348             MULS     R0,R1,R0
   \   00000548   0x2141             MOVS     R1,#+65
   \   0000054A   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000054E   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000552   0x8008             STRH     R0,[R1, #+0]
   1762                 }
   1763                
   1764                  
   1765                  //center_error_average的变化范围不超过30  
   1766                if(control_top_whiteline ==ROW - 1&&(direction==1||direction==2) )
   \                     ??Control_16:
   \   00000554   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   00000558   0x8800             LDRH     R0,[R0, #+0]
   \   0000055A   0x2840             CMP      R0,#+64
   \   0000055C   0xD134             BNE.N    ??Control_19
   \   0000055E   0x.... 0x....      LDR.W    R0,??DataTable15_2
   \   00000562   0x7800             LDRB     R0,[R0, #+0]
   \   00000564   0x2801             CMP      R0,#+1
   \   00000566   0xD004             BEQ.N    ??Control_20
   \   00000568   0x.... 0x....      LDR.W    R0,??DataTable15_2
   \   0000056C   0x7800             LDRB     R0,[R0, #+0]
   \   0000056E   0x2802             CMP      R0,#+2
   \   00000570   0xD12A             BNE.N    ??Control_19
   1767                    {
   1768                      if (direction == 1 )
   \                     ??Control_20:
   \   00000572   0x.... 0x....      LDR.W    R0,??DataTable15_2
   \   00000576   0x7800             LDRB     R0,[R0, #+0]
   \   00000578   0x2801             CMP      R0,#+1
   \   0000057A   0xD11D             BNE.N    ??Control_21
   1769                      {
   1770                        straight_count++;
   \   0000057C   0x.... 0x....      LDR.W    R0,??DataTable17_1
   \   00000580   0x8800             LDRH     R0,[R0, #+0]
   \   00000582   0x1C40             ADDS     R0,R0,#+1
   \   00000584   0x.... 0x....      LDR.W    R1,??DataTable17_1
   \   00000588   0x8008             STRH     R0,[R1, #+0]
   1771                        if(straight_count > 2)
   \   0000058A   0x.... 0x....      LDR.W    R0,??DataTable17_1
   \   0000058E   0x8800             LDRH     R0,[R0, #+0]
   \   00000590   0x2803             CMP      R0,#+3
   \   00000592   0xD30A             BCC.N    ??Control_22
   1772                         speed_except = straight_speed + straight_speed_ed;  //直线和波浪弯道给全速行驶
   \   00000594   0x.... 0x....      LDR.W    R0,??DataTable16
   \   00000598   0x8800             LDRH     R0,[R0, #+0]
   \   0000059A   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   0000059E   0x8809             LDRH     R1,[R1, #+0]
   \   000005A0   0x1808             ADDS     R0,R1,R0
   \   000005A2   0x.... 0x....      LDR.W    R1,??DataTable17_2
   \   000005A6   0x8008             STRH     R0,[R1, #+0]
   \   000005A8   0xE0FB             B.N      ??Control_23
   1773                        else
   1774                         speed_except = straight_speed; 
   \                     ??Control_22:
   \   000005AA   0x.... 0x....      LDR.W    R0,??DataTable17_2
   \   000005AE   0x.... 0x....      LDR.W    R1,??DataTable16
   \   000005B2   0x8809             LDRH     R1,[R1, #+0]
   \   000005B4   0x8001             STRH     R1,[R0, #+0]
   \   000005B6   0xE0F4             B.N      ??Control_23
   1775                      }
   1776                      else
   1777                      {
   1778                        speed_except = straight_speed + 20;
   \                     ??Control_21:
   \   000005B8   0x.... 0x....      LDR.W    R0,??DataTable16
   \   000005BC   0x8800             LDRH     R0,[R0, #+0]
   \   000005BE   0x3014             ADDS     R0,R0,#+20
   \   000005C0   0x.... 0x....      LDR.W    R1,??DataTable17_2
   \   000005C4   0x8008             STRH     R0,[R1, #+0]
   \   000005C6   0xE0EC             B.N      ??Control_23
   1779                      }
   1780                    }
   1781                /*处理长直道入弯道，首先是利用线性相关系数，计算出固定前瞻的线性相关性，（比如有1.9的前瞻，只是计算出前1.2米的相关系数），
   1782                然后利用剩下前瞻，进行对是否入弯道进行判断，判断的方法是判断顶端行的变化趋势。若是同时弯向一边，则说明是进入了弯道。利用
   1783                这点信息进行直道入弯道的判断，具体的减速是将速度减到弯道的速度，而不是将速度减小到比弯道还低。否则容易引起车子在弯道的不稳定。
   1784                */
   1785           
   1786                else if(f_absf(linear_factor) == 1)   //由于只是在进弯道的时候进行判断，所以这里就是入弯状态
   \                     ??Control_19:
   \   000005C8   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   000005CC   0x6800             LDR      R0,[R0, #+0]
   \   000005CE   0x.... 0x....      BL       f_absf
   \   000005D2   0xF05F 0x517E      MOVS     R1,#+1065353216
   \   000005D6   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   000005DA   0xF040 0x80A1      BNE.W    ??Control_24
   1787                {
   1788                  straight_count = 0;
   \   000005DE   0x.... 0x....      LDR.W    R0,??DataTable17_1
   \   000005E2   0x2100             MOVS     R1,#+0
   \   000005E4   0x8001             STRH     R1,[R0, #+0]
   1789                  for(i = 50;i<control_top_whiteline;i++)
   \   000005E6   0x2132             MOVS     R1,#+50
   \   000005E8   0xE000             B.N      ??Control_25
   \                     ??Control_26:
   \   000005EA   0x1C49             ADDS     R1,R1,#+1
   \                     ??Control_25:
   \   000005EC   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000005EE   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   000005F2   0x8800             LDRH     R0,[R0, #+0]
   \   000005F4   0x4281             CMP      R1,R0
   \   000005F6   0xDA33             BGE.N    ??Control_27
   1790                  {
   1791                  if((center_white[i-1]<center_white[i-2] && center_white[i]<center_white[i-1])
   1792                       || (center_white[i-1] > center_white[i-2] && center_white[i]>center_white[i-1]))
   \   000005F8   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000005FA   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   000005FE   0x1808             ADDS     R0,R1,R0
   \   00000600   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   00000604   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000606   0x.... 0x....      LDR.W    R2,??DataTable15_1
   \   0000060A   0x188A             ADDS     R2,R1,R2
   \   0000060C   0xF812 0x2C02      LDRB     R2,[R2, #-2]
   \   00000610   0x4290             CMP      R0,R2
   \   00000612   0xD20B             BCS.N    ??Control_28
   \   00000614   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000616   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   0000061A   0x5C08             LDRB     R0,[R1, R0]
   \   0000061C   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000061E   0x.... 0x....      LDR.W    R2,??DataTable15_1
   \   00000622   0x188A             ADDS     R2,R1,R2
   \   00000624   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \   00000628   0x4290             CMP      R0,R2
   \   0000062A   0xD319             BCC.N    ??Control_29
   \                     ??Control_28:
   \   0000062C   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000062E   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000632   0x1808             ADDS     R0,R1,R0
   \   00000634   0xF810 0x0C02      LDRB     R0,[R0, #-2]
   \   00000638   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000063A   0x.... 0x....      LDR.W    R2,??DataTable15_1
   \   0000063E   0x188A             ADDS     R2,R1,R2
   \   00000640   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \   00000644   0x4290             CMP      R0,R2
   \   00000646   0xD2D0             BCS.N    ??Control_26
   \   00000648   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000064A   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   0000064E   0x1808             ADDS     R0,R1,R0
   \   00000650   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   00000654   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000656   0x.... 0x....      LDR.W    R2,??DataTable15_1
   \   0000065A   0x5C8A             LDRB     R2,[R1, R2]
   \   0000065C   0x4290             CMP      R0,R2
   \   0000065E   0xD2C4             BCS.N    ??Control_26
   1793                         break;
   1794                  }
   1795                   full_speed_line = i;
   \                     ??Control_29:
   \                     ??Control_27:
   \   00000660   0x.... 0x....      LDR.W    R0,??DataTable17_4
   \   00000664   0x7001             STRB     R1,[R0, #+0]
   1796                   
   1797                   if(full_speed_line > 62)
   \   00000666   0x.... 0x....      LDR.W    R0,??DataTable17_4
   \   0000066A   0x7800             LDRB     R0,[R0, #+0]
   \   0000066C   0x283F             CMP      R0,#+63
   \   0000066E   0xD313             BCC.N    ??Control_30
   1798                   {
   1799                     speed_except = MIN_INT((3*straight_speed+1*bow_speed)/4,120);
   \   00000670   0x2178             MOVS     R1,#+120
   \   00000672   0x.... 0x....      LDR.W    R0,??DataTable16
   \   00000676   0x8800             LDRH     R0,[R0, #+0]
   \   00000678   0x2203             MOVS     R2,#+3
   \   0000067A   0x4350             MULS     R0,R2,R0
   \   0000067C   0x.... 0x....      LDR.W    R2,??DataTable16_1
   \   00000680   0x8812             LDRH     R2,[R2, #+0]
   \   00000682   0xFA10 0xF082      UXTAH    R0,R0,R2
   \   00000686   0x2204             MOVS     R2,#+4
   \   00000688   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \   0000068C   0x.... 0x....      BL       MIN_INT
   \   00000690   0x.... 0x....      LDR.W    R1,??DataTable17_2
   \   00000694   0x8008             STRH     R0,[R1, #+0]
   \   00000696   0xE084             B.N      ??Control_23
   1800                   }
   1801                   else if(full_speed_line > 58)
   \                     ??Control_30:
   \   00000698   0x.... 0x....      LDR.W    R0,??DataTable17_4
   \   0000069C   0x7800             LDRB     R0,[R0, #+0]
   \   0000069E   0x283B             CMP      R0,#+59
   \   000006A0   0xD313             BCC.N    ??Control_31
   1802                   {
   1803                     speed_except = MIN_INT((3*straight_speed+bow_speed)/4,110);
   \   000006A2   0x216E             MOVS     R1,#+110
   \   000006A4   0x.... 0x....      LDR.W    R0,??DataTable16
   \   000006A8   0x8800             LDRH     R0,[R0, #+0]
   \   000006AA   0x2203             MOVS     R2,#+3
   \   000006AC   0x4350             MULS     R0,R2,R0
   \   000006AE   0x.... 0x....      LDR.W    R2,??DataTable16_1
   \   000006B2   0x8812             LDRH     R2,[R2, #+0]
   \   000006B4   0xFA10 0xF082      UXTAH    R0,R0,R2
   \   000006B8   0x2204             MOVS     R2,#+4
   \   000006BA   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \   000006BE   0x.... 0x....      BL       MIN_INT
   \   000006C2   0x.... 0x....      LDR.W    R1,??DataTable17_2
   \   000006C6   0x8008             STRH     R0,[R1, #+0]
   \   000006C8   0xE06B             B.N      ??Control_23
   1804                   }
   1805                   else if(full_speed_line > 54)
   \                     ??Control_31:
   \   000006CA   0x.... 0x....      LDR.W    R0,??DataTable17_4
   \   000006CE   0x7800             LDRB     R0,[R0, #+0]
   \   000006D0   0x2837             CMP      R0,#+55
   \   000006D2   0xD312             BCC.N    ??Control_32
   1806                   {
   1807                     speed_except = MIN_INT((2*straight_speed+bow_speed)/3,100);
   \   000006D4   0x2164             MOVS     R1,#+100
   \   000006D6   0x.... 0x....      LDR.W    R0,??DataTable16
   \   000006DA   0x8800             LDRH     R0,[R0, #+0]
   \   000006DC   0x0040             LSLS     R0,R0,#+1
   \   000006DE   0x.... 0x....      LDR.W    R2,??DataTable16_1
   \   000006E2   0x8812             LDRH     R2,[R2, #+0]
   \   000006E4   0xFA10 0xF082      UXTAH    R0,R0,R2
   \   000006E8   0x2203             MOVS     R2,#+3
   \   000006EA   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \   000006EE   0x.... 0x....      BL       MIN_INT
   \   000006F2   0x.... 0x....      LDR.W    R1,??DataTable17_2
   \   000006F6   0x8008             STRH     R0,[R1, #+0]
   \   000006F8   0xE053             B.N      ??Control_23
   1808                   }
   1809                   else
   1810                   {
   1811                     speed_except = MIN_INT((straight_speed+2*bow_speed)/3,94);
   \                     ??Control_32:
   \   000006FA   0x215E             MOVS     R1,#+94
   \   000006FC   0x.... 0x....      LDR.W    R0,??DataTable16
   \   00000700   0x8800             LDRH     R0,[R0, #+0]
   \   00000702   0x.... 0x....      LDR.W    R2,??DataTable16_1
   \   00000706   0x8812             LDRH     R2,[R2, #+0]
   \   00000708   0x0052             LSLS     R2,R2,#+1
   \   0000070A   0xFA12 0xF080      UXTAH    R0,R2,R0
   \   0000070E   0x2203             MOVS     R2,#+3
   \   00000710   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \   00000714   0x.... 0x....      BL       MIN_INT
   \   00000718   0x.... 0x....      LDR.W    R1,??DataTable17_2
   \   0000071C   0x8008             STRH     R0,[R1, #+0]
   \   0000071E   0xE040             B.N      ??Control_23
   1812                   }
   1813                   
   1814                }
   1815                else
   1816                {
   1817                  straight_count = 0;
   \                     ??Control_24:
   \   00000720   0x.... 0x....      LDR.W    R0,??DataTable17_1
   \   00000724   0x2100             MOVS     R1,#+0
   \   00000726   0x8001             STRH     R1,[R0, #+0]
   1818                  if(straight_speed - center_error_average*center_error_average*(straight_speed - bow_speed)/900 < bow_speed )
   \   00000728   0x.... 0x....      LDR.W    R0,??DataTable16
   \   0000072C   0x8800             LDRH     R0,[R0, #+0]
   \   0000072E   0x.... 0x....      LDR.W    R1,??DataTable18
   \   00000732   0x8809             LDRH     R1,[R1, #+0]
   \   00000734   0x.... 0x....      LDR.W    R2,??DataTable18
   \   00000738   0x8812             LDRH     R2,[R2, #+0]
   \   0000073A   0x4351             MULS     R1,R2,R1
   \   0000073C   0x.... 0x....      LDR.W    R2,??DataTable16
   \   00000740   0x8812             LDRH     R2,[R2, #+0]
   \   00000742   0x.... 0x....      LDR.W    R3,??DataTable16_1
   \   00000746   0x881B             LDRH     R3,[R3, #+0]
   \   00000748   0x1AD2             SUBS     R2,R2,R3
   \   0000074A   0x4351             MULS     R1,R2,R1
   \   0000074C   0xF44F 0x7261      MOV      R2,#+900
   \   00000750   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000754   0x1A40             SUBS     R0,R0,R1
   \   00000756   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   0000075A   0x8809             LDRH     R1,[R1, #+0]
   \   0000075C   0x4288             CMP      R0,R1
   \   0000075E   0xDA06             BGE.N    ??Control_33
   1819                    speed_except =  bow_speed; 
   \   00000760   0x.... 0x....      LDR.W    R0,??DataTable17_2
   \   00000764   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000768   0x8809             LDRH     R1,[R1, #+0]
   \   0000076A   0x8001             STRH     R1,[R0, #+0]
   \   0000076C   0xE019             B.N      ??Control_23
   1820                  else 
   1821                    speed_except = straight_speed - center_error_average*center_error_average*(straight_speed - bow_speed)/900 ;
   \                     ??Control_33:
   \   0000076E   0x.... 0x....      LDR.W    R0,??DataTable16
   \   00000772   0x8800             LDRH     R0,[R0, #+0]
   \   00000774   0x.... 0x....      LDR.W    R1,??DataTable18
   \   00000778   0x8809             LDRH     R1,[R1, #+0]
   \   0000077A   0x.... 0x....      LDR.W    R2,??DataTable18
   \   0000077E   0x8812             LDRH     R2,[R2, #+0]
   \   00000780   0x4351             MULS     R1,R2,R1
   \   00000782   0x.... 0x....      LDR.W    R2,??DataTable16
   \   00000786   0x8812             LDRH     R2,[R2, #+0]
   \   00000788   0x.... 0x....      LDR.W    R3,??DataTable16_1
   \   0000078C   0x881B             LDRH     R3,[R3, #+0]
   \   0000078E   0x1AD2             SUBS     R2,R2,R3
   \   00000790   0x4351             MULS     R1,R2,R1
   \   00000792   0xF44F 0x7261      MOV      R2,#+900
   \   00000796   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   0000079A   0x1A40             SUBS     R0,R0,R1
   \   0000079C   0x.... 0x....      LDR.W    R1,??DataTable17_2
   \   000007A0   0x8008             STRH     R0,[R1, #+0]
   1822                }
   1823                
   1824                if(stopflag == 1 && speed_down_cnt <= 10)
   \                     ??Control_23:
   \   000007A2   0x.... 0x....      LDR.W    R0,??DataTable15
   \   000007A6   0x7800             LDRB     R0,[R0, #+0]
   \   000007A8   0x2800             CMP      R0,#+0
   \   000007AA   0xD00B             BEQ.N    ??Control_34
   \   000007AC   0x.... 0x....      LDR.W    R0,??DataTable19
   \   000007B0   0x8800             LDRH     R0,[R0, #+0]
   \   000007B2   0x280B             CMP      R0,#+11
   \   000007B4   0xD206             BCS.N    ??Control_34
   1825                {
   1826                  speed_down_cnt ++;
   \   000007B6   0x.... 0x....      LDR.W    R0,??DataTable19
   \   000007BA   0x8800             LDRH     R0,[R0, #+0]
   \   000007BC   0x1C40             ADDS     R0,R0,#+1
   \   000007BE   0x.... 0x....      LDR.W    R1,??DataTable19
   \   000007C2   0x8008             STRH     R0,[R1, #+0]
   1827                }
   1828          
   1829          }
   \                     ??Control_34:
   \   000007C4   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1830          
   1831          //------------------------串口发送函数------------------------//

   \                                 In section .text, align 4, keep-with-next
   1832          void SCI0_send_mesage(void)
   1833          {
   \                     SCI0_send_mesage:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   1834              int i = 0,j = 0;
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x2500             MOVS     R5,#+0
   1835              static bool sci_temp = 0;
   1836              DisableInterrupts;  //发送图像数据时，要关闭所有中断，否则会出错    
   \   00000006   0xB672             CPSID i         
   1837              if(send_mes == 1)  //图像
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD178             BNE.N    ??SCI0_send_mesage_0
   1838              {  
   1839                while(!(UART0_S1&UART_S1_TDRE_MASK));   //等待数据到达
   \                     ??SCI0_send_mesage_1:
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable18_1  ;; 0x4006a004
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x0600             LSLS     R0,R0,#+24
   \   0000001A   0xD5FA             BPL.N    ??SCI0_send_mesage_1
   1840                  UART0_D = WHITE_BLACK_OT;//由于阀值的不存在，故这里只是随便填写的一个数字
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable18_2  ;; 0x4006a007
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable18_3
   \   00000024   0x7809             LDRB     R1,[R1, #+0]
   \   00000026   0x7001             STRB     R1,[R0, #+0]
   1841                        while(!(UART0_S1&UART_S1_TDRE_MASK));   //等待数据到达
   \                     ??SCI0_send_mesage_2:
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable18_1  ;; 0x4006a004
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x0600             LSLS     R0,R0,#+24
   \   00000030   0xD5FA             BPL.N    ??SCI0_send_mesage_2
   1842                  UART0_D = (uint8)ROW;
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable18_2  ;; 0x4006a007
   \   00000036   0x2141             MOVS     R1,#+65
   \   00000038   0x7001             STRB     R1,[R0, #+0]
   1843                        while(!(UART0_S1&UART_S1_TDRE_MASK));   //等待数据到达
   \                     ??SCI0_send_mesage_3:
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable18_1  ;; 0x4006a004
   \   0000003E   0x7800             LDRB     R0,[R0, #+0]
   \   00000040   0x0600             LSLS     R0,R0,#+24
   \   00000042   0xD5FA             BPL.N    ??SCI0_send_mesage_3
   1844                  UART0_D = (uint8)COLUMN;
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable18_2  ;; 0x4006a007
   \   00000048   0x219F             MOVS     R1,#+159
   \   0000004A   0x7001             STRB     R1,[R0, #+0]
   1845                  
   1846                  
   1847                  //上位机显示的第一个点是左上角，所以我发的时候第一个点就发左上角的点
   1848                for(i =ROW-1;i>=0;i--)
   \   0000004C   0x2440             MOVS     R4,#+64
   \   0000004E   0xE014             B.N      ??SCI0_send_mesage_4
   1849                {
   1850                  for(j=0;j<COLUMN;j++)
   1851                  {
   1852                    while(!(UART0_S1&UART_S1_TDRE_MASK));//等待数据到达
   \                     ??SCI0_send_mesage_5:
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable18_1  ;; 0x4006a004
   \   00000054   0x7800             LDRB     R0,[R0, #+0]
   \   00000056   0x0600             LSLS     R0,R0,#+24
   \   00000058   0xD5FA             BPL.N    ??SCI0_send_mesage_5
   1853                    UART0_D =  VideoImage2[i][j];///见最后一个函数讲解
   \   0000005A   0x209F             MOVS     R0,#+159
   \   0000005C   0x....             LDR.N    R1,??DataTable13
   \   0000005E   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000062   0x5C28             LDRB     R0,[R5, R0]
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable18_2  ;; 0x4006a007
   \   00000068   0x7008             STRB     R0,[R1, #+0]
   1854                    Delay_MS(80000);
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable18_4  ;; 0x13880
   \   0000006E   0x.... 0x....      BL       Delay_MS
   1855                  }
   \   00000072   0x1C6D             ADDS     R5,R5,#+1
   \                     ??SCI0_send_mesage_6:
   \   00000074   0x2D9F             CMP      R5,#+159
   \   00000076   0xDBEB             BLT.N    ??SCI0_send_mesage_5
   \   00000078   0x1E64             SUBS     R4,R4,#+1
   \                     ??SCI0_send_mesage_4:
   \   0000007A   0x2C00             CMP      R4,#+0
   \   0000007C   0xD401             BMI.N    ??SCI0_send_mesage_7
   \   0000007E   0x2500             MOVS     R5,#+0
   \   00000080   0xE7F8             B.N      ??SCI0_send_mesage_6
   1856                }  
   1857                for (i =ROW-1 ;i >=0 ; i--)
   \                     ??SCI0_send_mesage_7:
   \   00000082   0x2440             MOVS     R4,#+64
   \   00000084   0xE00F             B.N      ??SCI0_send_mesage_8
   1858                {
   1859                  while(!(UART0_S1&UART_S1_TDRE_MASK));//等待数据到达
   \                     ??SCI0_send_mesage_9:
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable18_1  ;; 0x4006a004
   \   0000008A   0x7800             LDRB     R0,[R0, #+0]
   \   0000008C   0x0600             LSLS     R0,R0,#+24
   \   0000008E   0xD5FA             BPL.N    ??SCI0_send_mesage_9
   1860                     UART0_D = left_black[i];
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable18_5
   \   00000094   0x5C20             LDRB     R0,[R4, R0]
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable18_2  ;; 0x4006a007
   \   0000009A   0x7008             STRB     R0,[R1, #+0]
   1861                  Delay_MS(80000);
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable18_4  ;; 0x13880
   \   000000A0   0x.... 0x....      BL       Delay_MS
   1862                }
   \   000000A4   0x1E64             SUBS     R4,R4,#+1
   \                     ??SCI0_send_mesage_8:
   \   000000A6   0x2C00             CMP      R4,#+0
   \   000000A8   0xD5ED             BPL.N    ??SCI0_send_mesage_9
   1863                for (i =ROW-1 ;i >=0 ; i--)
   \   000000AA   0x2440             MOVS     R4,#+64
   \   000000AC   0xE00F             B.N      ??SCI0_send_mesage_10
   1864                {
   1865                   while(!(UART0_S1&UART_S1_TDRE_MASK));//等待数据到达
   \                     ??SCI0_send_mesage_11:
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable18_1  ;; 0x4006a004
   \   000000B2   0x7800             LDRB     R0,[R0, #+0]
   \   000000B4   0x0600             LSLS     R0,R0,#+24
   \   000000B6   0xD5FA             BPL.N    ??SCI0_send_mesage_11
   1866                   UART0_D = right_black[i];
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable18_6
   \   000000BC   0x5C20             LDRB     R0,[R4, R0]
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable18_2  ;; 0x4006a007
   \   000000C2   0x7008             STRB     R0,[R1, #+0]
   1867                   Delay_MS(80000);
   \   000000C4   0x.... 0x....      LDR.W    R0,??DataTable18_4  ;; 0x13880
   \   000000C8   0x.... 0x....      BL       Delay_MS
   1868                }
   \   000000CC   0x1E64             SUBS     R4,R4,#+1
   \                     ??SCI0_send_mesage_10:
   \   000000CE   0x2C00             CMP      R4,#+0
   \   000000D0   0xD5ED             BPL.N    ??SCI0_send_mesage_11
   1869                for (i =ROW-1 ;i >=0 ; i--)
   \   000000D2   0x2440             MOVS     R4,#+64
   \   000000D4   0xE00F             B.N      ??SCI0_send_mesage_12
   1870                {
   1871                  while(!(UART0_S1&UART_S1_TDRE_MASK));//等待数据到达
   \                     ??SCI0_send_mesage_13:
   \   000000D6   0x.... 0x....      LDR.W    R0,??DataTable18_1  ;; 0x4006a004
   \   000000DA   0x7800             LDRB     R0,[R0, #+0]
   \   000000DC   0x0600             LSLS     R0,R0,#+24
   \   000000DE   0xD5FA             BPL.N    ??SCI0_send_mesage_13
   1872                  UART0_D = center_white[i];
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   000000E4   0x5C20             LDRB     R0,[R4, R0]
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable18_2  ;; 0x4006a007
   \   000000EA   0x7008             STRB     R0,[R1, #+0]
   1873                  Delay_MS(80000);
   \   000000EC   0x.... 0x....      LDR.W    R0,??DataTable18_4  ;; 0x13880
   \   000000F0   0x.... 0x....      BL       Delay_MS
   1874                }
   \   000000F4   0x1E64             SUBS     R4,R4,#+1
   \                     ??SCI0_send_mesage_12:
   \   000000F6   0x2C00             CMP      R4,#+0
   \   000000F8   0xD5ED             BPL.N    ??SCI0_send_mesage_13
   1875                send_mes = 0;  //发送一次即可，所以要清零
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   000000FE   0x2100             MOVS     R1,#+0
   \   00000100   0x7001             STRB     R1,[R0, #+0]
   \   00000102   0xE06E             B.N      ??SCI0_send_mesage_14
   1876               }
   1877             // EnableInterrupts;  //重新开启所有中断
   1878              
   1879              else if(send_mes == 2)
   \                     ??SCI0_send_mesage_0:
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000108   0x7800             LDRB     R0,[R0, #+0]
   \   0000010A   0x2802             CMP      R0,#+2
   \   0000010C   0xD114             BNE.N    ??SCI0_send_mesage_15
   1880              {
   1881                for(i =0;i<=ROW - 1;i++)
   \   0000010E   0x2400             MOVS     R4,#+0
   \                     ??SCI0_send_mesage_16:
   \   00000110   0x2C41             CMP      R4,#+65
   \   00000112   0xDA66             BGE.N    ??SCI0_send_mesage_14
   1882                {
   1883                    while(!(UART0_S1&UART_S1_TDRE_MASK));//等待数据到达
   \                     ??SCI0_send_mesage_17:
   \   00000114   0x.... 0x....      LDR.W    R0,??DataTable18_1  ;; 0x4006a004
   \   00000118   0x7800             LDRB     R0,[R0, #+0]
   \   0000011A   0x0600             LSLS     R0,R0,#+24
   \   0000011C   0xD5FA             BPL.N    ??SCI0_send_mesage_17
   1884                    UART0_D = center_white[control_top_whiteline];
   \   0000011E   0x....             LDR.N    R0,??DataTable14_4
   \   00000120   0x8800             LDRH     R0,[R0, #+0]
   \   00000122   0x....             LDR.N    R1,??DataTable15_1
   \   00000124   0x5C40             LDRB     R0,[R0, R1]
   \   00000126   0x.... 0x....      LDR.W    R1,??DataTable18_2  ;; 0x4006a007
   \   0000012A   0x7008             STRB     R0,[R1, #+0]
   1885                    Delay_MS(80000);
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable18_4  ;; 0x13880
   \   00000130   0x.... 0x....      BL       Delay_MS
   1886                }
   \   00000134   0x1C64             ADDS     R4,R4,#+1
   \   00000136   0xE7EB             B.N      ??SCI0_send_mesage_16
   1887                 
   1888              }
   1889           
   1890             else if (send_mes == 3)  //便于调试
   \                     ??SCI0_send_mesage_15:
   \   00000138   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   0000013C   0x7800             LDRB     R0,[R0, #+0]
   \   0000013E   0x2803             CMP      R0,#+3
   \   00000140   0xD12C             BNE.N    ??SCI0_send_mesage_18
   1891              {  
   1892                  if(!sci_temp)
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable18_7
   \   00000146   0x7800             LDRB     R0,[R0, #+0]
   \   00000148   0x2800             CMP      R0,#+0
   \   0000014A   0xD113             BNE.N    ??SCI0_send_mesage_19
   1893                  {
   1894                 while(!(UART0_S1&UART_S1_TDRE_MASK));
   \                     ??SCI0_send_mesage_20:
   \   0000014C   0x.... 0x....      LDR.W    R0,??DataTable18_1  ;; 0x4006a004
   \   00000150   0x7800             LDRB     R0,[R0, #+0]
   \   00000152   0x0600             LSLS     R0,R0,#+24
   \   00000154   0xD5FA             BPL.N    ??SCI0_send_mesage_20
   1895                 UART0_D = (uint8)(speed_feedback);//speed_feedback
   \   00000156   0x.... 0x....      LDR.W    R0,??DataTable18_2  ;; 0x4006a007
   \   0000015A   0x.... 0x....      LDR.W    R1,??DataTable18_8
   \   0000015E   0x8809             LDRH     R1,[R1, #+0]
   \   00000160   0x7001             STRB     R1,[R0, #+0]
   1896                 sci_temp = !sci_temp;
   \   00000162   0x.... 0x....      LDR.W    R0,??DataTable18_7
   \   00000166   0x7800             LDRB     R0,[R0, #+0]
   \   00000168   0xF090 0x0001      EORS     R0,R0,#0x1
   \   0000016C   0x.... 0x....      LDR.W    R1,??DataTable18_7
   \   00000170   0x7008             STRB     R0,[R1, #+0]
   \   00000172   0xE036             B.N      ??SCI0_send_mesage_14
   1897                  }
   1898                  else
   1899                  {
   1900                   while(!(UART0_S1&UART_S1_TDRE_MASK));//等待数据到达
   \                     ??SCI0_send_mesage_19:
   \   00000174   0x.... 0x....      LDR.W    R0,??DataTable18_1  ;; 0x4006a004
   \   00000178   0x7800             LDRB     R0,[R0, #+0]
   \   0000017A   0x0600             LSLS     R0,R0,#+24
   \   0000017C   0xD5FA             BPL.N    ??SCI0_send_mesage_19
   1901                   UART0_D= (uint8)(speed_except);
   \   0000017E   0x.... 0x....      LDR.W    R0,??DataTable18_2  ;; 0x4006a007
   \   00000182   0x.... 0x....      LDR.W    R1,??DataTable17_2
   \   00000186   0x8809             LDRH     R1,[R1, #+0]
   \   00000188   0x7001             STRB     R1,[R0, #+0]
   1902                    sci_temp = !sci_temp;
   \   0000018A   0x.... 0x....      LDR.W    R0,??DataTable18_7
   \   0000018E   0x7800             LDRB     R0,[R0, #+0]
   \   00000190   0xF090 0x0001      EORS     R0,R0,#0x1
   \   00000194   0x.... 0x....      LDR.W    R1,??DataTable18_7
   \   00000198   0x7008             STRB     R0,[R1, #+0]
   \   0000019A   0xE022             B.N      ??SCI0_send_mesage_14
   1903                  }
   1904                  //       send_mes = 0;不清0是为了连续发送
   1905                }
   1906              else if (send_mes =='p')  //停车
   \                     ??SCI0_send_mesage_18:
   \   0000019C   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   000001A0   0x7800             LDRB     R0,[R0, #+0]
   \   000001A2   0x2870             CMP      R0,#+112
   \   000001A4   0xD10C             BNE.N    ??SCI0_send_mesage_21
   1907              {
   1908                 while(!(UART0_S1&UART_S1_TDRE_MASK));   //等待数据到达
   \                     ??SCI0_send_mesage_22:
   \   000001A6   0x.... 0x....      LDR.W    R0,??DataTable18_1  ;; 0x4006a004
   \   000001AA   0x7800             LDRB     R0,[R0, #+0]
   \   000001AC   0x0600             LSLS     R0,R0,#+24
   \   000001AE   0xD5FA             BPL.N    ??SCI0_send_mesage_22
   1909                 stopflag = 1;
   \   000001B0   0x....             LDR.N    R0,??DataTable15
   \   000001B2   0x2101             MOVS     R1,#+1
   \   000001B4   0x7001             STRB     R1,[R0, #+0]
   1910                 send_mes = 0;
   \   000001B6   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   000001BA   0x2100             MOVS     R1,#+0
   \   000001BC   0x7001             STRB     R1,[R0, #+0]
   \   000001BE   0xE010             B.N      ??SCI0_send_mesage_14
   1911              }
   1912              else if (send_mes == 's')  //启动
   \                     ??SCI0_send_mesage_21:
   \   000001C0   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   000001C4   0x7800             LDRB     R0,[R0, #+0]
   \   000001C6   0x2873             CMP      R0,#+115
   \   000001C8   0xD10B             BNE.N    ??SCI0_send_mesage_14
   1913              {
   1914                 while(!(UART0_S1&UART_S1_TDRE_MASK));   //等待数据到达
   \                     ??SCI0_send_mesage_23:
   \   000001CA   0x.... 0x....      LDR.W    R0,??DataTable18_1  ;; 0x4006a004
   \   000001CE   0x7800             LDRB     R0,[R0, #+0]
   \   000001D0   0x0600             LSLS     R0,R0,#+24
   \   000001D2   0xD5FA             BPL.N    ??SCI0_send_mesage_23
   1915                 stopflag = 0;
   \   000001D4   0x....             LDR.N    R0,??DataTable15
   \   000001D6   0x2100             MOVS     R1,#+0
   \   000001D8   0x7001             STRB     R1,[R0, #+0]
   1916                 send_mes = 0;  
   \   000001DA   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   000001DE   0x2100             MOVS     R1,#+0
   \   000001E0   0x7001             STRB     R1,[R0, #+0]
   1917              }
   1918              EnableInterrupts;
   \                     ??SCI0_send_mesage_14:
   \   000001E2   0xB662             CPSIE i         
   1919          }
   \   000001E4   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .bss, align 1
   \                     ??sci_temp:
   \   00000000                      DS8 1
   1920          
   1921          //拨码用的八位对应到k60上是 PTD6---- PTD13
   1922          // 0000 0000 0000 0000 0000 0000 0000 0000 

   \                                 In section .text, align 2, keep-with-next
   1923          void scan_boma(void)
   1924          {
   1925            uint32 temp1=0;
   \                     scan_boma:
   \   00000000   0x2000             MOVS     R0,#+0
   1926            uint8 temp=0;
   \   00000002   0x2100             MOVS     R1,#+0
   1927            GPIOD_PDOR = 0xffffffff; 
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable19_2  ;; 0x400ff0c0
   \   00000008   0xF05F 0x33FF      MOVS     R3,#-1
   \   0000000C   0x6013             STR      R3,[R2, #+0]
   1928            temp1 = GPIOD_PDIR;   //读PTD6~PTD13 
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable19_3  ;; 0x400ff0d0
   \   00000012   0x6812             LDR      R2,[R2, #+0]
   \   00000014   0x0010             MOVS     R0,R2
   1929            
   1930            temp = !(uint8)((temp1 >> 13) & 0x00000001);
   \   00000016   0x0B42             LSRS     R2,R0,#+13
   \   00000018   0xF012 0x0201      ANDS     R2,R2,#0x1
   \   0000001C   0xF092 0x0201      EORS     R2,R2,#0x1
   \   00000020   0x0011             MOVS     R1,R2
   1931            if(lcd_debug == 1)
   \   00000022   0x.... 0x....      LDR.W    R2,??DataTable19_4
   \   00000026   0x7812             LDRB     R2,[R2, #+0]
   \   00000028   0x2A00             CMP      R2,#+0
   \   0000002A   0xD00B             BEQ.N    ??scan_boma_0
   1932            {
   1933              if(temp == 1)   //对应的是拨码8
   \   0000002C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002E   0x2901             CMP      R1,#+1
   \   00000030   0xD104             BNE.N    ??scan_boma_1
   1934               lcd_debug = 1;  //点亮的状态为按键调节时间，若调节完毕，则拨码检测结束，程序向下运行
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable19_4
   \   00000036   0x2201             MOVS     R2,#+1
   \   00000038   0x700A             STRB     R2,[R1, #+0]
   \   0000003A   0xE003             B.N      ??scan_boma_0
   1935            else
   1936               lcd_debug = 0;
   \                     ??scan_boma_1:
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable19_4
   \   00000040   0x2200             MOVS     R2,#+0
   \   00000042   0x700A             STRB     R2,[R1, #+0]
   1937            }
   1938            temp = !(uint8)((temp1 >> 12) & 0x00000001);//对应的是拨码7
   \                     ??scan_boma_0:
   \   00000044   0x0B01             LSRS     R1,R0,#+12
   \   00000046   0xF011 0x0101      ANDS     R1,R1,#0x1
   \   0000004A   0xF091 0x0101      EORS     R1,R1,#0x1
   1939            if(temp == 1)
   \   0000004E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000050   0x2901             CMP      R1,#+1
   \   00000052   0xD104             BNE.N    ??scan_boma_2
   1940                 redraw_control=1;  //拨亮则刷屏
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable19_5
   \   00000058   0x2201             MOVS     R2,#+1
   \   0000005A   0x700A             STRB     R2,[R1, #+0]
   \   0000005C   0xE003             B.N      ??scan_boma_3
   1941            else
   1942                 redraw_control=0; 
   \                     ??scan_boma_2:
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable19_5
   \   00000062   0x2200             MOVS     R2,#+0
   \   00000064   0x700A             STRB     R2,[R1, #+0]
   1943            
   1944             //  start_stop_cs 起跑线检测的片选信号
   1945              temp = !(uint8)((temp1 >> 11) & 0x00000001);//0x00000800
   \                     ??scan_boma_3:
   \   00000066   0x0AC0             LSRS     R0,R0,#+11
   \   00000068   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000006C   0xF090 0x0101      EORS     R1,R0,#0x1
   1946             if(temp == 1)
   \   00000070   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000072   0x2901             CMP      R1,#+1
   \   00000074   0xD104             BNE.N    ??scan_boma_4
   1947               start_stop_cs = 1;
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable21
   \   0000007A   0x2101             MOVS     R1,#+1
   \   0000007C   0x7001             STRB     R1,[R0, #+0]
   \   0000007E   0xE003             B.N      ??scan_boma_5
   1948             else
   1949               start_stop_cs = 0;
   \                     ??scan_boma_4:
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000084   0x2100             MOVS     R1,#+0
   \   00000086   0x7001             STRB     R1,[R0, #+0]
   1950             
   1951            //  速度选择信号
   1952             /*temp = !(uint8)((temp1 >> 10) & 0x00000001);//0x00000800
   1953                if(temp == 1)
   1954               stop_delay_check = 1;  //匀速，用于测试
   1955                else
   1956               stop_delay_check = 0;*/
   1957             
   1958          }
   \                     ??scan_boma_5:
   \   00000088   0x4770             BX       LR               ;; return
   1959          
   1960          
   1961          //-----------------------------延迟-------------------------------//

   \                                 In section .text, align 2, keep-with-next
   1962          void Delay_MS(uint32 ms)
   1963          {
   1964             while(ms--);
   \                     Delay_MS:
   \                     ??Delay_MS_0:
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0x1E48             SUBS     R0,R1,#+1
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD1FB             BNE.N    ??Delay_MS_0
   1965          }
   \   00000008   0x4770             BX       LR               ;; return
   1966          
   1967          
   1968          /***********************************预显示**********************************/

   \                                 In section .text, align 2, keep-with-next
   1969          void pre_show(void)
   1970          {
   \                     pre_show:
   \   00000000   0xB580             PUSH     {R7,LR}
   1971            LCD_CLS();
   \   00000002   0x.... 0x....      BL       LCD_CLS
   1972             switch(lcd_page_num)
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable19_6
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD003             BEQ.N    ??pre_show_0
   \   00000010   0x2802             CMP      R0,#+2
   \   00000012   0xD078             BEQ.N    ??pre_show_1
   \   00000014   0xD301             BCC.N    ??pre_show_2
   \   00000016   0xE0EA             B.N      ??pre_show_3
   1973             {        
   1974                case 0:     //第一页只是用来显示参数      
   1975                       break;        
   \                     ??pre_show_0:
   \   00000018   0xE0E9             B.N      ??pre_show_3
   1976                       
   1977                case 1:
   1978                       LCD_P6x8Cha(0,lcd_line_num,'*');
   \                     ??pre_show_2:
   \   0000001A   0x222A             MOVS     R2,#+42
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable20
   \   00000020   0x7801             LDRB     R1,[R0, #+0]
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      BL       LCD_P6x8Cha
   1979                       
   1980                       LCD_P6x8Str(10,0,"lcd_debug:");      //调试选择
   \   00000028   0x.... 0x....      LDR.W    R2,??DataTable19_7
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x200A             MOVS     R0,#+10
   \   00000030   0x.... 0x....      BL       LCD_P6x8Str
   1981                       LCD_P6x8Num(100,0,lcd_debug);  
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable19_4
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0x.... 0x....      BL       __aeabi_ui2f
   \   0000003E   0x0002             MOVS     R2,R0
   \   00000040   0x2100             MOVS     R1,#+0
   \   00000042   0x2064             MOVS     R0,#+100
   \   00000044   0x.... 0x....      BL       LCD_P6x8Num
   1982                       
   1983                       LCD_P6x8Str(10,1,"speed_select:");      //速度档位选择
   \   00000048   0x.... 0x....      LDR.W    R2,??DataTable20_1
   \   0000004C   0x2101             MOVS     R1,#+1
   \   0000004E   0x200A             MOVS     R0,#+10
   \   00000050   0x.... 0x....      BL       LCD_P6x8Str
   1984                       LCD_P6x8Num(100,1,speed_select);
   \   00000054   0x....             LDR.N    R0,??DataTable15_19
   \   00000056   0x7800             LDRB     R0,[R0, #+0]
   \   00000058   0x.... 0x....      BL       __aeabi_ui2f
   \   0000005C   0x0002             MOVS     R2,R0
   \   0000005E   0x2101             MOVS     R1,#+1
   \   00000060   0x2064             MOVS     R0,#+100
   \   00000062   0x.... 0x....      BL       LCD_P6x8Num
   1985                       
   1986                       LCD_P6x8Str(10,2,"s_pit_count:");      //起跑线的延时检测计数
   \   00000066   0x.... 0x....      LDR.W    R2,??DataTable20_2
   \   0000006A   0x2102             MOVS     R1,#+2
   \   0000006C   0x200A             MOVS     R0,#+10
   \   0000006E   0x.... 0x....      BL       LCD_P6x8Str
   1987                       LCD_P6x8Num(100,2,stop_pit_count);
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable20_3
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0x.... 0x....      BL       __aeabi_ui2f
   \   0000007C   0x0002             MOVS     R2,R0
   \   0000007E   0x2102             MOVS     R1,#+2
   \   00000080   0x2064             MOVS     R0,#+100
   \   00000082   0x.... 0x....      BL       LCD_P6x8Num
   1988                       
   1989                       LCD_P6x8Str(10,3,"rampdetime:");      //坡道延时时间
   \   00000086   0x.... 0x....      LDR.W    R2,??DataTable20_4
   \   0000008A   0x2103             MOVS     R1,#+3
   \   0000008C   0x200A             MOVS     R0,#+10
   \   0000008E   0x.... 0x....      BL       LCD_P6x8Str
   1990                       LCD_P6x8Num(100,3,ramp_delay_time);
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable20_5
   \   00000096   0x8800             LDRH     R0,[R0, #+0]
   \   00000098   0x.... 0x....      BL       __aeabi_ui2f
   \   0000009C   0x0002             MOVS     R2,R0
   \   0000009E   0x2103             MOVS     R1,#+3
   \   000000A0   0x2064             MOVS     R0,#+100
   \   000000A2   0x.... 0x....      BL       LCD_P6x8Num
   1991                       
   1992                       LCD_P6x8Str(10,4,"mid_angle:");      //第五行，舵机中值
   \   000000A6   0x.... 0x....      LDR.W    R2,??DataTable20_6
   \   000000AA   0x2104             MOVS     R1,#+4
   \   000000AC   0x200A             MOVS     R0,#+10
   \   000000AE   0x.... 0x....      BL       LCD_P6x8Str
   1993                       LCD_P6x8Num(100,4,mid_angle);  
   \   000000B2   0x....             LDR.N    R0,??DataTable15_12
   \   000000B4   0x8800             LDRH     R0,[R0, #+0]
   \   000000B6   0x.... 0x....      BL       __aeabi_ui2f
   \   000000BA   0x0002             MOVS     R2,R0
   \   000000BC   0x2104             MOVS     R1,#+4
   \   000000BE   0x2064             MOVS     R0,#+100
   \   000000C0   0x.... 0x....      BL       LCD_P6x8Num
   1994                               
   1995                       LCD_P6x8Str(10,5,"WHITE_BLACK_OT:");      //第六行，二值化的阈值
   \   000000C4   0x.... 0x....      LDR.W    R2,??DataTable20_7
   \   000000C8   0x2105             MOVS     R1,#+5
   \   000000CA   0x200A             MOVS     R0,#+10
   \   000000CC   0x.... 0x....      BL       LCD_P6x8Str
   1996                       LCD_P6x8Num(100,5,WHITE_BLACK_OT);  
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable18_3
   \   000000D4   0x7800             LDRB     R0,[R0, #+0]
   \   000000D6   0x.... 0x....      BL       __aeabi_ui2f
   \   000000DA   0x0002             MOVS     R2,R0
   \   000000DC   0x2105             MOVS     R1,#+5
   \   000000DE   0x2064             MOVS     R0,#+100
   \   000000E0   0x.... 0x....      BL       LCD_P6x8Num
   1997                       
   1998                       LCD_P6x8Str(10,6,"test_run:");      //第六行，二值化的阈值
   \   000000E4   0x.... 0x....      LDR.W    R2,??DataTable20_8
   \   000000E8   0x2106             MOVS     R1,#+6
   \   000000EA   0x200A             MOVS     R0,#+10
   \   000000EC   0x.... 0x....      BL       LCD_P6x8Str
   1999                       LCD_P6x8Num(100,6,test_run); 
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable20_9
   \   000000F4   0x7800             LDRB     R0,[R0, #+0]
   \   000000F6   0x.... 0x....      BL       __aeabi_ui2f
   \   000000FA   0x0002             MOVS     R2,R0
   \   000000FC   0x2106             MOVS     R1,#+6
   \   000000FE   0x2064             MOVS     R0,#+100
   \   00000100   0x.... 0x....      BL       LCD_P6x8Num
   2000                       
   2001                      break;
   \   00000104   0xE073             B.N      ??pre_show_3
   2002                      
   2003                case 2:
   2004                       LCD_P6x8Cha(0,lcd_line_num,'*');
   \                     ??pre_show_1:
   \   00000106   0x222A             MOVS     R2,#+42
   \   00000108   0x.... 0x....      LDR.W    R0,??DataTable20
   \   0000010C   0x7801             LDRB     R1,[R0, #+0]
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x.... 0x....      BL       LCD_P6x8Cha
   2005                  
   2006                       LCD_P6x8Str(10,0,"l_er_ser_p:");    //第一行：舵机的p
   \   00000114   0x.... 0x....      LDR.W    R2,??DataTable20_10
   \   00000118   0x2100             MOVS     R1,#+0
   \   0000011A   0x200A             MOVS     R0,#+10
   \   0000011C   0x.... 0x....      BL       LCD_P6x8Str
   2007                       LCD_P6x8Num(100,0,lcd_error_servo_p);
   \   00000120   0x....             LDR.N    R0,??DataTable15_4
   \   00000122   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000126   0x.... 0x....      BL       __aeabi_i2f
   \   0000012A   0x0002             MOVS     R2,R0
   \   0000012C   0x2100             MOVS     R1,#+0
   \   0000012E   0x2064             MOVS     R0,#+100
   \   00000130   0x.... 0x....      BL       LCD_P6x8Num
   2008                       
   2009                       LCD_P6x8Str(10,1,"l_er_ser_d:");    //第二行 ：舵机的d
   \   00000134   0x.... 0x....      LDR.W    R2,??DataTable20_11
   \   00000138   0x2101             MOVS     R1,#+1
   \   0000013A   0x200A             MOVS     R0,#+10
   \   0000013C   0x.... 0x....      BL       LCD_P6x8Str
   2010                       LCD_P6x8Num(100,1,lcd_error_servo_d); 
   \   00000140   0x....             LDR.N    R0,??DataTable15_7
   \   00000142   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000146   0x.... 0x....      BL       __aeabi_i2f
   \   0000014A   0x0002             MOVS     R2,R0
   \   0000014C   0x2101             MOVS     R1,#+1
   \   0000014E   0x2064             MOVS     R0,#+100
   \   00000150   0x.... 0x....      BL       LCD_P6x8Num
   2011                       
   2012                       LCD_P6x8Str(10,2,"lcd_ref_p:");    //第三行 ：舵机的p
   \   00000154   0x.... 0x....      LDR.W    R2,??DataTable20_12
   \   00000158   0x2102             MOVS     R1,#+2
   \   0000015A   0x200A             MOVS     R0,#+10
   \   0000015C   0x.... 0x....      BL       LCD_P6x8Str
   2013                       LCD_P6x8Num(100,2,lcd_ref_p);
   \   00000160   0x....             LDR.N    R0,??DataTable15_8
   \   00000162   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000166   0x.... 0x....      BL       __aeabi_i2f
   \   0000016A   0x0002             MOVS     R2,R0
   \   0000016C   0x2102             MOVS     R1,#+2
   \   0000016E   0x2064             MOVS     R0,#+100
   \   00000170   0x.... 0x....      BL       LCD_P6x8Num
   2014                       
   2015                       LCD_P6x8Str(10,3,"lcd_ref_d:");    //第四行 ：舵机的d
   \   00000174   0x.... 0x....      LDR.W    R2,??DataTable20_13
   \   00000178   0x2103             MOVS     R1,#+3
   \   0000017A   0x200A             MOVS     R0,#+10
   \   0000017C   0x.... 0x....      BL       LCD_P6x8Str
   2016                       LCD_P6x8Num(100,3,lcd_ref_d);         
   \   00000180   0x....             LDR.N    R0,??DataTable15_11
   \   00000182   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000186   0x.... 0x....      BL       __aeabi_i2f
   \   0000018A   0x0002             MOVS     R2,R0
   \   0000018C   0x2103             MOVS     R1,#+3
   \   0000018E   0x2064             MOVS     R0,#+100
   \   00000190   0x.... 0x....      BL       LCD_P6x8Num
   2017                       
   2018                       LCD_P6x8Str(10,4,"l_str_speed:");     //直线速度
   \   00000194   0x.... 0x....      LDR.W    R2,??DataTable20_14
   \   00000198   0x2104             MOVS     R1,#+4
   \   0000019A   0x200A             MOVS     R0,#+10
   \   0000019C   0x.... 0x....      BL       LCD_P6x8Str
   2019                       LCD_P6x8Num(100,4,lcd_straight_speed); 
   \   000001A0   0x....             LDR.N    R0,??DataTable16_3
   \   000001A2   0x8800             LDRH     R0,[R0, #+0]
   \   000001A4   0x.... 0x....      BL       __aeabi_ui2f
   \   000001A8   0x0002             MOVS     R2,R0
   \   000001AA   0x2104             MOVS     R1,#+4
   \   000001AC   0x2064             MOVS     R0,#+100
   \   000001AE   0x.... 0x....      BL       LCD_P6x8Num
   2020                       
   2021                       LCD_P6x8Str(10,5,"l_bow_speed:");     //弯道速度
   \   000001B2   0x.... 0x....      LDR.W    R2,??DataTable20_15
   \   000001B6   0x2105             MOVS     R1,#+5
   \   000001B8   0x200A             MOVS     R0,#+10
   \   000001BA   0x.... 0x....      BL       LCD_P6x8Str
   2022                       LCD_P6x8Num(100,5,lcd_bow_speed); 
   \   000001BE   0x....             LDR.N    R0,??DataTable16_4
   \   000001C0   0x8800             LDRH     R0,[R0, #+0]
   \   000001C2   0x.... 0x....      BL       __aeabi_ui2f
   \   000001C6   0x0002             MOVS     R2,R0
   \   000001C8   0x2105             MOVS     R1,#+5
   \   000001CA   0x2064             MOVS     R0,#+100
   \   000001CC   0x.... 0x....      BL       LCD_P6x8Num
   2023                       
   2024                       
   2025                       LCD_P6x8Str(10,6,"lcd_strspe_ed:");     //长直道的附加速度
   \   000001D0   0x.... 0x....      LDR.W    R2,??DataTable20_16
   \   000001D4   0x2106             MOVS     R1,#+6
   \   000001D6   0x200A             MOVS     R0,#+10
   \   000001D8   0x.... 0x....      BL       LCD_P6x8Str
   2026                       LCD_P6x8Num(100,6,lcd_straight_speed_ed);
   \   000001DC   0x....             LDR.N    R0,??DataTable17
   \   000001DE   0x8800             LDRH     R0,[R0, #+0]
   \   000001E0   0x.... 0x....      BL       __aeabi_ui2f
   \   000001E4   0x0002             MOVS     R2,R0
   \   000001E6   0x2106             MOVS     R1,#+6
   \   000001E8   0x2064             MOVS     R0,#+100
   \   000001EA   0x.... 0x....      BL       LCD_P6x8Num
   2027                       
   2028          
   2029                       break;
   2030               }
   2031          
   2032          }
   \                     ??pre_show_3:
   \   000001EE   0xBD01             POP      {R0,PC}          ;; return
   2033          
   2034          
   2035          /*
   2036          小的液晶屏的参数：
   2037          128*64  写成6*8  每行共21个字符  一共可以写8列------
   2038                                                        |
   2039                                                        |
   2040                                                        |
   2041                                                        |
   2042                                                        |
   2043                                                        |
   2044                                                        |
   2045          对于定位的x和y  x表示的是列数。这里以每一个点来计算，而不是每个单元格子
   2046          而y则是以每个单元格子计算，代表的是8
   2047          
   2048          */
   2049          /**************************************刷屏，显示时变变量*********************************/
   2050          /*刷屏的时候特别是要注意时间的问题，可能刷屏的时间过长会导致控制的不及时，可能会出错
   2051          这里将采用一场只刷屏一次的策略*/

   \                                 In section .text, align 2, keep-with-next
   2052          void redraw()
   2053          {
   \                     redraw:
   \   00000000   0xB510             PUSH     {R4,LR}
   2054            byte lcd_hang = 1 ; 
   \   00000002   0x2401             MOVS     R4,#+1
   2055            if(lcd_page_num==0&&redraw_control==1)     //第一页//redraw_control需要另一个拨码进行控制
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable19_6
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xF040 0x80D4      BNE.W    ??redraw_0
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable19_5
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xF000 0x80CE      BEQ.W    ??redraw_0
   2056               {
   2057                   if(lcd_hang == 1)
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x2C01             CMP      R4,#+1
   \   00000020   0xD122             BNE.N    ??redraw_1
   2058                   {
   2059                     LCD_CLS_ROW(0,0);      //0行  8列
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       LCD_CLS_ROW
   2060                     LCD_P6x8Num(0,0,top_whiteline);    //第一行  图像相关
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x.... 0x....      BL       __aeabi_ui2f
   \   00000034   0x0002             MOVS     R2,R0
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x.... 0x....      BL       LCD_P6x8Num
   2061                     LCD_P6x8Num(40,0,control_top_whiteline);  
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   00000042   0x8800             LDRH     R0,[R0, #+0]
   \   00000044   0x.... 0x....      BL       __aeabi_ui2f
   \   00000048   0x0002             MOVS     R2,R0
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0x2028             MOVS     R0,#+40
   \   0000004E   0x.... 0x....      BL       LCD_P6x8Num
   2062                     LCD_P6x8Num(80,0,deal_start_line); 
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable21_3
   \   00000056   0x7800             LDRB     R0,[R0, #+0]
   \   00000058   0x.... 0x....      BL       __aeabi_ui2f
   \   0000005C   0x0002             MOVS     R2,R0
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0x2050             MOVS     R0,#+80
   \   00000062   0x.... 0x....      BL       LCD_P6x8Num
   2063                     lcd_hang ++;
   \   00000066   0x1C64             ADDS     R4,R4,#+1
   2064                   }
   2065                   if(lcd_hang == 2)
   \                     ??redraw_1:
   \   00000068   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006A   0x2C02             CMP      R4,#+2
   \   0000006C   0xD12D             BNE.N    ??redraw_2
   2066                   {
   2067                    LCD_CLS_ROW(0,1);       //第二行，舵机偏差相关
   \   0000006E   0x2101             MOVS     R1,#+1
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x.... 0x....      BL       LCD_CLS_ROW
   2068                    LCD_P6x8Num(0,1,white_refer);
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable21_4
   \   0000007A   0x7800             LDRB     R0,[R0, #+0]
   \   0000007C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000080   0x0002             MOVS     R2,R0
   \   00000082   0x2101             MOVS     R1,#+1
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x.... 0x....      BL       LCD_P6x8Num
   2069                    LCD_P6x8Num(40,1,center_average);
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable21_5
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0x.... 0x....      BL       __aeabi_ui2f
   \   00000094   0x0002             MOVS     R2,R0
   \   00000096   0x2101             MOVS     R1,#+1
   \   00000098   0x2028             MOVS     R0,#+40
   \   0000009A   0x.... 0x....      BL       LCD_P6x8Num
   2070                    LCD_P6x8Num(80,1,p_error);
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable22
   \   000000A2   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000000A6   0x.... 0x....      BL       __aeabi_i2f
   \   000000AA   0x0002             MOVS     R2,R0
   \   000000AC   0x2101             MOVS     R1,#+1
   \   000000AE   0x2050             MOVS     R0,#+80
   \   000000B0   0x.... 0x....      BL       LCD_P6x8Num
   2071                    LCD_P6x8Num(100,1, center_error_average);
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable18
   \   000000B8   0x8800             LDRH     R0,[R0, #+0]
   \   000000BA   0x.... 0x....      BL       __aeabi_ui2f
   \   000000BE   0x0002             MOVS     R2,R0
   \   000000C0   0x2101             MOVS     R1,#+1
   \   000000C2   0x2064             MOVS     R0,#+100
   \   000000C4   0x.... 0x....      BL       LCD_P6x8Num
   2072                    lcd_hang ++;
   \   000000C8   0x1C64             ADDS     R4,R4,#+1
   2073                   }
   2074                  if(lcd_hang == 3)
   \                     ??redraw_2:
   \   000000CA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000CC   0x2C03             CMP      R4,#+3
   \   000000CE   0xD122             BNE.N    ??redraw_3
   2075                   {
   2076                    LCD_CLS_ROW(0,2);       //第三行， 电机相关
   \   000000D0   0x2102             MOVS     R1,#+2
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x.... 0x....      BL       LCD_CLS_ROW
   2077                    LCD_P6x8Num(0,2,speed); 
   \   000000D8   0x.... 0x....      LDR.W    R0,??DataTable22_1
   \   000000DC   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000000E0   0x.... 0x....      BL       __aeabi_i2f
   \   000000E4   0x0002             MOVS     R2,R0
   \   000000E6   0x2102             MOVS     R1,#+2
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0x.... 0x....      BL       LCD_P6x8Num
   2078                    LCD_P6x8Num(60,2,speed_except); 
   \   000000EE   0x....             LDR.N    R0,??DataTable17_2
   \   000000F0   0x8800             LDRH     R0,[R0, #+0]
   \   000000F2   0x.... 0x....      BL       __aeabi_ui2f
   \   000000F6   0x0002             MOVS     R2,R0
   \   000000F8   0x2102             MOVS     R1,#+2
   \   000000FA   0x203C             MOVS     R0,#+60
   \   000000FC   0x.... 0x....      BL       LCD_P6x8Num
   2079                    LCD_P6x8Num(100,2, speed_feedback);
   \   00000100   0x.... 0x....      LDR.W    R0,??DataTable18_8
   \   00000104   0x8800             LDRH     R0,[R0, #+0]
   \   00000106   0x.... 0x....      BL       __aeabi_ui2f
   \   0000010A   0x0002             MOVS     R2,R0
   \   0000010C   0x2102             MOVS     R1,#+2
   \   0000010E   0x2064             MOVS     R0,#+100
   \   00000110   0x.... 0x....      BL       LCD_P6x8Num
   2080                    lcd_hang ++;
   \   00000114   0x1C64             ADDS     R4,R4,#+1
   2081                   }
   2082                   if(lcd_hang == 4)
   \                     ??redraw_3:
   \   00000116   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000118   0x2C04             CMP      R4,#+4
   \   0000011A   0xD12C             BNE.N    ??redraw_4
   2083                   {
   2084                    LCD_CLS_ROW(0,3);       //第四行，   //赛道的类型标志
   \   0000011C   0x2103             MOVS     R1,#+3
   \   0000011E   0x2000             MOVS     R0,#+0
   \   00000120   0x.... 0x....      BL       LCD_CLS_ROW
   2085                    LCD_P6x8Num(0,3,S_straight);
   \   00000124   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   00000128   0x7800             LDRB     R0,[R0, #+0]
   \   0000012A   0x.... 0x....      BL       __aeabi_ui2f
   \   0000012E   0x0002             MOVS     R2,R0
   \   00000130   0x2103             MOVS     R1,#+3
   \   00000132   0x2000             MOVS     R0,#+0
   \   00000134   0x.... 0x....      BL       LCD_P6x8Num
   2086                    LCD_P6x8Num(40,3,S_left); 
   \   00000138   0x.... 0x....      LDR.W    R0,??DataTable22_3
   \   0000013C   0x7800             LDRB     R0,[R0, #+0]
   \   0000013E   0x.... 0x....      BL       __aeabi_ui2f
   \   00000142   0x0002             MOVS     R2,R0
   \   00000144   0x2103             MOVS     R1,#+3
   \   00000146   0x2028             MOVS     R0,#+40
   \   00000148   0x.... 0x....      BL       LCD_P6x8Num
   2087                    LCD_P6x8Num(70,3,S_right);
   \   0000014C   0x.... 0x....      LDR.W    R0,??DataTable22_4
   \   00000150   0x7800             LDRB     R0,[R0, #+0]
   \   00000152   0x.... 0x....      BL       __aeabi_ui2f
   \   00000156   0x0002             MOVS     R2,R0
   \   00000158   0x2103             MOVS     R1,#+3
   \   0000015A   0x2046             MOVS     R0,#+70
   \   0000015C   0x.... 0x....      BL       LCD_P6x8Num
   2088                    LCD_P6x8Num(110,3,direction);
   \   00000160   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000164   0x7800             LDRB     R0,[R0, #+0]
   \   00000166   0x.... 0x....      BL       __aeabi_ui2f
   \   0000016A   0x0002             MOVS     R2,R0
   \   0000016C   0x2103             MOVS     R1,#+3
   \   0000016E   0x206E             MOVS     R0,#+110
   \   00000170   0x.... 0x....      BL       LCD_P6x8Num
   2089                    lcd_hang ++;
   \   00000174   0x1C64             ADDS     R4,R4,#+1
   2090                   }
   2091                     if(lcd_hang == 5)
   \                     ??redraw_4:
   \   00000176   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000178   0x2C05             CMP      R4,#+5
   \   0000017A   0xD11D             BNE.N    ??redraw_0
   2092                   {
   2093                    LCD_CLS_ROW(0,4);       //第五行，   //标志位
   \   0000017C   0x2104             MOVS     R1,#+4
   \   0000017E   0x2000             MOVS     R0,#+0
   \   00000180   0x.... 0x....      BL       LCD_CLS_ROW
   2094                    LCD_P6x8Num(0,4, stopflag); 
   \   00000184   0x....             LDR.N    R0,??DataTable18_9
   \   00000186   0x7800             LDRB     R0,[R0, #+0]
   \   00000188   0x.... 0x....      BL       __aeabi_ui2f
   \   0000018C   0x0002             MOVS     R2,R0
   \   0000018E   0x2104             MOVS     R1,#+4
   \   00000190   0x2000             MOVS     R0,#+0
   \   00000192   0x.... 0x....      BL       LCD_P6x8Num
   2095                    LCD_P6x8Num(40,4, ramp_flag);
   \   00000196   0x.... 0x....      LDR.W    R0,??DataTable22_6
   \   0000019A   0x7800             LDRB     R0,[R0, #+0]
   \   0000019C   0x.... 0x....      BL       __aeabi_ui2f
   \   000001A0   0x0002             MOVS     R2,R0
   \   000001A2   0x2104             MOVS     R1,#+4
   \   000001A4   0x2028             MOVS     R0,#+40
   \   000001A6   0x.... 0x....      BL       LCD_P6x8Num
   2096                    LCD_P6x8Num(80,4, linear_factor);
   \   000001AA   0x....             LDR.N    R0,??DataTable17_3
   \   000001AC   0x6802             LDR      R2,[R0, #+0]
   \   000001AE   0x2104             MOVS     R1,#+4
   \   000001B0   0x2050             MOVS     R0,#+80
   \   000001B2   0x.... 0x....      BL       LCD_P6x8Num
   2097                    lcd_hang =1;
   \   000001B6   0x2401             MOVS     R4,#+1
   2098                   }
   2099                 /*    if(lcd_hang == 6)
   2100                   {
   2101                    LCD_CLS_ROW(0,5);//第三行，   //线性相关
   2102                     LCD_P6x8Num(0,5, XX_square_sum); 
   2103                     LCD_P6x8Num(60,5, YY_square_sum);
   2104                     LCD_P6x8Num(110,5, XYmulti_sum);
   2105                     lcd_hang = 1;   //恢复置1
   2106                   }
   2107                          */    
   2108               }  
   2109          }
   \                     ??redraw_0:
   \   000001B8   0xBD10             POP      {R4,PC}          ;; return
   2110          

   \                                 In section .text, align 2, keep-with-next
   2111          void key_down(void)
   2112          {
   \                     key_down:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   2113            uint8 temp=0;
   \   00000002   0x2400             MOVS     R4,#+0
   2114            uint32 temp1=0;
   \   00000004   0x2500             MOVS     R5,#+0
   2115            //端口由c8开始往后的八位设置为高点平
   2116              Delay_MS(200000 * 4);
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable22_7  ;; 0xc3500
   \   0000000A   0x.... 0x....      BL       Delay_MS
   2117              GPIOC_PDOR = 0xffffffff; 
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable22_8  ;; 0x400ff080
   \   00000012   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000016   0x6001             STR      R1,[R0, #+0]
   2118              temp1 = GPIOC_PDIR;   //读PTC8~PTC15   
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable22_9  ;; 0x400ff090
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x0005             MOVS     R5,R0
   2119              temp = ~(uint8)((temp1 >> 8) & 0x000000ff);
   \   00000020   0x0A28             LSRS     R0,R5,#+8
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x43C0             MVNS     R0,R0
   \   00000026   0x0004             MOVS     R4,R0
   2120              
   2121               if(temp==0x01)
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0x2C01             CMP      R4,#+1
   \   0000002C   0xD104             BNE.N    ??key_down_0
   2122                  sub_NUM=1;//   
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable22_10
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x7001             STRB     R1,[R0, #+0]
   \   00000036   0xE003             B.N      ??key_down_1
   2123               else
   2124                  sub_NUM=0;//  
   \                     ??key_down_0:
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable22_10
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x7001             STRB     R1,[R0, #+0]
   2125               if(temp==0x02)
   \                     ??key_down_1:
   \   00000040   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000042   0x2C02             CMP      R4,#+2
   \   00000044   0xD104             BNE.N    ??key_down_2
   2126                 se_sub_NUM=1;//  
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable22_11
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0x7001             STRB     R1,[R0, #+0]
   \   0000004E   0xE003             B.N      ??key_down_3
   2127               else
   2128                 se_sub_NUM=0;  //  
   \                     ??key_down_2:
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable22_11
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0x7001             STRB     R1,[R0, #+0]
   2129               if(temp==0x04)
   \                     ??key_down_3:
   \   00000058   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005A   0x2C04             CMP      R4,#+4
   \   0000005C   0xD104             BNE.N    ??key_down_4
   2130                  up_line=1;//   
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable22_12
   \   00000062   0x2101             MOVS     R1,#+1
   \   00000064   0x7001             STRB     R1,[R0, #+0]
   \   00000066   0xE003             B.N      ??key_down_5
   2131               else
   2132                  up_line=0; //   
   \                     ??key_down_4:
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable22_12
   \   0000006C   0x2100             MOVS     R1,#+0
   \   0000006E   0x7001             STRB     R1,[R0, #+0]
   2133               if(temp==0x08)
   \                     ??key_down_5:
   \   00000070   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000072   0x2C08             CMP      R4,#+8
   \   00000074   0xD104             BNE.N    ??key_down_6
   2134                 change_page=1 ; // 
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable22_13
   \   0000007A   0x2101             MOVS     R1,#+1
   \   0000007C   0x7001             STRB     R1,[R0, #+0]
   \   0000007E   0xE003             B.N      ??key_down_7
   2135               else
   2136                  change_page=0;// 
   \                     ??key_down_6:
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable22_13
   \   00000084   0x2100             MOVS     R1,#+0
   \   00000086   0x7001             STRB     R1,[R0, #+0]
   2137               if(temp==0x10)
   \                     ??key_down_7:
   \   00000088   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000008A   0x2C10             CMP      R4,#+16
   \   0000008C   0xD104             BNE.N    ??key_down_8
   2138                  add_NUM=1 ;  //
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable22_14
   \   00000092   0x2101             MOVS     R1,#+1
   \   00000094   0x7001             STRB     R1,[R0, #+0]
   \   00000096   0xE003             B.N      ??key_down_9
   2139               else
   2140                  add_NUM=0    ; //
   \                     ??key_down_8:
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable22_14
   \   0000009C   0x2100             MOVS     R1,#+0
   \   0000009E   0x7001             STRB     R1,[R0, #+0]
   2141               if(temp==0x20)
   \                     ??key_down_9:
   \   000000A0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A2   0x2C20             CMP      R4,#+32
   \   000000A4   0xD104             BNE.N    ??key_down_10
   2142                   down_line=1;    
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable23
   \   000000AA   0x2101             MOVS     R1,#+1
   \   000000AC   0x7001             STRB     R1,[R0, #+0]
   \   000000AE   0xE003             B.N      ??key_down_11
   2143               else
   2144                  down_line=0; 
   \                     ??key_down_10:
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable23
   \   000000B4   0x2100             MOVS     R1,#+0
   \   000000B6   0x7001             STRB     R1,[R0, #+0]
   2145              
   2146             
   2147          }
   \                     ??key_down_11:
   \   000000B8   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2148          
   2149          //---------------------------全键盘扫描-----------------------------//

   \                                 In section .text, align 2, keep-with-next
   2150          void Keyscan(void)
   2151          {
   \                     Keyscan:
   \   00000000   0xB580             PUSH     {R7,LR}
   2152                key_down();
   \   00000002   0x.... 0x....      BL       key_down
   2153                
   2154                if(change_page)  //如果检测到低电平，说明按键按下
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable22_13
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD025             BEQ.N    ??Keyscan_0
   2155                {    key_down(); //延时去抖，一般10-20ms
   \   00000010   0x.... 0x....      BL       key_down
   2156                     if(change_page)     //再次确认按键是否按下，没有按下则退出
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable22_13
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD102             BNE.N    ??Keyscan_1
   \   0000001E   0xE01D             B.N      ??Keyscan_0
   2157                     {   
   2158                        while(change_page)//如果确认按下按键等待按键释放，没有释放则一直等待
   2159                          key_down();
   \                     ??Keyscan_2:
   \   00000020   0x.... 0x....      BL       key_down
   \                     ??Keyscan_1:
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable22_13
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD1F8             BNE.N    ??Keyscan_2
   2160                        if(lcd_page_num<2)    //页序号加操作这里的页数2是可以改动的
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0x2802             CMP      R0,#+2
   \   00000036   0xD207             BCS.N    ??Keyscan_3
   2161          	         lcd_page_num++;
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x1C40             ADDS     R0,R0,#+1
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable23_1
   \   00000044   0x7008             STRB     R0,[R1, #+0]
   \   00000046   0xE003             B.N      ??Keyscan_4
   2162          	       else
   2163          	         lcd_page_num=1;
   \                     ??Keyscan_3:
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   0000004C   0x2101             MOVS     R1,#+1
   \   0000004E   0x7001             STRB     R1,[R0, #+0]
   2164                         lcd_line_num=0;
   \                     ??Keyscan_4:
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable20
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0x7001             STRB     R1,[R0, #+0]
   2165                        pre_show();//这里是显示函数，提前写在这里一会再写这个函数的函数体
   \   00000058   0x.... 0x....      BL       pre_show
   2166                         
   2167                     }
   2168                }
   2169               //减页数 
   2170                if(se_sub_NUM)  //如果检测到低电平，说明按键按下
   \                     ??Keyscan_0:
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable22_11
   \   00000060   0x7800             LDRB     R0,[R0, #+0]
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD018             BEQ.N    ??Keyscan_5
   2171                {    key_down(); //延时去抖，一般10-20ms
   \   00000066   0x.... 0x....      BL       key_down
   2172                     if(se_sub_NUM)     //再次确认按键是否按下，没有按下则退出
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable22_11
   \   0000006E   0x7800             LDRB     R0,[R0, #+0]
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD102             BNE.N    ??Keyscan_6
   \   00000074   0xE010             B.N      ??Keyscan_5
   2173                     {
   2174                        while(se_sub_NUM)//如果确认按下按键等待按键释放，没有释放则一直等待
   2175                        
   2176                         key_down();
   \                     ??Keyscan_7:
   \   00000076   0x.... 0x....      BL       key_down
   \                     ??Keyscan_6:
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable22_11
   \   0000007E   0x7800             LDRB     R0,[R0, #+0]
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD1F8             BNE.N    ??Keyscan_7
   2177                         LCD_change_value(lcd_page_num,lcd_line_num,-1);
   \   00000084   0xF05F 0x32FF      MOVS     R2,#-1
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable20
   \   0000008C   0x7801             LDRB     R1,[R0, #+0]
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   00000092   0x7800             LDRB     R0,[R0, #+0]
   \   00000094   0x.... 0x....      BL       LCD_change_value
   2178                         
   2179                     }
   2180                }
   2181                
   2182                
   2183               if(lcd_page_num!=0)     //如不为第一页，则进行下一步扫描  
   \                     ??Keyscan_5:
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   0000009C   0x7800             LDRB     R0,[R0, #+0]
   \   0000009E   0x2800             CMP      R0,#+0
   \   000000A0   0xF000 0x80B2      BEQ.W    ??Keyscan_8
   2184               { //行扫描
   2185                //向上
   2186                 key_down();
   \   000000A4   0x.... 0x....      BL       key_down
   2187                if(up_line)  //如果检测到低电平，说明按键按下
   \   000000A8   0x.... 0x....      LDR.W    R0,??DataTable22_12
   \   000000AC   0x7800             LDRB     R0,[R0, #+0]
   \   000000AE   0x2800             CMP      R0,#+0
   \   000000B0   0xD037             BEQ.N    ??Keyscan_9
   2188                {
   2189                      key_down(); //延时去抖，一般10-20ms
   \   000000B2   0x.... 0x....      BL       key_down
   2190                      if(up_line)     //再次确认按键是否按下，没有按下则退出
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable22_12
   \   000000BA   0x7800             LDRB     R0,[R0, #+0]
   \   000000BC   0x2800             CMP      R0,#+0
   \   000000BE   0xD102             BNE.N    ??Keyscan_10
   \   000000C0   0xE02F             B.N      ??Keyscan_9
   2191                      {
   2192                         while(up_line)//如果确认按下按键等待按键释放，没有释放则一直等待
   2193                           key_down();
   \                     ??Keyscan_11:
   \   000000C2   0x.... 0x....      BL       key_down
   \                     ??Keyscan_10:
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable22_12
   \   000000CA   0x7800             LDRB     R0,[R0, #+0]
   \   000000CC   0x2800             CMP      R0,#+0
   \   000000CE   0xD1F8             BNE.N    ??Keyscan_11
   2194                         if(lcd_page_num!=0)
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   000000D4   0x7800             LDRB     R0,[R0, #+0]
   \   000000D6   0x2800             CMP      R0,#+0
   \   000000D8   0xD006             BEQ.N    ??Keyscan_12
   2195          	        LCD_P6x8Cha(0,lcd_line_num,' ');
   \   000000DA   0x2220             MOVS     R2,#+32
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable20
   \   000000E0   0x7801             LDRB     R1,[R0, #+0]
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0x.... 0x....      BL       LCD_P6x8Cha
   2196                         
   2197                         
   2198                          if(lcd_line_num<LCD_ROW)    //行序号加操作
   \                     ??Keyscan_12:
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable20
   \   000000EC   0x7800             LDRB     R0,[R0, #+0]
   \   000000EE   0x2807             CMP      R0,#+7
   \   000000F0   0xD207             BCS.N    ??Keyscan_13
   2199          	         lcd_line_num++;
   \   000000F2   0x.... 0x....      LDR.W    R0,??DataTable20
   \   000000F6   0x7800             LDRB     R0,[R0, #+0]
   \   000000F8   0x1C40             ADDS     R0,R0,#+1
   \   000000FA   0x.... 0x....      LDR.W    R1,??DataTable20
   \   000000FE   0x7008             STRB     R0,[R1, #+0]
   \   00000100   0xE003             B.N      ??Keyscan_14
   2200          		 else
   2201          		  lcd_line_num=0;
   \                     ??Keyscan_13:
   \   00000102   0x.... 0x....      LDR.W    R0,??DataTable20
   \   00000106   0x2100             MOVS     R1,#+0
   \   00000108   0x7001             STRB     R1,[R0, #+0]
   2202                          if(lcd_page_num!=0)  
   \                     ??Keyscan_14:
   \   0000010A   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   0000010E   0x7800             LDRB     R0,[R0, #+0]
   \   00000110   0x2800             CMP      R0,#+0
   \   00000112   0xD006             BEQ.N    ??Keyscan_9
   2203                        LCD_P6x8Cha(0,lcd_line_num,'*');
   \   00000114   0x222A             MOVS     R2,#+42
   \   00000116   0x.... 0x....      LDR.W    R0,??DataTable20
   \   0000011A   0x7801             LDRB     R1,[R0, #+0]
   \   0000011C   0x2000             MOVS     R0,#+0
   \   0000011E   0x.... 0x....      BL       LCD_P6x8Cha
   2204                      }
   2205                }
   2206                //向下
   2207                 if(down_line)  //如果检测到低电平，说明按键按下
   \                     ??Keyscan_9:
   \   00000122   0x.... 0x....      LDR.W    R0,??DataTable23
   \   00000126   0x7800             LDRB     R0,[R0, #+0]
   \   00000128   0x2800             CMP      R0,#+0
   \   0000012A   0xD032             BEQ.N    ??Keyscan_15
   2208                {
   2209                      key_down(); //延时去抖，一般10-20ms
   \   0000012C   0x.... 0x....      BL       key_down
   2210                      if(down_line)     //再次确认按键是否按下，没有按下则退出
   \   00000130   0x.... 0x....      LDR.W    R0,??DataTable23
   \   00000134   0x7800             LDRB     R0,[R0, #+0]
   \   00000136   0x2800             CMP      R0,#+0
   \   00000138   0xD102             BNE.N    ??Keyscan_16
   \   0000013A   0xE02A             B.N      ??Keyscan_15
   2211                      {
   2212                         while(down_line)//如果确认按下按键等待按键释放，没有释放则一直等待
   2213                           key_down(); 
   \                     ??Keyscan_17:
   \   0000013C   0x.... 0x....      BL       key_down
   \                     ??Keyscan_16:
   \   00000140   0x.... 0x....      LDR.W    R0,??DataTable23
   \   00000144   0x7800             LDRB     R0,[R0, #+0]
   \   00000146   0x2800             CMP      R0,#+0
   \   00000148   0xD1F8             BNE.N    ??Keyscan_17
   2214                          if(lcd_page_num!=0)
   \   0000014A   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   0000014E   0x7800             LDRB     R0,[R0, #+0]
   \   00000150   0x2800             CMP      R0,#+0
   \   00000152   0xD006             BEQ.N    ??Keyscan_18
   2215          	        LCD_P6x8Cha(0,lcd_line_num,' ');
   \   00000154   0x2220             MOVS     R2,#+32
   \   00000156   0x.... 0x....      LDR.W    R0,??DataTable20
   \   0000015A   0x7801             LDRB     R1,[R0, #+0]
   \   0000015C   0x2000             MOVS     R0,#+0
   \   0000015E   0x.... 0x....      BL       LCD_P6x8Cha
   2216                          if(lcd_line_num>0)    //行序号加操作
   \                     ??Keyscan_18:
   \   00000162   0x.... 0x....      LDR.W    R0,??DataTable20
   \   00000166   0x7800             LDRB     R0,[R0, #+0]
   \   00000168   0x2801             CMP      R0,#+1
   \   0000016A   0xD307             BCC.N    ??Keyscan_19
   2217          	         lcd_line_num--;
   \   0000016C   0x.... 0x....      LDR.W    R0,??DataTable20
   \   00000170   0x7800             LDRB     R0,[R0, #+0]
   \   00000172   0x1E40             SUBS     R0,R0,#+1
   \   00000174   0x.... 0x....      LDR.W    R1,??DataTable20
   \   00000178   0x7008             STRB     R0,[R1, #+0]
   \   0000017A   0xE003             B.N      ??Keyscan_20
   2218          		 else
   2219          		  lcd_line_num=LCD_ROW;
   \                     ??Keyscan_19:
   \   0000017C   0x.... 0x....      LDR.W    R0,??DataTable20
   \   00000180   0x2107             MOVS     R1,#+7
   \   00000182   0x7001             STRB     R1,[R0, #+0]
   2220                            
   2221                        LCD_P6x8Cha(0,lcd_line_num,'*');//
   \                     ??Keyscan_20:
   \   00000184   0x222A             MOVS     R2,#+42
   \   00000186   0x.... 0x....      LDR.W    R0,??DataTable20
   \   0000018A   0x7801             LDRB     R1,[R0, #+0]
   \   0000018C   0x2000             MOVS     R0,#+0
   \   0000018E   0x.... 0x....      BL       LCD_P6x8Cha
   2222                      }
   2223                }
   2224                
   2225                 if(add_NUM)  //如果检测到低电平，说明按键按下
   \                     ??Keyscan_15:
   \   00000192   0x.... 0x....      LDR.W    R0,??DataTable22_14
   \   00000196   0x7800             LDRB     R0,[R0, #+0]
   \   00000198   0x2800             CMP      R0,#+0
   \   0000019A   0xD017             BEQ.N    ??Keyscan_21
   2226              {
   2227          	key_down(); //延时去抖，一般10-20ms
   \   0000019C   0x.... 0x....      BL       key_down
   2228               if(add_NUM)     //再次确认按键是否按下，没有按下则退出
   \   000001A0   0x.... 0x....      LDR.W    R0,??DataTable22_14
   \   000001A4   0x7800             LDRB     R0,[R0, #+0]
   \   000001A6   0x2800             CMP      R0,#+0
   \   000001A8   0xD102             BNE.N    ??Keyscan_22
   \   000001AA   0xE00F             B.N      ??Keyscan_21
   2229          	   {
   2230                while(add_NUM)//如果确认按下按键等待按键释放，没有释放则一直等待
   2231                  key_down();
   \                     ??Keyscan_23:
   \   000001AC   0x.... 0x....      BL       key_down
   \                     ??Keyscan_22:
   \   000001B0   0x.... 0x....      LDR.W    R0,??DataTable22_14
   \   000001B4   0x7800             LDRB     R0,[R0, #+0]
   \   000001B6   0x2800             CMP      R0,#+0
   \   000001B8   0xD1F8             BNE.N    ??Keyscan_23
   2232                  LCD_change_value(lcd_page_num,lcd_line_num,1);
   \   000001BA   0x2201             MOVS     R2,#+1
   \   000001BC   0x.... 0x....      LDR.W    R0,??DataTable20
   \   000001C0   0x7801             LDRB     R1,[R0, #+0]
   \   000001C2   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   000001C6   0x7800             LDRB     R0,[R0, #+0]
   \   000001C8   0x.... 0x....      BL       LCD_change_value
   2233          	   }
   2234               }
   2235                
   2236               
   2237               if(sub_NUM)  //如果检测到低电平，说明按键按下
   \                     ??Keyscan_21:
   \   000001CC   0x.... 0x....      LDR.W    R0,??DataTable22_10
   \   000001D0   0x7800             LDRB     R0,[R0, #+0]
   \   000001D2   0x2800             CMP      R0,#+0
   \   000001D4   0xD018             BEQ.N    ??Keyscan_8
   2238              {
   2239          	key_down(); //延时去抖，一般10-20ms
   \   000001D6   0x.... 0x....      BL       key_down
   2240               if(sub_NUM)     //再次确认按键是否按下，没有按下则退出
   \   000001DA   0x.... 0x....      LDR.W    R0,??DataTable22_10
   \   000001DE   0x7800             LDRB     R0,[R0, #+0]
   \   000001E0   0x2800             CMP      R0,#+0
   \   000001E2   0xD102             BNE.N    ??Keyscan_24
   \   000001E4   0xE010             B.N      ??Keyscan_8
   2241          	   {
   2242                  while(sub_NUM)//如果确认按下按键等待按键释放，没有释放则一直等待
   2243                    key_down();
   \                     ??Keyscan_25:
   \   000001E6   0x.... 0x....      BL       key_down
   \                     ??Keyscan_24:
   \   000001EA   0x.... 0x....      LDR.W    R0,??DataTable22_10
   \   000001EE   0x7800             LDRB     R0,[R0, #+0]
   \   000001F0   0x2800             CMP      R0,#+0
   \   000001F2   0xD1F8             BNE.N    ??Keyscan_25
   2244               LCD_change_value(lcd_page_num,lcd_line_num,-1);
   \   000001F4   0xF05F 0x32FF      MOVS     R2,#-1
   \   000001F8   0x.... 0x....      LDR.W    R0,??DataTable20
   \   000001FC   0x7801             LDRB     R1,[R0, #+0]
   \   000001FE   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   00000202   0x7800             LDRB     R0,[R0, #+0]
   \   00000204   0x.... 0x....      BL       LCD_change_value
   2245          	   }
   2246              }
   2247              
   2248              
   2249               }
   2250           }
   \                     ??Keyscan_8:
   \   00000208   0xBD01             POP      {R0,PC}          ;; return
   2251          //-------------------------上-电LCD键盘调试---------------------//

   \                                 In section .text, align 2, keep-with-next
   2252          void LCD_change_value(unsigned char page,unsigned char m,int i)
   2253          {
   \                     LCD_change_value:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   2254              
   2255             if(page==1)
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x2C01             CMP      R4,#+1
   \   0000000C   0xF040 0x80C9      BNE.W    ??LCD_change_value_0
   2256             {
   2257              switch(m)
   \   00000010   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000012   0x2D00             CMP      R5,#+0
   \   00000014   0xD00B             BEQ.N    ??LCD_change_value_1
   \   00000016   0x2D02             CMP      R5,#+2
   \   00000018   0xD041             BEQ.N    ??LCD_change_value_2
   \   0000001A   0xD325             BCC.N    ??LCD_change_value_3
   \   0000001C   0x2D04             CMP      R5,#+4
   \   0000001E   0xD06E             BEQ.N    ??LCD_change_value_4
   \   00000020   0xD355             BCC.N    ??LCD_change_value_5
   \   00000022   0x2D06             CMP      R5,#+6
   \   00000024   0xF000 0x80A1      BEQ.W    ??LCD_change_value_6
   \   00000028   0xF0C0 0x8084      BCC.W    ??LCD_change_value_7
   \   0000002C   0xE0B9             B.N      ??LCD_change_value_0
   2258                 {
   2259                  case 0:lcd_debug+=i;
   \                     ??LCD_change_value_1:
   \   0000002E   0x....             LDR.N    R0,??DataTable19_4
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0x1830             ADDS     R0,R6,R0
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD001             BEQ.N    ??LCD_change_value_8
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0xE000             B.N      ??LCD_change_value_9
   \                     ??LCD_change_value_8:
   \   0000003C   0x2000             MOVS     R0,#+0
   \                     ??LCD_change_value_9:
   \   0000003E   0x....             LDR.N    R1,??DataTable19_4
   \   00000040   0x7008             STRB     R0,[R1, #+0]
   2260                          LCD_P6x8Cha(0,0,'*'); 
   \   00000042   0x222A             MOVS     R2,#+42
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x.... 0x....      BL       LCD_P6x8Cha
   2261                          LCD_CLS_ROW(100,0);
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x2064             MOVS     R0,#+100
   \   00000050   0x.... 0x....      BL       LCD_CLS_ROW
   2262                          LCD_P6x8Num(100,0,lcd_debug);
   \   00000054   0x....             LDR.N    R0,??DataTable19_4
   \   00000056   0x7800             LDRB     R0,[R0, #+0]
   \   00000058   0x.... 0x....      BL       __aeabi_ui2f
   \   0000005C   0x0002             MOVS     R2,R0
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0x2064             MOVS     R0,#+100
   \   00000062   0x.... 0x....      BL       LCD_P6x8Num
   2263                          break; 
   \   00000066   0xE09C             B.N      ??LCD_change_value_0
   2264                  case 1:speed_select+=i;
   \                     ??LCD_change_value_3:
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable23_2
   \   0000006C   0x7800             LDRB     R0,[R0, #+0]
   \   0000006E   0x1830             ADDS     R0,R6,R0
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable23_2
   \   00000074   0x7008             STRB     R0,[R1, #+0]
   2265                          LCD_P6x8Cha(0,1,'*'); 
   \   00000076   0x222A             MOVS     R2,#+42
   \   00000078   0x2101             MOVS     R1,#+1
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x.... 0x....      BL       LCD_P6x8Cha
   2266                          LCD_CLS_ROW(100,1);
   \   00000080   0x2101             MOVS     R1,#+1
   \   00000082   0x2064             MOVS     R0,#+100
   \   00000084   0x.... 0x....      BL       LCD_CLS_ROW
   2267                          LCD_P6x8Num(100,1,speed_select);
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable23_2
   \   0000008C   0x7800             LDRB     R0,[R0, #+0]
   \   0000008E   0x.... 0x....      BL       __aeabi_ui2f
   \   00000092   0x0002             MOVS     R2,R0
   \   00000094   0x2101             MOVS     R1,#+1
   \   00000096   0x2064             MOVS     R0,#+100
   \   00000098   0x.... 0x....      BL       LCD_P6x8Num
   2268                          break;
   \   0000009C   0xE081             B.N      ??LCD_change_value_0
   2269                   case 2:stop_pit_count+=i;
   \                     ??LCD_change_value_2:
   \   0000009E   0x....             LDR.N    R0,??DataTable20_3
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0x1830             ADDS     R0,R6,R0
   \   000000A4   0x....             LDR.N    R1,??DataTable20_3
   \   000000A6   0x6008             STR      R0,[R1, #+0]
   2270                          LCD_P6x8Cha(0,2,'*'); 
   \   000000A8   0x222A             MOVS     R2,#+42
   \   000000AA   0x2102             MOVS     R1,#+2
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0x.... 0x....      BL       LCD_P6x8Cha
   2271                          LCD_CLS_ROW(100,2);
   \   000000B2   0x2102             MOVS     R1,#+2
   \   000000B4   0x2064             MOVS     R0,#+100
   \   000000B6   0x.... 0x....      BL       LCD_CLS_ROW
   2272                          LCD_P6x8Num(100,2,stop_pit_count);//lcd_ref_p
   \   000000BA   0x....             LDR.N    R0,??DataTable20_3
   \   000000BC   0x6800             LDR      R0,[R0, #+0]
   \   000000BE   0x.... 0x....      BL       __aeabi_ui2f
   \   000000C2   0x0002             MOVS     R2,R0
   \   000000C4   0x2102             MOVS     R1,#+2
   \   000000C6   0x2064             MOVS     R0,#+100
   \   000000C8   0x.... 0x....      BL       LCD_P6x8Num
   2273                          break;     
   \   000000CC   0xE069             B.N      ??LCD_change_value_0
   2274                   case 3:ramp_delay_time+=i;
   \                     ??LCD_change_value_5:
   \   000000CE   0x....             LDR.N    R0,??DataTable20_5
   \   000000D0   0x8800             LDRH     R0,[R0, #+0]
   \   000000D2   0x1830             ADDS     R0,R6,R0
   \   000000D4   0x....             LDR.N    R1,??DataTable20_5
   \   000000D6   0x8008             STRH     R0,[R1, #+0]
   2275                          LCD_P6x8Cha(0,3,'*'); 
   \   000000D8   0x222A             MOVS     R2,#+42
   \   000000DA   0x2103             MOVS     R1,#+3
   \   000000DC   0x2000             MOVS     R0,#+0
   \   000000DE   0x.... 0x....      BL       LCD_P6x8Cha
   2276                          LCD_CLS_ROW(100,3);
   \   000000E2   0x2103             MOVS     R1,#+3
   \   000000E4   0x2064             MOVS     R0,#+100
   \   000000E6   0x.... 0x....      BL       LCD_CLS_ROW
   2277                          LCD_P6x8Num(100,3,ramp_delay_time);//lcd_ref_p
   \   000000EA   0x....             LDR.N    R0,??DataTable20_5
   \   000000EC   0x8800             LDRH     R0,[R0, #+0]
   \   000000EE   0x.... 0x....      BL       __aeabi_ui2f
   \   000000F2   0x0002             MOVS     R2,R0
   \   000000F4   0x2103             MOVS     R1,#+3
   \   000000F6   0x2064             MOVS     R0,#+100
   \   000000F8   0x.... 0x....      BL       LCD_P6x8Num
   2278                          break; 
   \   000000FC   0xE051             B.N      ??LCD_change_value_0
   2279                   case 4:mid_angle+=i;
   \                     ??LCD_change_value_4:
   \   000000FE   0x.... 0x....      LDR.W    R0,??DataTable23_3
   \   00000102   0x8800             LDRH     R0,[R0, #+0]
   \   00000104   0x1830             ADDS     R0,R6,R0
   \   00000106   0x.... 0x....      LDR.W    R1,??DataTable23_3
   \   0000010A   0x8008             STRH     R0,[R1, #+0]
   2280                          LCD_P6x8Cha(0,4,'*'); 
   \   0000010C   0x222A             MOVS     R2,#+42
   \   0000010E   0x2104             MOVS     R1,#+4
   \   00000110   0x2000             MOVS     R0,#+0
   \   00000112   0x.... 0x....      BL       LCD_P6x8Cha
   2281                          LCD_CLS_ROW(100,4);
   \   00000116   0x2104             MOVS     R1,#+4
   \   00000118   0x2064             MOVS     R0,#+100
   \   0000011A   0x.... 0x....      BL       LCD_CLS_ROW
   2282                          LCD_P6x8Num(100,4,mid_angle);//lcd_ref_p
   \   0000011E   0x.... 0x....      LDR.W    R0,??DataTable23_3
   \   00000122   0x8800             LDRH     R0,[R0, #+0]
   \   00000124   0x.... 0x....      BL       __aeabi_ui2f
   \   00000128   0x0002             MOVS     R2,R0
   \   0000012A   0x2104             MOVS     R1,#+4
   \   0000012C   0x2064             MOVS     R0,#+100
   \   0000012E   0x.... 0x....      BL       LCD_P6x8Num
   2283                          break;        
   \   00000132   0xE036             B.N      ??LCD_change_value_0
   2284                   case 5:WHITE_BLACK_OT +=i;
   \                     ??LCD_change_value_7:
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable23_4
   \   00000138   0x7800             LDRB     R0,[R0, #+0]
   \   0000013A   0x1830             ADDS     R0,R6,R0
   \   0000013C   0x.... 0x....      LDR.W    R1,??DataTable23_4
   \   00000140   0x7008             STRB     R0,[R1, #+0]
   2285                          LCD_P6x8Cha(0,5,'*'); 
   \   00000142   0x222A             MOVS     R2,#+42
   \   00000144   0x2105             MOVS     R1,#+5
   \   00000146   0x2000             MOVS     R0,#+0
   \   00000148   0x.... 0x....      BL       LCD_P6x8Cha
   2286                          LCD_CLS_ROW(100,5);
   \   0000014C   0x2105             MOVS     R1,#+5
   \   0000014E   0x2064             MOVS     R0,#+100
   \   00000150   0x.... 0x....      BL       LCD_CLS_ROW
   2287                          LCD_P6x8Num(100,5,WHITE_BLACK_OT);
   \   00000154   0x.... 0x....      LDR.W    R0,??DataTable23_4
   \   00000158   0x7800             LDRB     R0,[R0, #+0]
   \   0000015A   0x.... 0x....      BL       __aeabi_ui2f
   \   0000015E   0x0002             MOVS     R2,R0
   \   00000160   0x2105             MOVS     R1,#+5
   \   00000162   0x2064             MOVS     R0,#+100
   \   00000164   0x.... 0x....      BL       LCD_P6x8Num
   2288                          break;  
   \   00000168   0xE01B             B.N      ??LCD_change_value_0
   2289                   case 6:test_run +=i;
   \                     ??LCD_change_value_6:
   \   0000016A   0x....             LDR.N    R0,??DataTable20_9
   \   0000016C   0x7800             LDRB     R0,[R0, #+0]
   \   0000016E   0x1830             ADDS     R0,R6,R0
   \   00000170   0x2800             CMP      R0,#+0
   \   00000172   0xD001             BEQ.N    ??LCD_change_value_10
   \   00000174   0x2001             MOVS     R0,#+1
   \   00000176   0xE000             B.N      ??LCD_change_value_11
   \                     ??LCD_change_value_10:
   \   00000178   0x2000             MOVS     R0,#+0
   \                     ??LCD_change_value_11:
   \   0000017A   0x....             LDR.N    R1,??DataTable20_9
   \   0000017C   0x7008             STRB     R0,[R1, #+0]
   2290                          LCD_P6x8Cha(0,6,'*'); 
   \   0000017E   0x222A             MOVS     R2,#+42
   \   00000180   0x2106             MOVS     R1,#+6
   \   00000182   0x2000             MOVS     R0,#+0
   \   00000184   0x.... 0x....      BL       LCD_P6x8Cha
   2291                          LCD_CLS_ROW(100,6);
   \   00000188   0x2106             MOVS     R1,#+6
   \   0000018A   0x2064             MOVS     R0,#+100
   \   0000018C   0x.... 0x....      BL       LCD_CLS_ROW
   2292                          LCD_P6x8Num(100,6,test_run);
   \   00000190   0x....             LDR.N    R0,??DataTable20_9
   \   00000192   0x7800             LDRB     R0,[R0, #+0]
   \   00000194   0x.... 0x....      BL       __aeabi_ui2f
   \   00000198   0x0002             MOVS     R2,R0
   \   0000019A   0x2106             MOVS     R1,#+6
   \   0000019C   0x2064             MOVS     R0,#+100
   \   0000019E   0x.... 0x....      BL       LCD_P6x8Num
   2293                          break;  
   2294                 }
   2295             }
   2296          
   2297           if(page==2)
   \                     ??LCD_change_value_0:
   \   000001A2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001A4   0x2C02             CMP      R4,#+2
   \   000001A6   0xF040 0x80CF      BNE.W    ??LCD_change_value_12
   2298               {
   2299                    switch(m)
   \   000001AA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001AC   0x2D00             CMP      R5,#+0
   \   000001AE   0xD00B             BEQ.N    ??LCD_change_value_13
   \   000001B0   0x2D02             CMP      R5,#+2
   \   000001B2   0xD041             BEQ.N    ??LCD_change_value_14
   \   000001B4   0xD324             BCC.N    ??LCD_change_value_15
   \   000001B6   0x2D04             CMP      R5,#+4
   \   000001B8   0xD076             BEQ.N    ??LCD_change_value_16
   \   000001BA   0xD359             BCC.N    ??LCD_change_value_17
   \   000001BC   0x2D06             CMP      R5,#+6
   \   000001BE   0xF000 0x80A9      BEQ.W    ??LCD_change_value_18
   \   000001C2   0xF0C0 0x808C      BCC.W    ??LCD_change_value_19
   \   000001C6   0xE0BF             B.N      ??LCD_change_value_12
   2300                    {
   2301                   case 0:lcd_error_servo_p+=i;
   \                     ??LCD_change_value_13:
   \   000001C8   0x.... 0x....      LDR.W    R0,??DataTable23_5
   \   000001CC   0x8800             LDRH     R0,[R0, #+0]
   \   000001CE   0x1830             ADDS     R0,R6,R0
   \   000001D0   0x.... 0x....      LDR.W    R1,??DataTable23_5
   \   000001D4   0x8008             STRH     R0,[R1, #+0]
   2302                          LCD_P6x8Cha(0,0,'*'); 
   \   000001D6   0x222A             MOVS     R2,#+42
   \   000001D8   0x2100             MOVS     R1,#+0
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x.... 0x....      BL       LCD_P6x8Cha
   2303                          LCD_CLS_ROW(100,0);
   \   000001E0   0x2100             MOVS     R1,#+0
   \   000001E2   0x2064             MOVS     R0,#+100
   \   000001E4   0x.... 0x....      BL       LCD_CLS_ROW
   2304                          LCD_P6x8Num(100,0,lcd_error_servo_p);
   \   000001E8   0x.... 0x....      LDR.W    R0,??DataTable23_5
   \   000001EC   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000001F0   0x.... 0x....      BL       __aeabi_i2f
   \   000001F4   0x0002             MOVS     R2,R0
   \   000001F6   0x2100             MOVS     R1,#+0
   \   000001F8   0x2064             MOVS     R0,#+100
   \   000001FA   0x.... 0x....      BL       LCD_P6x8Num
   2305                          break;
   \   000001FE   0xE0A3             B.N      ??LCD_change_value_12
   2306                   case 1:lcd_error_servo_d+=i;
   \                     ??LCD_change_value_15:
   \   00000200   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000204   0x8800             LDRH     R0,[R0, #+0]
   \   00000206   0x1830             ADDS     R0,R6,R0
   \   00000208   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   0000020C   0x8008             STRH     R0,[R1, #+0]
   2307                          LCD_P6x8Cha(0,1,'*'); 
   \   0000020E   0x222A             MOVS     R2,#+42
   \   00000210   0x2101             MOVS     R1,#+1
   \   00000212   0x2000             MOVS     R0,#+0
   \   00000214   0x.... 0x....      BL       LCD_P6x8Cha
   2308                          LCD_CLS_ROW(100,1);
   \   00000218   0x2101             MOVS     R1,#+1
   \   0000021A   0x2064             MOVS     R0,#+100
   \   0000021C   0x.... 0x....      BL       LCD_CLS_ROW
   2309                          LCD_P6x8Num(100,1,lcd_error_servo_d);
   \   00000220   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000224   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000228   0x.... 0x....      BL       __aeabi_i2f
   \   0000022C   0x0002             MOVS     R2,R0
   \   0000022E   0x2101             MOVS     R1,#+1
   \   00000230   0x2064             MOVS     R0,#+100
   \   00000232   0x.... 0x....      BL       LCD_P6x8Num
   2310                          break;       
   \   00000236   0xE087             B.N      ??LCD_change_value_12
   2311                   case 2:lcd_ref_p+=i;
   \                     ??LCD_change_value_14:
   \   00000238   0x.... 0x....      LDR.W    R0,??DataTable23_7
   \   0000023C   0x8800             LDRH     R0,[R0, #+0]
   \   0000023E   0x1830             ADDS     R0,R6,R0
   \   00000240   0x.... 0x....      LDR.W    R1,??DataTable23_7
   \   00000244   0x8008             STRH     R0,[R1, #+0]
   2312                          LCD_P6x8Cha(0,2,'*'); 
   \   00000246   0x222A             MOVS     R2,#+42
   \   00000248   0x2102             MOVS     R1,#+2
   \   0000024A   0x2000             MOVS     R0,#+0
   \   0000024C   0x.... 0x....      BL       LCD_P6x8Cha
   2313                          LCD_CLS_ROW(100,2);
   \   00000250   0x2102             MOVS     R1,#+2
   \   00000252   0x2064             MOVS     R0,#+100
   \   00000254   0x.... 0x....      BL       LCD_CLS_ROW
   2314                          LCD_P6x8Num(100,2,lcd_ref_p);
   \   00000258   0x.... 0x....      LDR.W    R0,??DataTable23_7
   \   0000025C   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000260   0x.... 0x....      BL       __aeabi_i2f
   \   00000264   0x0002             MOVS     R2,R0
   \   00000266   0x2102             MOVS     R1,#+2
   \   00000268   0x2064             MOVS     R0,#+100
   \   0000026A   0x.... 0x....      BL       LCD_P6x8Num
   2315                          break;        
   \   0000026E   0xE06B             B.N      ??LCD_change_value_12
   2316                   case 3:lcd_ref_d += i;
   \                     ??LCD_change_value_17:
   \   00000270   0x.... 0x....      LDR.W    R0,??DataTable23_8
   \   00000274   0x8800             LDRH     R0,[R0, #+0]
   \   00000276   0x1830             ADDS     R0,R6,R0
   \   00000278   0x.... 0x....      LDR.W    R1,??DataTable23_8
   \   0000027C   0x8008             STRH     R0,[R1, #+0]
   2317                          LCD_P6x8Cha(0,3,'*'); 
   \   0000027E   0x222A             MOVS     R2,#+42
   \   00000280   0x2103             MOVS     R1,#+3
   \   00000282   0x2000             MOVS     R0,#+0
   \   00000284   0x.... 0x....      BL       LCD_P6x8Cha
   2318                          LCD_CLS_ROW(100,3);
   \   00000288   0x2103             MOVS     R1,#+3
   \   0000028A   0x2064             MOVS     R0,#+100
   \   0000028C   0x.... 0x....      BL       LCD_CLS_ROW
   2319                          LCD_P6x8Num(100,3,lcd_ref_d);
   \   00000290   0x.... 0x....      LDR.W    R0,??DataTable23_8
   \   00000294   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000298   0x.... 0x....      BL       __aeabi_i2f
   \   0000029C   0x0002             MOVS     R2,R0
   \   0000029E   0x2103             MOVS     R1,#+3
   \   000002A0   0x2064             MOVS     R0,#+100
   \   000002A2   0x.... 0x....      BL       LCD_P6x8Num
   2320                          break;
   \   000002A6   0xE04F             B.N      ??LCD_change_value_12
   2321                  case 4:lcd_straight_speed += i;
   \                     ??LCD_change_value_16:
   \   000002A8   0x.... 0x....      LDR.W    R0,??DataTable23_9
   \   000002AC   0x8800             LDRH     R0,[R0, #+0]
   \   000002AE   0x1830             ADDS     R0,R6,R0
   \   000002B0   0x.... 0x....      LDR.W    R1,??DataTable23_9
   \   000002B4   0x8008             STRH     R0,[R1, #+0]
   2322                          LCD_P6x8Cha(0,4,'*'); 
   \   000002B6   0x222A             MOVS     R2,#+42
   \   000002B8   0x2104             MOVS     R1,#+4
   \   000002BA   0x2000             MOVS     R0,#+0
   \   000002BC   0x.... 0x....      BL       LCD_P6x8Cha
   2323                          LCD_CLS_ROW(100,4);
   \   000002C0   0x2104             MOVS     R1,#+4
   \   000002C2   0x2064             MOVS     R0,#+100
   \   000002C4   0x.... 0x....      BL       LCD_CLS_ROW
   2324                          LCD_P6x8Num(100,4,lcd_straight_speed);
   \   000002C8   0x.... 0x....      LDR.W    R0,??DataTable23_9
   \   000002CC   0x8800             LDRH     R0,[R0, #+0]
   \   000002CE   0x.... 0x....      BL       __aeabi_ui2f
   \   000002D2   0x0002             MOVS     R2,R0
   \   000002D4   0x2104             MOVS     R1,#+4
   \   000002D6   0x2064             MOVS     R0,#+100
   \   000002D8   0x.... 0x....      BL       LCD_P6x8Num
   2325                          break;
   \   000002DC   0xE034             B.N      ??LCD_change_value_12
   2326                  case 5:lcd_bow_speed += i;
   \                     ??LCD_change_value_19:
   \   000002DE   0x.... 0x....      LDR.W    R0,??DataTable23_10
   \   000002E2   0x8800             LDRH     R0,[R0, #+0]
   \   000002E4   0x1830             ADDS     R0,R6,R0
   \   000002E6   0x.... 0x....      LDR.W    R1,??DataTable23_10
   \   000002EA   0x8008             STRH     R0,[R1, #+0]
   2327                          LCD_P6x8Cha(0,5,'*'); 
   \   000002EC   0x222A             MOVS     R2,#+42
   \   000002EE   0x2105             MOVS     R1,#+5
   \   000002F0   0x2000             MOVS     R0,#+0
   \   000002F2   0x.... 0x....      BL       LCD_P6x8Cha
   2328                          LCD_CLS_ROW(100,5);
   \   000002F6   0x2105             MOVS     R1,#+5
   \   000002F8   0x2064             MOVS     R0,#+100
   \   000002FA   0x.... 0x....      BL       LCD_CLS_ROW
   2329                          LCD_P6x8Num(100,5,lcd_bow_speed);
   \   000002FE   0x.... 0x....      LDR.W    R0,??DataTable23_10
   \   00000302   0x8800             LDRH     R0,[R0, #+0]
   \   00000304   0x.... 0x....      BL       __aeabi_ui2f
   \   00000308   0x0002             MOVS     R2,R0
   \   0000030A   0x2105             MOVS     R1,#+5
   \   0000030C   0x2064             MOVS     R0,#+100
   \   0000030E   0x.... 0x....      BL       LCD_P6x8Num
   2330                          break;
   \   00000312   0xE019             B.N      ??LCD_change_value_12
   2331                 case 6:lcd_straight_speed_ed += i;
   \                     ??LCD_change_value_18:
   \   00000314   0x.... 0x....      LDR.W    R0,??DataTable23_11
   \   00000318   0x8800             LDRH     R0,[R0, #+0]
   \   0000031A   0x1830             ADDS     R0,R6,R0
   \   0000031C   0x.... 0x....      LDR.W    R1,??DataTable23_11
   \   00000320   0x8008             STRH     R0,[R1, #+0]
   2332                          LCD_P6x8Cha(0,6,'*'); 
   \   00000322   0x222A             MOVS     R2,#+42
   \   00000324   0x2106             MOVS     R1,#+6
   \   00000326   0x2000             MOVS     R0,#+0
   \   00000328   0x.... 0x....      BL       LCD_P6x8Cha
   2333                          LCD_CLS_ROW(100,6);
   \   0000032C   0x2106             MOVS     R1,#+6
   \   0000032E   0x2064             MOVS     R0,#+100
   \   00000330   0x.... 0x....      BL       LCD_CLS_ROW
   2334                          LCD_P6x8Num(100,6,lcd_straight_speed_ed);
   \   00000334   0x.... 0x....      LDR.W    R0,??DataTable23_11
   \   00000338   0x8800             LDRH     R0,[R0, #+0]
   \   0000033A   0x.... 0x....      BL       __aeabi_ui2f
   \   0000033E   0x0002             MOVS     R2,R0
   \   00000340   0x2106             MOVS     R1,#+6
   \   00000342   0x2064             MOVS     R0,#+100
   \   00000344   0x.... 0x....      BL       LCD_P6x8Num
   2335                          break;
   2336          
   2337                    }
   2338               }   
   2339          }
   \                     ??LCD_change_value_12:
   \   00000348   0xBD70             POP      {R4-R6,PC}       ;; return
   2340          
   2341          
   2342          //-------------------------------------定义输入输出端口---------------------------------------------------//
   2343          

   \                                 In section .text, align 2, keep-with-next
   2344          void PORT_Init(void)
   2345          { 
   2346              
   2347              PORTB_PCR20 = PORT_PCR_MUX(1) | PORT_PCR_PE_MASK |  PORT_PCR_PS_MASK;//PTC1引脚设置为GPIO模式 上拉
   \                     PORT_Init:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable23_12  ;; 0x4004a050
   \   00000004   0xF240 0x1103      MOVW     R1,#+259
   \   00000008   0x6001             STR      R1,[R0, #+0]
   2348              
   2349              PORTE_PCR0 = PORT_PCR_MUX(1)| PORT_PCR_PE_MASK |  PORT_PCR_PS_MASK;//E4引脚设置为GPIO模式
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable23_13  ;; 0x4004d000
   \   0000000E   0xF240 0x1103      MOVW     R1,#+259
   \   00000012   0x6001             STR      R1,[R0, #+0]
   2350              PORTE_PCR1 = PORT_PCR_MUX(1)| PORT_PCR_PE_MASK |  PORT_PCR_PS_MASK;//E5引脚设置为GPIO模式
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable23_14  ;; 0x4004d004
   \   00000018   0xF240 0x1103      MOVW     R1,#+259
   \   0000001C   0x6001             STR      R1,[R0, #+0]
   2351              PORTE_PCR2 = PORT_PCR_MUX(1)| PORT_PCR_PE_MASK |  PORT_PCR_PS_MASK;//E6引脚设置为GPIO模式
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable23_15  ;; 0x4004d008
   \   00000022   0xF240 0x1103      MOVW     R1,#+259
   \   00000026   0x6001             STR      R1,[R0, #+0]
   2352              PORTE_PCR3 = PORT_PCR_MUX(1)| PORT_PCR_PE_MASK |  PORT_PCR_PS_MASK;//E7引脚设置为GPIO模式
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable23_16  ;; 0x4004d00c
   \   0000002C   0xF240 0x1103      MOVW     R1,#+259
   \   00000030   0x6001             STR      R1,[R0, #+0]
   2353              PORTE_PCR4 = PORT_PCR_MUX(1)| PORT_PCR_PE_MASK |  PORT_PCR_PS_MASK;//E8引脚设置为GPIO模式
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable23_17  ;; 0x4004d010
   \   00000036   0xF240 0x1103      MOVW     R1,#+259
   \   0000003A   0x6001             STR      R1,[R0, #+0]
   2354              PORTE_PCR5 = PORT_PCR_MUX(1)| PORT_PCR_PE_MASK |  PORT_PCR_PS_MASK;//E9引脚设置为GPIO模式
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable23_18  ;; 0x4004d014
   \   00000040   0xF240 0x1103      MOVW     R1,#+259
   \   00000044   0x6001             STR      R1,[R0, #+0]
   2355              PORTE_PCR6 = PORT_PCR_MUX(1)| PORT_PCR_PE_MASK |  PORT_PCR_PS_MASK;//E10引脚设置为GPIO模式
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable23_19  ;; 0x4004d018
   \   0000004A   0xF240 0x1103      MOVW     R1,#+259
   \   0000004E   0x6001             STR      R1,[R0, #+0]
   2356              PORTE_PCR7 = PORT_PCR_MUX(1)| PORT_PCR_PE_MASK |  PORT_PCR_PS_MASK;//E11引脚设置为GPIO模式
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable23_20  ;; 0x4004d01c
   \   00000054   0xF240 0x1103      MOVW     R1,#+259
   \   00000058   0x6001             STR      R1,[R0, #+0]
   2357              
   2358                  
   2359                  GPIOE_PDDR = 0xffffff00;  //E0~E7设置为输入口 
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable23_21  ;; 0x400ff114
   \   0000005E   0xF07F 0x01FF      MVNS     R1,#+255
   \   00000062   0x6001             STR      R1,[R0, #+0]
   2360          
   2361                  GPIOB_PDDR = 0xffefffff;  //PTC1设置为输入
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable23_22  ;; 0x400ff054
   \   00000068   0xF47F 0x1180      MVNS     R1,#+1048576
   \   0000006C   0x6001             STR      R1,[R0, #+0]
   2362                  
   2363                  
   2364                   PORTD_PCR6 = PORT_PCR_MUX(1)| PORT_PCR_PE_MASK |  PORT_PCR_PS_MASK;//D6引脚设置为GPIO模式   //拨码开关
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable23_23  ;; 0x4004c018
   \   00000072   0xF240 0x1103      MOVW     R1,#+259
   \   00000076   0x6001             STR      R1,[R0, #+0]
   2365                   PORTD_PCR7 = PORT_PCR_MUX(1)| PORT_PCR_PE_MASK |  PORT_PCR_PS_MASK;//D7引脚设置为GPIO模式
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable23_24  ;; 0x4004c01c
   \   0000007C   0xF240 0x1103      MOVW     R1,#+259
   \   00000080   0x6001             STR      R1,[R0, #+0]
   2366                   PORTD_PCR8 = PORT_PCR_MUX(1)| PORT_PCR_PE_MASK |  PORT_PCR_PS_MASK;//D8引脚设置为GPIO模式
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable23_25  ;; 0x4004c020
   \   00000086   0xF240 0x1103      MOVW     R1,#+259
   \   0000008A   0x6001             STR      R1,[R0, #+0]
   2367                   PORTD_PCR9 = PORT_PCR_MUX(1)| PORT_PCR_PE_MASK |  PORT_PCR_PS_MASK;//D9引脚设置为GPIO模式
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable23_26  ;; 0x4004c024
   \   00000090   0xF240 0x1103      MOVW     R1,#+259
   \   00000094   0x6001             STR      R1,[R0, #+0]
   2368                   PORTD_PCR10 = PORT_PCR_MUX(1)| PORT_PCR_PE_MASK |  PORT_PCR_PS_MASK;//D10引脚设置为GPIO模式
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable23_27  ;; 0x4004c028
   \   0000009A   0xF240 0x1103      MOVW     R1,#+259
   \   0000009E   0x6001             STR      R1,[R0, #+0]
   2369                   PORTD_PCR11 = PORT_PCR_MUX(1)| PORT_PCR_PE_MASK |  PORT_PCR_PS_MASK;//D11引脚设置为GPIO模式
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable23_28  ;; 0x4004c02c
   \   000000A4   0xF240 0x1103      MOVW     R1,#+259
   \   000000A8   0x6001             STR      R1,[R0, #+0]
   2370                   PORTD_PCR12 = PORT_PCR_MUX(1)| PORT_PCR_PE_MASK |  PORT_PCR_PS_MASK;//D12引脚设置为GPIO模式
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable23_29  ;; 0x4004c030
   \   000000AE   0xF240 0x1103      MOVW     R1,#+259
   \   000000B2   0x6001             STR      R1,[R0, #+0]
   2371                   PORTD_PCR13 = PORT_PCR_MUX(1)| PORT_PCR_PE_MASK |  PORT_PCR_PS_MASK;//D13引脚设置为GPIO模式 
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable23_30  ;; 0x4004c034
   \   000000B8   0xF240 0x1103      MOVW     R1,#+259
   \   000000BC   0x6001             STR      R1,[R0, #+0]
   2372             
   2373                   GPIOD_PDDR = 0xffffc03f;       
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable23_31  ;; 0x400ff0d4
   \   000000C2   0xF47F 0x517F      MVNS     R1,#+16320
   \   000000C6   0x6001             STR      R1,[R0, #+0]
   2374          }
   \   000000C8   0x4770             BX       LR               ;; return
   2375          
   2376          //---------------------------------------------------主函数------------------------------------------------//

   \                                 In section .text, align 4, keep-with-next
   2377          void main(void)
   2378          {
   \                     main:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   2379             uint16 i=0,j=0;
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x2500             MOVS     R5,#+0
   2380             lcd_debug = 1;
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable23_32
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
   2381              DisableInterrupts;
   \   0000000E   0xB672             CPSID i         
   2382              pllinit180M(); 
   \   00000010   0x.... 0x....      BL       pllinit180M
   2383              
   2384              LCD_IO_Init();
   \   00000014   0x.... 0x....      BL       LCD_IO_Init
   2385              LCD_Init(); 
   \   00000018   0x.... 0x....      BL       LCD_Init
   2386              //单片机上电后，检测拨码和按键，检测完毕设置后相应的参数后，退出
   2387          
   2388              PORT_Init();              //端口初始化
   \   0000001C   0x.... 0x....      BL       PORT_Init
   2389              hw_FTM_init();
   \   00000020   0x.... 0x....      BL       hw_FTM_init
   2390              UART0_Init();             //串口初始化   
   \   00000024   0x.... 0x....      BL       UART0_Init
   2391              LPTMR_Init();             //脉冲计数器初始化
   \   00000028   0x.... 0x....      BL       LPTMR_Init
   2392              EXIT_Init();   
   \   0000002C   0x.... 0x....      BL       EXIT_Init
   \   00000030   0xE005             B.N      ??main_0
   2393              while(lcd_debug)
   2394              { 
   2395                pre_show();
   \                     ??main_1:
   \   00000032   0x.... 0x....      BL       pre_show
   2396                scan_boma();
   \   00000036   0x.... 0x....      BL       scan_boma
   2397                Keyscan();  //检测拨码的时间过长，所以检测拨码放在while之前，而且检测完后，将其关闭，让车子跑动
   \   0000003A   0x.... 0x....      BL       Keyscan
   2398              } 
   \                     ??main_0:
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable23_32
   \   00000042   0x7800             LDRB     R0,[R0, #+0]
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD1F4             BNE.N    ??main_1
   2399              lcd_page_num = 0;
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x7001             STRB     R1,[R0, #+0]
   2400              Delay_MS(40000000);   //起跑延迟 uint8 ch=3;
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable23_33  ;; 0x2625a00
   \   00000054   0x.... 0x....      BL       Delay_MS
   2401              Delay_MS(40000000);  
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable23_33  ;; 0x2625a00
   \   0000005C   0x.... 0x....      BL       Delay_MS
   2402              OddEvenStatus = ODD_EVEN_STATUS;
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable23_34  ;; 0x400ff050
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0x0D00             LSRS     R0,R0,#+20
   \   00000068   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable23_35
   \   00000070   0x7008             STRB     R0,[R1, #+0]
   2403              VIF = VIF_START;
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable23_36
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0x7001             STRB     R1,[R0, #+0]
   2404              Initial();
   \   0000007A   0x.... 0x....      BL       Initial
   2405              
   2406              enable_irq(45);           //打开串口中断
   \   0000007E   0x202D             MOVS     R0,#+45
   \   00000080   0x.... 0x....      BL       enable_irq
   2407              enable_irq(88);           //打开行中断 
   \   00000084   0x2058             MOVS     R0,#+88
   \   00000086   0x.... 0x....      BL       enable_irq
   2408              EnableInterrupts;
   \   0000008A   0xB662             CPSIE i         
   2409          
   2410              
   2411              while(1)
   2412              {      
   2413                 if(ImageReady)                                         //图像准备好，再决策
   \                     ??main_2:
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable23_37
   \   00000090   0x7800             LDRB     R0,[R0, #+0]
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xD0FA             BEQ.N    ??main_2
   2414                 {   
   2415                   for(i = 0;i< ROW ; i++)
   \   00000096   0x2400             MOVS     R4,#+0
   \   00000098   0xE000             B.N      ??main_3
   \                     ??main_4:
   \   0000009A   0x1C64             ADDS     R4,R4,#+1
   \                     ??main_3:
   \   0000009C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000009E   0x2C41             CMP      R4,#+65
   \   000000A0   0xD225             BCS.N    ??main_5
   2416                     for(j= 0;j<COLUMN;j++)
   \   000000A2   0x2500             MOVS     R5,#+0
   \   000000A4   0xE009             B.N      ??main_6
   2417                     {
   2418                       if(VideoImage2[i][j] > WHITE_BLACK_OT)
   2419                       {
   2420                           VideoImage1[i][j] = WHITE;
   2421                       }
   2422                       else
   2423                       {
   2424                          VideoImage1[i][j] =BLACK;
   \                     ??main_7:
   \   000000A6   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000A8   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000AA   0x209F             MOVS     R0,#+159
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable23_38
   \   000000B0   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   000000B4   0x210A             MOVS     R1,#+10
   \   000000B6   0x5429             STRB     R1,[R5, R0]
   2425                       }
   \                     ??main_8:
   \   000000B8   0x1C6D             ADDS     R5,R5,#+1
   \                     ??main_6:
   \   000000BA   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000BC   0x2D9F             CMP      R5,#+159
   \   000000BE   0xD2EC             BCS.N    ??main_4
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable23_4
   \   000000C4   0x7800             LDRB     R0,[R0, #+0]
   \   000000C6   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000C8   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000CA   0x219F             MOVS     R1,#+159
   \   000000CC   0x.... 0x....      LDR.W    R2,??DataTable23_39
   \   000000D0   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   000000D4   0x5C69             LDRB     R1,[R5, R1]
   \   000000D6   0x4288             CMP      R0,R1
   \   000000D8   0xD2E5             BCS.N    ??main_7
   \   000000DA   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000DC   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000DE   0x209F             MOVS     R0,#+159
   \   000000E0   0x.... 0x....      LDR.W    R1,??DataTable23_38
   \   000000E4   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   000000E8   0x21FF             MOVS     R1,#+255
   \   000000EA   0x5429             STRB     R1,[R5, R0]
   \   000000EC   0xE7E4             B.N      ??main_8
   2426                     }
   2427                   
   2428                   if(start_stop_en == 0 && start_stop_cs ==1)
   \                     ??main_5:
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable23_40
   \   000000F2   0x7800             LDRB     R0,[R0, #+0]
   \   000000F4   0x....             LDR.N    R1,??DataTable21
   \   000000F6   0x7809             LDRB     R1,[R1, #+0]
   \   000000F8   0xF091 0x0101      EORS     R1,R1,#0x1
   \   000000FC   0x4308             ORRS     R0,R1,R0
   \   000000FE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000100   0x2800             CMP      R0,#+0
   \   00000102   0xD11A             BNE.N    ??main_9
   2429                   {
   2430                     start_stop_count++;
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable23_41
   \   00000108   0x6800             LDR      R0,[R0, #+0]
   \   0000010A   0x1C40             ADDS     R0,R0,#+1
   \   0000010C   0x.... 0x....      LDR.W    R1,??DataTable23_41
   \   00000110   0x6008             STR      R0,[R1, #+0]
   2431                     if(start_stop_count > 50*stop_pit_count)  //延时6s检测起跑线300
   \   00000112   0x.... 0x....      LDR.W    R0,??DataTable23_42
   \   00000116   0x6800             LDR      R0,[R0, #+0]
   \   00000118   0x2132             MOVS     R1,#+50
   \   0000011A   0x4348             MULS     R0,R1,R0
   \   0000011C   0x.... 0x....      LDR.W    R1,??DataTable23_41
   \   00000120   0x6809             LDR      R1,[R1, #+0]
   \   00000122   0x4288             CMP      R0,R1
   \   00000124   0xD209             BCS.N    ??main_9
   2432                     {
   2433                       start_stop_en = 1;
   \   00000126   0x.... 0x....      LDR.W    R0,??DataTable23_40
   \   0000012A   0x2101             MOVS     R1,#+1
   \   0000012C   0x7001             STRB     R1,[R0, #+0]
   2434                       start_stop_count = stop_pit_count;//300
   \   0000012E   0x.... 0x....      LDR.W    R0,??DataTable23_41
   \   00000132   0x.... 0x....      LDR.W    R1,??DataTable23_42
   \   00000136   0x6809             LDR      R1,[R1, #+0]
   \   00000138   0x6001             STR      R1,[R0, #+0]
   2435                     }
   2436                   }
   2437                   //用于测试赛道。
   2438                   if(test_run == 0)
   \                     ??main_9:
   \   0000013A   0x.... 0x....      LDR.W    R0,??DataTable23_43
   \   0000013E   0x7800             LDRB     R0,[R0, #+0]
   \   00000140   0x2800             CMP      R0,#+0
   \   00000142   0xD113             BNE.N    ??main_10
   2439                   {
   2440                     car_test_run++;
   \   00000144   0x.... 0x....      LDR.W    R0,??DataTable23_44
   \   00000148   0x8800             LDRH     R0,[R0, #+0]
   \   0000014A   0x1C40             ADDS     R0,R0,#+1
   \   0000014C   0x.... 0x....      LDR.W    R1,??DataTable23_44
   \   00000150   0x8008             STRH     R0,[R1, #+0]
   2441                     if(car_test_run >= 200)
   \   00000152   0x.... 0x....      LDR.W    R0,??DataTable23_44
   \   00000156   0x8800             LDRH     R0,[R0, #+0]
   \   00000158   0x28C8             CMP      R0,#+200
   \   0000015A   0xD307             BCC.N    ??main_10
   2442                     {
   2443                       car_test_run = 200;
   \   0000015C   0x.... 0x....      LDR.W    R0,??DataTable23_44
   \   00000160   0x21C8             MOVS     R1,#+200
   \   00000162   0x8001             STRH     R1,[R0, #+0]
   2444                       stopflag=1;
   \   00000164   0x.... 0x....      LDR.W    R0,??DataTable23_45
   \   00000168   0x2101             MOVS     R1,#+1
   \   0000016A   0x7001             STRB     R1,[R0, #+0]
   2445                     }
   2446                   }
   2447                    Search_WhiteBase();
   \                     ??main_10:
   \   0000016C   0x.... 0x....      BL       Search_WhiteBase
   2448                  if(find_whitebase_flag == 1)  //这个条件的加入，有两点好处。1 防止没有找到基准行的时候溢出， 2、当没有找到基准行的时候保持上一场的数据
   \   00000170   0x.... 0x....      LDR.W    R0,??DataTable23_46
   \   00000174   0x7800             LDRB     R0,[R0, #+0]
   \   00000176   0x2800             CMP      R0,#+0
   \   00000178   0xD022             BEQ.N    ??main_11
   2449                  {
   2450                    Search_BlackEdge();
   \   0000017A   0x.... 0x....      BL       Search_BlackEdge
   2451                    Deal_BlackEdge();
   \   0000017E   0x.... 0x....      BL       Deal_BlackEdge
   2452                    get_line_information();
   \   00000182   0x.... 0x....      BL       get_line_information
   2453                    if(control_top_whiteline >=50 && control_top_whiteline <ROW-1)  //当车子处于弯道当中的时候，不进行线性相关的计算
   \   00000186   0x....             LDR.N    R0,??DataTable21_2
   \   00000188   0x8800             LDRH     R0,[R0, #+0]
   \   0000018A   0x3832             SUBS     R0,R0,#+50
   \   0000018C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000018E   0x280E             CMP      R0,#+14
   \   00000190   0xD211             BCS.N    ??main_12
   2454                    {
   2455                      linear_factor=get_linear_factor(bottom_whitebase,control_top_whiteline - 10,center_linear_average);
   \   00000192   0x.... 0x....      LDR.W    R0,??DataTable23_47
   \   00000196   0x6802             LDR      R2,[R0, #+0]
   \   00000198   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000019A   0x....             LDR.N    R0,??DataTable21_2
   \   0000019C   0x8800             LDRH     R0,[R0, #+0]
   \   0000019E   0xF1B0 0x010A      SUBS     R1,R0,#+10
   \   000001A2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001A4   0x.... 0x....      LDR.W    R0,??DataTable23_48
   \   000001A8   0x7800             LDRB     R0,[R0, #+0]
   \   000001AA   0x.... 0x....      BL       get_linear_factor
   \   000001AE   0x.... 0x....      LDR.W    R1,??DataTable23_49
   \   000001B2   0x6008             STR      R0,[R1, #+0]
   \   000001B4   0xE004             B.N      ??main_11
   2456                    }
   2457                    else
   2458                    {
   2459                      linear_factor = 0.5;
   \                     ??main_12:
   \   000001B6   0x.... 0x....      LDR.W    R0,??DataTable23_49
   \   000001BA   0xF05F 0x517C      MOVS     R1,#+1056964608
   \   000001BE   0x6001             STR      R1,[R0, #+0]
   2460                    }
   2461                  }
   2462                  if(start_stop_en == 1 )  //start_stop_en
   \                     ??main_11:
   \   000001C0   0x.... 0x....      LDR.W    R0,??DataTable23_40
   \   000001C4   0x7800             LDRB     R0,[R0, #+0]
   \   000001C6   0x2800             CMP      R0,#+0
   \   000001C8   0xD001             BEQ.N    ??main_13
   2463                  {
   2464                    check_start_stop_line();
   \   000001CA   0x.... 0x....      BL       check_start_stop_line
   2465                  }
   2466                    Control();
   \                     ??main_13:
   \   000001CE   0x.... 0x....      BL       Control
   2467                    redraw();//刷新显示屏   
   \   000001D2   0x.... 0x....      BL       redraw
   2468                    SCI0_send_mesage(); 
   \   000001D6   0x.... 0x....      BL       SCI0_send_mesage
   2469                    while(ImageReady);
   \                     ??main_14:
   \   000001DA   0x.... 0x....      LDR.W    R0,??DataTable23_37
   \   000001DE   0x7800             LDRB     R0,[R0, #+0]
   \   000001E0   0x2800             CMP      R0,#+0
   \   000001E2   0xD1FA             BNE.N    ??main_14
   \   000001E4   0xE752             B.N      ??main_2
   2470                 }
   2471              }  
   2472             
   2473          }
   2474            
   2475          
   2476          //-----------------------------中断函数-----------------------------//

   \                                 In section .text, align 4, keep-with-next
   2477          void uart0_isr(void)          //串口中断
   2478          {    
   2479              DisableInterrupts;   // 关总中断也可以，但在有更高级中断存在里不推荐
   \                     uart0_isr:
   \   00000000   0xB672             CPSID i         
   2480                uint8 ch;
   2481               while(!(UART0_S1&UART_S1_RDRF_MASK));
   \                     ??uart0_isr_0:
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable23_50  ;; 0x4006a004
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x0680             LSLS     R0,R0,#+26
   \   0000000A   0xD5FA             BPL.N    ??uart0_isr_0
   2482                ch = UART0_D;
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable23_51  ;; 0x4006a007
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   2483                if(ch == '1')     //发送的是原始图像
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x2831             CMP      R0,#+49
   \   00000016   0xD104             BNE.N    ??uart0_isr_1
   2484                  send_mes = 1; 
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable23_52
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x7001             STRB     R1,[R0, #+0]
   \   00000020   0xE029             B.N      ??uart0_isr_2
   2485                else if(ch == '2')  //发送图像的变化趋势
   \                     ??uart0_isr_1:
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x2832             CMP      R0,#+50
   \   00000026   0xD104             BNE.N    ??uart0_isr_3
   2486                  send_mes = 2;
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable23_52
   \   0000002C   0x2102             MOVS     R1,#+2
   \   0000002E   0x7001             STRB     R1,[R0, #+0]
   \   00000030   0xE021             B.N      ??uart0_isr_2
   2487                else if(ch == '3')  //速度图像
   \                     ??uart0_isr_3:
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x2833             CMP      R0,#+51
   \   00000036   0xD104             BNE.N    ??uart0_isr_4
   2488                  send_mes = 3;
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable23_52
   \   0000003C   0x2103             MOVS     R1,#+3
   \   0000003E   0x7001             STRB     R1,[R0, #+0]
   \   00000040   0xE019             B.N      ??uart0_isr_2
   2489                else if (ch >= 64 && ch <= 65)   //变档调速
   \                     ??uart0_isr_4:
   \   00000042   0xF1B0 0x0140      SUBS     R1,R0,#+64
   \   00000046   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000048   0x2902             CMP      R1,#+2
   \   0000004A   0xD214             BCS.N    ??uart0_isr_2
   2490                {   
   2491                    switch(ch - 64)  //变档调速
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0x3840             SUBS     R0,R0,#+64
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD002             BEQ.N    ??uart0_isr_5
   \   00000054   0x2801             CMP      R0,#+1
   \   00000056   0xD005             BEQ.N    ??uart0_isr_6
   \   00000058   0xE009             B.N      ??uart0_isr_7
   2492                    {
   2493                    case 0:   send_mes='s';break;//stop停车
   \                     ??uart0_isr_5:
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable23_52
   \   0000005E   0x2173             MOVS     R1,#+115
   \   00000060   0x7001             STRB     R1,[R0, #+0]
   \   00000062   0xE008             B.N      ??uart0_isr_2
   2494                    case 1:   send_mes='p';break;
   \                     ??uart0_isr_6:
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable23_52
   \   00000068   0x2170             MOVS     R1,#+112
   \   0000006A   0x7001             STRB     R1,[R0, #+0]
   \   0000006C   0xE003             B.N      ??uart0_isr_2
   2495                    default: speed = 100;
   \                     ??uart0_isr_7:
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable23_53
   \   00000072   0x2164             MOVS     R1,#+100
   \   00000074   0x8001             STRH     R1,[R0, #+0]
   2496                    }
   2497                }
   2498          
   2499              EnableInterrupts;
   \                     ??uart0_isr_2:
   \   00000076   0xB662             CPSIE i         
   2500          }
   \   00000078   0x4770             BX       LR               ;; return
   2501          
   2502          //------------------------------------图像采集中断----------------------------------------//

   \                                 In section .text, align 4, keep-with-next
   2503          void PTB_isr(void)//对于场中断20ms和行中断63us都是摄像头的固有的频率，不需要用软件去定时
   2504          {
   \                     PTB_isr:
   \   00000000   0xB510             PUSH     {R4,LR}
   2505            /*
   2506                  图像采集的行数为 27 30 33 36 39 42 45 48 51 54 57 60 63 
   2507                                   66 69 72 75 78 81 84 87 90 93 96 99 102 
   2508                                   105 108 111 114 117 120 123 126 129 132 135 138 141
   2509                                   144 147 150 153 156 159 162 165 168 171 174 177 180 
   2510                                   183 186 189 192 195 198 201 204 207 210 213 216 219 
   2511                           
   2512                  */ 
   2513              uint16 i;  
   2514              
   2515            
   2516             PORTB_PCR22|=PORT_PCR_ISF_MASK;  //清除中断标志位
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable23_54  ;; 0x4004a058
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable23_54  ;; 0x4004a058
   \   00000010   0x6008             STR      R0,[R1, #+0]
   2517              if (VIF == VIF_START)                              //开始采样标志
   \   00000012   0x....             LDR.N    R0,??DataTable23_36
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD122             BNE.N    ??PTB_isr_0
   2518                {
   2519                  LineCount++;
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable23_55
   \   0000001E   0x8800             LDRH     R0,[R0, #+0]
   \   00000020   0x1C40             ADDS     R0,R0,#+1
   \   00000022   0x....             LDR.N    R1,??DataTable23_55
   \   00000024   0x8008             STRH     R0,[R1, #+0]
   2520                  if(OddEvenStatus != ODD_EVEN_STATUS)
   \   00000026   0x....             LDR.N    R0,??DataTable23_35
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x....             LDR.N    R1,??DataTable23_34  ;; 0x400ff050
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0x0D09             LSRS     R1,R1,#+20
   \   00000030   0xF011 0x0101      ANDS     R1,R1,#0x1
   \   00000034   0x4288             CMP      R0,R1
   \   00000036   0xD061             BEQ.N    ??PTB_isr_1
   2521                  {
   2522                    OddEvenStatus = ODD_EVEN_STATUS;	//奇偶场标志
   \   00000038   0x....             LDR.N    R0,??DataTable23_34  ;; 0x400ff050
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x0D00             LSRS     R0,R0,#+20
   \   0000003E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000042   0x....             LDR.N    R1,??DataTable23_35
   \   00000044   0x7008             STRB     R0,[R1, #+0]
   2523                    VIF = VIF_WAITSAMPLE;   		//下一个状态为等待采样
   \   00000046   0x....             LDR.N    R0,??DataTable23_36
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x7001             STRB     R1,[R0, #+0]
   2524                    VideoImageLine = 0;
   \   0000004C   0x....             LDR.N    R0,??DataTable23_56
   \   0000004E   0x2100             MOVS     R1,#+0
   \   00000050   0x7001             STRB     R1,[R0, #+0]
   2525                    LineCount = 0;
   \   00000052   0x....             LDR.N    R0,??DataTable23_55
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0x8001             STRH     R1,[R0, #+0]
   2526                    ImageReady = 0; 
   \   00000058   0x....             LDR.N    R0,??DataTable23_37
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0x7001             STRB     R1,[R0, #+0]
   \   0000005E   0xE04D             B.N      ??PTB_isr_1
   2527                  }
   2528                }
   2529              else if (VIF == VIF_WAITSAMPLE)                 //等待采样,此时略去VIDEO_START_LINE行
   \                     ??PTB_isr_0:
   \   00000060   0x....             LDR.N    R0,??DataTable23_36
   \   00000062   0x7800             LDRB     R0,[R0, #+0]
   \   00000064   0x2801             CMP      R0,#+1
   \   00000066   0xD10C             BNE.N    ??PTB_isr_2
   2530                {
   2531                    LineCount++;
   \   00000068   0x....             LDR.N    R0,??DataTable23_55
   \   0000006A   0x8800             LDRH     R0,[R0, #+0]
   \   0000006C   0x1C40             ADDS     R0,R0,#+1
   \   0000006E   0x....             LDR.N    R1,??DataTable23_55
   \   00000070   0x8008             STRH     R0,[R1, #+0]
   2532                    if (LineCount >= VIDEO_START_LINE)
   \   00000072   0x....             LDR.N    R0,??DataTable23_55
   \   00000074   0x8800             LDRH     R0,[R0, #+0]
   \   00000076   0x281B             CMP      R0,#+27
   \   00000078   0xD340             BCC.N    ??PTB_isr_1
   2533                    {
   2534                        VIF = VIF_SAMPLELINE;                 //下一个状态为采样状态
   \   0000007A   0x....             LDR.N    R0,??DataTable23_36
   \   0000007C   0x2102             MOVS     R1,#+2
   \   0000007E   0x7001             STRB     R1,[R0, #+0]
   \   00000080   0xE03C             B.N      ??PTB_isr_1
   2535                    }   	
   2536                }
   2537              else if (VIF == VIF_SAMPLELINE)              //开始采样
   \                     ??PTB_isr_2:
   \   00000082   0x....             LDR.N    R0,??DataTable23_36
   \   00000084   0x7800             LDRB     R0,[R0, #+0]
   \   00000086   0x2802             CMP      R0,#+2
   \   00000088   0xD138             BNE.N    ??PTB_isr_1
   2538                {
   2539                    LineCount++;
   \   0000008A   0x....             LDR.N    R0,??DataTable23_55
   \   0000008C   0x8800             LDRH     R0,[R0, #+0]
   \   0000008E   0x1C40             ADDS     R0,R0,#+1
   \   00000090   0x....             LDR.N    R1,??DataTable23_55
   \   00000092   0x8008             STRH     R0,[R1, #+0]
   2540                    if (LineCount % 3== 0)                //每隔一行采一行
   \   00000094   0x....             LDR.N    R0,??DataTable23_55
   \   00000096   0x8800             LDRH     R0,[R0, #+0]
   \   00000098   0x2103             MOVS     R1,#+3
   \   0000009A   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000009E   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   000000A2   0x2800             CMP      R0,#+0
   \   000000A4   0xD120             BNE.N    ??PTB_isr_3
   2541                    {
   2542                        for (i = 0; i < COLUMN+PIANYI ; i++)        //每行扫描COLUMN+PIANYI个点(其中PIANYI个点需要被剔除掉，因为是行消隐点)
   \   000000A6   0x2400             MOVS     R4,#+0
   \   000000A8   0xE014             B.N      ??PTB_isr_4
   2543                       {
   2544                            if (i >=PIANYI )
   \                     ??PTB_isr_5:
   \   000000AA   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000AC   0x2C96             CMP      R4,#+150
   \   000000AE   0xD310             BCC.N    ??PTB_isr_6
   2545                             {//采集的第一个点的坐标在真实的世界里是右下角，所以在数组中存储在第一行的最后一个位置
   2546                               VideoImage2[VideoImageLine][i-PIANYI] = (uint8)(0x000000ff & GPIOE_PDIR);//将采集到的点直接放入到VideoImage2[][]中在init array（）中放到VideoImage1[][]中做处理
   \   000000B0   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000B2   0x....             LDR.N    R0,??DataTable23_56
   \   000000B4   0x7800             LDRB     R0,[R0, #+0]
   \   000000B6   0x219F             MOVS     R1,#+159
   \   000000B8   0x....             LDR.N    R2,??DataTable23_39
   \   000000BA   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   000000BE   0x1820             ADDS     R0,R4,R0
   \   000000C0   0x....             LDR.N    R1,??DataTable23_57  ;; 0x400ff110
   \   000000C2   0x6809             LDR      R1,[R1, #+0]
   \   000000C4   0xF800 0x1C96      STRB     R1,[R0, #-150]
   2547                                   Delay_MS(3); 
   \   000000C8   0x2003             MOVS     R0,#+3
   \   000000CA   0x.... 0x....      BL       Delay_MS
   2548                                  asm("nop");
   \   000000CE   0xBF00             nop              
   2549                                  asm("nop");//汇编延时
   \   000000D0   0xBF00             nop              
   2550                            }
   2551                        }
   \                     ??PTB_isr_6:
   \   000000D2   0x1C64             ADDS     R4,R4,#+1
   \                     ??PTB_isr_4:
   \   000000D4   0xF240 0x1035      MOVW     R0,#+309
   \   000000D8   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000DA   0x4284             CMP      R4,R0
   \   000000DC   0xD3E5             BCC.N    ??PTB_isr_5
   2552                       VideoImageLine++;
   \   000000DE   0x....             LDR.N    R0,??DataTable23_56
   \   000000E0   0x7800             LDRB     R0,[R0, #+0]
   \   000000E2   0x1C40             ADDS     R0,R0,#+1
   \   000000E4   0x....             LDR.N    R1,??DataTable23_56
   \   000000E6   0x7008             STRB     R0,[R1, #+0]
   2553                    }
   2554                    if (VideoImageLine == ROW)      //采集行数大于设定的行数
   \                     ??PTB_isr_3:
   \   000000E8   0x....             LDR.N    R0,??DataTable23_56
   \   000000EA   0x7800             LDRB     R0,[R0, #+0]
   \   000000EC   0x2841             CMP      R0,#+65
   \   000000EE   0xD105             BNE.N    ??PTB_isr_1
   2555                    {
   2556                        ImageReady = 1;           //图像准备好
   \   000000F0   0x....             LDR.N    R0,??DataTable23_37
   \   000000F2   0x2101             MOVS     R1,#+1
   \   000000F4   0x7001             STRB     R1,[R0, #+0]
   2557                        VIF = VIF_START;
   \   000000F6   0x....             LDR.N    R0,??DataTable23_36
   \   000000F8   0x2100             MOVS     R1,#+0
   \   000000FA   0x7001             STRB     R1,[R0, #+0]
   2558                    }
   2559                    
   2560               }
   2561              
   2562            /* if (start_stop_en = 1 && start_stop_cs ==1 && (delay_detective && ((left_tube1 || left_tube2) && (right_tube1 || right_tube2))))        //每行中断检测一次起跑线
   2563              {
   2564                stopflag = 1;
   2565              }
   2566              //加入光电管子对起跑线的检测。
   2567              */
   2568              
   2569              if (LineCount % 45 == 42)         //   7次  每隔45行控制一次  第一次控制位 43 88 133 178 223 268 313    
   \                     ??PTB_isr_1:
   \   000000FC   0x....             LDR.N    R0,??DataTable23_55
   \   000000FE   0x8800             LDRH     R0,[R0, #+0]
   \   00000100   0x212D             MOVS     R1,#+45
   \   00000102   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000106   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   0000010A   0x282A             CMP      R0,#+42
   \   0000010C   0xF040 0x80A6      BNE.W    ??PTB_isr_7
   2570              {
   2571                  speed_feedback = LPTMR0_CNR;                  //读编码器的值
   \   00000110   0x....             LDR.N    R0,??DataTable23_58
   \   00000112   0x....             LDR.N    R1,??DataTable23_59  ;; 0x4004000c
   \   00000114   0x6809             LDR      R1,[R1, #+0]
   \   00000116   0x8001             STRH     R1,[R0, #+0]
   2572                  LPTMR0_CSR &= ~LPTMR_CSR_TEN_MASK;
   \   00000118   0x....             LDR.N    R0,??DataTable23_60  ;; 0x40040000
   \   0000011A   0x6800             LDR      R0,[R0, #+0]
   \   0000011C   0x0840             LSRS     R0,R0,#+1
   \   0000011E   0x0040             LSLS     R0,R0,#+1
   \   00000120   0x....             LDR.N    R1,??DataTable23_60  ;; 0x40040000
   \   00000122   0x6008             STR      R0,[R1, #+0]
   2573                  LPTMR0_CSR |= LPTMR_CSR_TEN_MASK;                //溢出后继续计数
   \   00000124   0x....             LDR.N    R0,??DataTable23_60  ;; 0x40040000
   \   00000126   0x6800             LDR      R0,[R0, #+0]
   \   00000128   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000012C   0x....             LDR.N    R1,??DataTable23_60  ;; 0x40040000
   \   0000012E   0x6008             STR      R0,[R1, #+0]
   2574                  
   2575                 if(stopflag == 1 && speed_down_cnt>10) 
   \   00000130   0x....             LDR.N    R0,??DataTable23_45
   \   00000132   0x7800             LDRB     R0,[R0, #+0]
   \   00000134   0x2800             CMP      R0,#+0
   \   00000136   0xD027             BEQ.N    ??PTB_isr_8
   \   00000138   0x....             LDR.N    R0,??DataTable23_61
   \   0000013A   0x8800             LDRH     R0,[R0, #+0]
   \   0000013C   0x280B             CMP      R0,#+11
   \   0000013E   0xD323             BCC.N    ??PTB_isr_8
   2576                  {
   2577                      if( speed_feedback >= 18 )
   \   00000140   0x....             LDR.N    R0,??DataTable23_58
   \   00000142   0x8800             LDRH     R0,[R0, #+0]
   \   00000144   0x2812             CMP      R0,#+18
   \   00000146   0xD307             BCC.N    ??PTB_isr_9
   2578                        {
   2579                           FTM1_C0V=600;  //正转
   \   00000148   0x....             LDR.N    R0,??DataTable23_62  ;; 0x40039010
   \   0000014A   0xF44F 0x7116      MOV      R1,#+600
   \   0000014E   0x6001             STR      R1,[R0, #+0]
   2580                          FTM1_C1V=0;   //反转
   \   00000150   0x....             LDR.N    R0,??DataTable23_63  ;; 0x40039018
   \   00000152   0x2100             MOVS     R1,#+0
   \   00000154   0x6001             STR      R1,[R0, #+0]
   \   00000156   0xE00C             B.N      ??PTB_isr_10
   2581                        }
   2582                      else if(speed_feedback <18)
   \                     ??PTB_isr_9:
   \   00000158   0x....             LDR.N    R0,??DataTable23_58
   \   0000015A   0x8800             LDRH     R0,[R0, #+0]
   \   0000015C   0x2812             CMP      R0,#+18
   \   0000015E   0xD208             BCS.N    ??PTB_isr_10
   2583                        {
   2584                          FTM1_C0V=0;  //正转
   \   00000160   0x....             LDR.N    R0,??DataTable23_62  ;; 0x40039010
   \   00000162   0x2100             MOVS     R1,#+0
   \   00000164   0x6001             STR      R1,[R0, #+0]
   2585                          FTM1_C1V=0;   //反转
   \   00000166   0x....             LDR.N    R0,??DataTable23_63  ;; 0x40039018
   \   00000168   0x2100             MOVS     R1,#+0
   \   0000016A   0x6001             STR      R1,[R0, #+0]
   2586                          dead_stop = 1;
   \   0000016C   0x....             LDR.N    R0,??DataTable23_64
   \   0000016E   0x2101             MOVS     R1,#+1
   \   00000170   0x7001             STRB     R1,[R0, #+0]
   2587                        }
   2588                      
   2589                       if(dead_stop == 1)
   \                     ??PTB_isr_10:
   \   00000172   0x....             LDR.N    R0,??DataTable23_64
   \   00000174   0x7800             LDRB     R0,[R0, #+0]
   \   00000176   0x2800             CMP      R0,#+0
   \   00000178   0xD070             BEQ.N    ??PTB_isr_7
   2590                       {
   2591                          FTM1_C0V=0;  //正转
   \   0000017A   0x....             LDR.N    R0,??DataTable23_62  ;; 0x40039010
   \   0000017C   0x2100             MOVS     R1,#+0
   \   0000017E   0x6001             STR      R1,[R0, #+0]
   2592                          FTM1_C1V=0;   //反转
   \   00000180   0x....             LDR.N    R0,??DataTable23_63  ;; 0x40039018
   \   00000182   0x2100             MOVS     R1,#+0
   \   00000184   0x6001             STR      R1,[R0, #+0]
   \   00000186   0xE069             B.N      ??PTB_isr_7
   2593                       }
   2594                  }
   2595                  else
   2596                  {
   2597                   if(ramp_flag == 1)
   \                     ??PTB_isr_8:
   \   00000188   0x....             LDR.N    R0,??DataTable23_65
   \   0000018A   0x7800             LDRB     R0,[R0, #+0]
   \   0000018C   0x2800             CMP      R0,#+0
   \   0000018E   0xD003             BEQ.N    ??PTB_isr_11
   2598                     speed_except = ramp_speed;//26
   \   00000190   0x....             LDR.N    R0,??DataTable23_66
   \   00000192   0x....             LDR.N    R1,??DataTable23_67
   \   00000194   0x8809             LDRH     R1,[R1, #+0]
   \   00000196   0x8001             STRH     R1,[R0, #+0]
   2599                   
   2600                    speed_error = speed_except - speed_feedback;
   \                     ??PTB_isr_11:
   \   00000198   0x....             LDR.N    R0,??DataTable23_66
   \   0000019A   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000019E   0x....             LDR.N    R1,??DataTable23_58
   \   000001A0   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000001A4   0x1A40             SUBS     R0,R0,R1
   \   000001A6   0x....             LDR.N    R1,??DataTable23_68
   \   000001A8   0x8008             STRH     R0,[R1, #+0]
   2601                    speed +=(int16)((speed_p * (speed_error - speed_re_error) + speed_i * speed_error)/10 );//- speed_ed
   \   000001AA   0x....             LDR.N    R0,??DataTable23_53
   \   000001AC   0x8800             LDRH     R0,[R0, #+0]
   \   000001AE   0x....             LDR.N    R1,??DataTable23_69
   \   000001B0   0x7809             LDRB     R1,[R1, #+0]
   \   000001B2   0x....             LDR.N    R2,??DataTable23_68
   \   000001B4   0xF9B2 0x2000      LDRSH    R2,[R2, #+0]
   \   000001B8   0x....             LDR.N    R3,??DataTable23_70
   \   000001BA   0xF9B3 0x3000      LDRSH    R3,[R3, #+0]
   \   000001BE   0x1AD2             SUBS     R2,R2,R3
   \   000001C0   0x....             LDR.N    R3,??DataTable23_71
   \   000001C2   0x781B             LDRB     R3,[R3, #+0]
   \   000001C4   0x....             LDR.N    R4,??DataTable23_68
   \   000001C6   0xF9B4 0x4000      LDRSH    R4,[R4, #+0]
   \   000001CA   0x4363             MULS     R3,R4,R3
   \   000001CC   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   000001D0   0x220A             MOVS     R2,#+10
   \   000001D2   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   000001D6   0x1808             ADDS     R0,R1,R0
   \   000001D8   0x....             LDR.N    R1,??DataTable23_53
   \   000001DA   0x8008             STRH     R0,[R1, #+0]
   2602                   //speed=1000;
   2603                    if(speed > max_speed)
   \   000001DC   0x....             LDR.N    R0,??DataTable23_72
   \   000001DE   0x8800             LDRH     R0,[R0, #+0]
   \   000001E0   0x....             LDR.N    R1,??DataTable23_53
   \   000001E2   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000001E6   0x4288             CMP      R0,R1
   \   000001E8   0xDA04             BGE.N    ??PTB_isr_12
   2604                       speed = max_speed;
   \   000001EA   0x....             LDR.N    R0,??DataTable23_53
   \   000001EC   0x....             LDR.N    R1,??DataTable23_72
   \   000001EE   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000001F2   0x8001             STRH     R1,[R0, #+0]
   2605                    if(speed < min_speed)
   \                     ??PTB_isr_12:
   \   000001F4   0x....             LDR.N    R0,??DataTable23_53
   \   000001F6   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000001FA   0x....             LDR.N    R1,??DataTable23_73
   \   000001FC   0x8809             LDRH     R1,[R1, #+0]
   \   000001FE   0x4288             CMP      R0,R1
   \   00000200   0xDA04             BGE.N    ??PTB_isr_13
   2606                       speed = min_speed;
   \   00000202   0x....             LDR.N    R0,??DataTable23_53
   \   00000204   0x....             LDR.N    R1,??DataTable23_73
   \   00000206   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000020A   0x8001             STRH     R1,[R0, #+0]
   2607                    
   2608                    if( speed_error > 15)  //测试发现当反转较大，如700时，在减速的时候摄像头会出现拉黑的危险
   \                     ??PTB_isr_13:
   \   0000020C   0x....             LDR.N    R0,??DataTable23_68
   \   0000020E   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000212   0x2810             CMP      R0,#+16
   \   00000214   0xDB07             BLT.N    ??PTB_isr_14
   2609                    {
   2610                    //  FTM1_C0V = 800;
   2611                     // FTM1_C1V = 0;
   2612                    FTM1_C0V = 0;
   \   00000216   0x....             LDR.N    R0,??DataTable23_62  ;; 0x40039010
   \   00000218   0x2100             MOVS     R1,#+0
   \   0000021A   0x6001             STR      R1,[R0, #+0]
   2613                    FTM1_C1V = 780;
   \   0000021C   0x....             LDR.N    R0,??DataTable23_63  ;; 0x40039018
   \   0000021E   0xF44F 0x7143      MOV      R1,#+780
   \   00000222   0x6001             STR      R1,[R0, #+0]
   \   00000224   0xE016             B.N      ??PTB_isr_15
   2614                    }
   2615                   else if(speed_error < -13)  //用于反转控制
   \                     ??PTB_isr_14:
   \   00000226   0x....             LDR.N    R0,??DataTable23_68
   \   00000228   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000022C   0xF07F 0x010C      MVNS     R1,#+12
   \   00000230   0x4288             CMP      R0,R1
   \   00000232   0xDA07             BGE.N    ??PTB_isr_16
   2616                    {
   2617                      //FTM1_C0V=0;  //正转
   2618                     // FTM1_C1V=650;   //反转750
   2619                      FTM1_C0V=950;  //正转
   \   00000234   0x....             LDR.N    R0,??DataTable23_62  ;; 0x40039010
   \   00000236   0xF240 0x31B6      MOVW     R1,#+950
   \   0000023A   0x6001             STR      R1,[R0, #+0]
   2620                     FTM1_C1V=0;   //反转750
   \   0000023C   0x....             LDR.N    R0,??DataTable23_63  ;; 0x40039018
   \   0000023E   0x2100             MOVS     R1,#+0
   \   00000240   0x6001             STR      R1,[R0, #+0]
   \   00000242   0xE007             B.N      ??PTB_isr_15
   2621                    }
   2622                    else
   2623                    {
   2624                    //  FTM1_C0V=speed;
   2625                     // FTM1_C1V = 0;
   2626                      FTM1_C0V=0;
   \                     ??PTB_isr_16:
   \   00000244   0x....             LDR.N    R0,??DataTable23_62  ;; 0x40039010
   \   00000246   0x2100             MOVS     R1,#+0
   \   00000248   0x6001             STR      R1,[R0, #+0]
   2627                      FTM1_C1V = speed;
   \   0000024A   0x....             LDR.N    R0,??DataTable23_63  ;; 0x40039018
   \   0000024C   0x....             LDR.N    R1,??DataTable23_53
   \   0000024E   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000252   0x6001             STR      R1,[R0, #+0]
   2628                      
   2629                    }
   2630                    speed_re_error=speed_error;
   \                     ??PTB_isr_15:
   \   00000254   0x....             LDR.N    R0,??DataTable23_70
   \   00000256   0x....             LDR.N    R1,??DataTable23_68
   \   00000258   0x8809             LDRH     R1,[R1, #+0]
   \   0000025A   0x8001             STRH     R1,[R0, #+0]
   2631                  }
   2632          
   2633              }
   2634          
   2635          
   2636          }
   \                     ??PTB_isr_7:
   \   0000025C   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     left_black

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     right_black

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     center_white

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     Row_state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     start_stop_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     ramp_dis_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x4004B014         DC32     0x4004b014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     ramp_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x40040000         DC32     0x40040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x40040004         DC32     0x40040004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x400FF094         DC32     0x400ff094

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x0002BF20         DC32     0x2bf20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x4004A040         DC32     0x4004a040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x4004A044         DC32     0x4004a044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x4006A000         DC32     0x4006a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x4006A001         DC32     0x4006a001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x4006A00A         DC32     0x4006a00a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x4006A003         DC32     0x4006a003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   0x4006A002         DC32     0x4006a002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \   00000000   0x4004B010         DC32     0x4004b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \   00000000   0x40049030         DC32     0x40049030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \   00000000   0x40049034         DC32     0x40049034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \   00000000   0x40049028         DC32     0x40049028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_18:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_19:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_20:
   \   00000000   0x40038024         DC32     0x40038024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_21:
   \   00000000   0x4003900C         DC32     0x4003900c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_22:
   \   00000000   0x40039014         DC32     0x40039014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_23:
   \   00000000   0x400B800C         DC32     0x400b800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_24:
   \   00000000   0x4003801C         DC32     0x4003801c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_25:
   \   00000000   0x40038004         DC32     0x40038004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_26:
   \   00000000   0x40039004         DC32     0x40039004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_27:
   \   00000000   0x400B8004         DC32     0x400b8004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_28:
   \   00000000   0x40039008         DC32     0x40039008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_29:
   \   00000000   0x40038008         DC32     0x40038008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_30:
   \   00000000   0x400B8008         DC32     0x400b8008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_31:
   \   00000000   0x4003804C         DC32     0x4003804c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_32:
   \   00000000   0x4003904C         DC32     0x4003904c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_33:
   \   00000000   0x400B804C         DC32     0x400b804c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_34:
   \   00000000   0x40038028         DC32     0x40038028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_35:
   \   00000000   0x........         DC32     mid_angle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_36:
   \   00000000   0x40039010         DC32     0x40039010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_37:
   \   00000000   0x40039018         DC32     0x40039018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_38:
   \   00000000   0x400B8010         DC32     0x400b8010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_39:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_40:
   \   00000000   0x40039000         DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_41:
   \   00000000   0x400B8000         DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_42:
   \   00000000   0x40064001         DC32     0x40064001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_43:
   \   00000000   0x4007C008         DC32     0x4007c008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_44:
   \   00000000   0x40064000         DC32     0x40064000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_45:
   \   00000000   0x40064006         DC32     0x40064006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_46:
   \   00000000   0x40064004         DC32     0x40064004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_47:
   \   00000000   0x40064005         DC32     0x40064005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_48:
   \   00000000   0x4001F000         DC32     0x4001f000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_49:
   \   00000000   0x40048044         DC32     0x40048044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_50:
   \   00000000   0x02270000         DC32     0x2270000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_51:
   \   00000000   0x40048004         DC32     0x40048004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_52:
   \   00000000   0x40049018         DC32     0x40049018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_53:
   \   00000000   0x40048040         DC32     0x40048040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_54:
   \   00000000   0x........         DC32     current_deal_line

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_55:
   \   00000000   0x........         DC32     bottom_whitebase

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_56:
   \   00000000   0x........         DC32     find_whitebase_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_57:
   \   00000000   0x........         DC32     VideoImage1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_58:
   \   00000000   0x........         DC32     OT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_59:
   \   00000000   0x........         DC32     BASE_OT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_60:
   \   00000000   0x........         DC32     re_white_refer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_61:
   \   00000000   0x........         DC32     whitebase_searchstart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_62:
   \   00000000   0x........         DC32     left_whitebase_searchstart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_63:
   \   00000000   0x........         DC32     right_whitebase_searchstart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_64:
   \   00000000   0x........         DC32     white_refer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_65:
   \   00000000   0x........         DC32     re_whitepoint_start

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_66:
   \   00000000   0x........         DC32     whitepoint_start

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_67:
   \   00000000   0x........         DC32     re_whitepoint_end

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_68:
   \   00000000   0x........         DC32     whitepoint_end

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_69:
   \   00000000   0x........         DC32     Row_state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_70:
   \   00000000   0x........         DC32     left_black

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_71:
   \   00000000   0x........         DC32     right_black

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_72:
   \   00000000   0x........         DC32     center_white

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     bottom_whitebase

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     deal_start_line

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     top_whiteline

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     hang_search_start

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     white_refer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     Row_state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     left_black

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     OT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     VideoImage1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     right_black

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     center_white

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     VideoImage2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     bottom_whitebase

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     left_top_whiteline

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     top_whiteline

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     right_top_whiteline

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     Row_state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     left_black

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x........         DC32     right_black

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     center_lost_hang

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     bottom_whitebase

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     top_whiteline

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x........         DC32     center_white

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x........         DC32     left_black

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x........         DC32     right_black

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x........         DC32     danger_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x........         DC32     danger_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x........         DC32     control_top_whiteline

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0x........         DC32     deal_start_line

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \   00000000   0x........         DC32     refer_road_width

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \   00000000   0x........         DC32     S_right

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_12:
   \   00000000   0x........         DC32     S_left

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_13:
   \   00000000   0x........         DC32     S_straight

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_14:
   \   00000000   0x........         DC32     direction

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_15:
   \   00000000   0x........         DC32     ramp_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_16:
   \   00000000   0x........         DC32     re_direction

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_17:
   \   00000000   0x........         DC32     center_average

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_18:
   \   00000000   0x........         DC32     center_error_average

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_19:
   \   00000000   0x........         DC32     center_linear_average

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_20:
   \   00000000   0x........         DC32     ramp_time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_21:
   \   00000000   0x........         DC32     ramp_delay_time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_22:
   \   00000000   0x........         DC32     ramp_dis_time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     ramp_dis_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x3DCCCCCD         DC32     0x3dcccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x43960000         DC32     0x43960000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x40468000         DC32     0x40468000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x3F733334         DC32     0x3f733334

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0xBF733333         DC32     0xbf733333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x........         DC32     VideoImage2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     OT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0xBF800000         DC32     0xbf800000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x........         DC32     p_error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x........         DC32     refer_error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x........         DC32     get_p_errorline

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0x........         DC32     control_top_whiteline

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0x........         DC32     deal_start_line

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \   00000000   0x........         DC32     center_average

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \   00000000   0x........         DC32     ref_his_error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x........         DC32     stopflag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0x........         DC32     center_white

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   0x........         DC32     direction

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \   00000000   0x........         DC32     top_error_servo_p

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_4:
   \   00000000   0x........         DC32     lcd_error_servo_p

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_5:
   \   00000000   0x........         DC32     error_servo_p

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_6:
   \   00000000   0x........         DC32     error_servo_d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_7:
   \   00000000   0x........         DC32     lcd_error_servo_d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_8:
   \   00000000   0x........         DC32     lcd_ref_p

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_9:
   \   00000000   0x........         DC32     error_servo_ref_p

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_10:
   \   00000000   0x........         DC32     error_servo_ref_d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_11:
   \   00000000   0x........         DC32     lcd_ref_d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_12:
   \   00000000   0x........         DC32     mid_angle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_13:
   \   00000000   0x........         DC32     p_re_error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_14:
   \   00000000   0x........         DC32     re_refer_error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_15:
   \   00000000   0x........         DC32     angle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_16:
   \   00000000   0x........         DC32     re_angle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_17:
   \   00000000   0x40038028         DC32     0x40038028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_18:
   \   00000000   0x........         DC32     re_control_top_whiteline

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_19:
   \   00000000   0x........         DC32     speed_select

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_20:
   \   00000000   0x........         DC32     mySpeedswitch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x........         DC32     straight_speed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x........         DC32     bow_speed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   0x........         DC32     straight_speed_ed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   0x........         DC32     lcd_straight_speed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   0x........         DC32     lcd_bow_speed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x........         DC32     lcd_straight_speed_ed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x........         DC32     straight_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x........         DC32     speed_except

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x........         DC32     linear_factor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   0x........         DC32     full_speed_line

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x........         DC32     center_error_average

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0x4006A004         DC32     0x4006a004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \   00000000   0x4006A007         DC32     0x4006a007

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \   00000000   0x........         DC32     WHITE_BLACK_OT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \   00000000   0x00013880         DC32     0x13880

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_5:
   \   00000000   0x........         DC32     left_black

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_6:
   \   00000000   0x........         DC32     right_black

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_7:
   \   00000000   0x........         DC32     ??sci_temp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_8:
   \   00000000   0x........         DC32     speed_feedback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_9:
   \   00000000   0x........         DC32     stopflag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x........         DC32     speed_down_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \   00000000   0x........         DC32     send_mes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_2:
   \   00000000   0x400FF0C0         DC32     0x400ff0c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_3:
   \   00000000   0x400FF0D0         DC32     0x400ff0d0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_4:
   \   00000000   0x........         DC32     lcd_debug

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_5:
   \   00000000   0x........         DC32     redraw_control

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_6:
   \   00000000   0x........         DC32     lcd_page_num

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_7:
   \   00000000   0x........         DC32     `?<Constant "lcd_debug:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x........         DC32     lcd_line_num

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0x........         DC32     `?<Constant "speed_select:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   0x........         DC32     `?<Constant "s_pit_count:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_3:
   \   00000000   0x........         DC32     stop_pit_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_4:
   \   00000000   0x........         DC32     `?<Constant "rampdetime:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_5:
   \   00000000   0x........         DC32     ramp_delay_time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_6:
   \   00000000   0x........         DC32     `?<Constant "mid_angle:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_7:
   \   00000000   0x........         DC32     `?<Constant "WHITE_BLACK_OT:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_8:
   \   00000000   0x........         DC32     `?<Constant "test_run:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_9:
   \   00000000   0x........         DC32     test_run

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_10:
   \   00000000   0x........         DC32     `?<Constant "l_er_ser_p:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_11:
   \   00000000   0x........         DC32     `?<Constant "l_er_ser_d:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_12:
   \   00000000   0x........         DC32     `?<Constant "lcd_ref_p:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_13:
   \   00000000   0x........         DC32     `?<Constant "lcd_ref_d:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_14:
   \   00000000   0x........         DC32     `?<Constant "l_str_speed:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_15:
   \   00000000   0x........         DC32     `?<Constant "l_bow_speed:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_16:
   \   00000000   0x........         DC32     `?<Constant "lcd_strspe_ed:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   0x........         DC32     start_stop_cs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \   00000000   0x........         DC32     top_whiteline

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_2:
   \   00000000   0x........         DC32     control_top_whiteline

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_3:
   \   00000000   0x........         DC32     deal_start_line

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_4:
   \   00000000   0x........         DC32     white_refer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_5:
   \   00000000   0x........         DC32     center_average

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   0x........         DC32     p_error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_1:
   \   00000000   0x........         DC32     speed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_2:
   \   00000000   0x........         DC32     S_straight

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_3:
   \   00000000   0x........         DC32     S_left

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_4:
   \   00000000   0x........         DC32     S_right

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_5:
   \   00000000   0x........         DC32     direction

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_6:
   \   00000000   0x........         DC32     ramp_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_7:
   \   00000000   0x000C3500         DC32     0xc3500

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_8:
   \   00000000   0x400FF080         DC32     0x400ff080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_9:
   \   00000000   0x400FF090         DC32     0x400ff090

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_10:
   \   00000000   0x........         DC32     sub_NUM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_11:
   \   00000000   0x........         DC32     se_sub_NUM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_12:
   \   00000000   0x........         DC32     up_line

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_13:
   \   00000000   0x........         DC32     change_page

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_14:
   \   00000000   0x........         DC32     add_NUM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   0x........         DC32     down_line

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_1:
   \   00000000   0x........         DC32     lcd_page_num

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_2:
   \   00000000   0x........         DC32     speed_select

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_3:
   \   00000000   0x........         DC32     mid_angle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_4:
   \   00000000   0x........         DC32     WHITE_BLACK_OT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_5:
   \   00000000   0x........         DC32     lcd_error_servo_p

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_6:
   \   00000000   0x........         DC32     lcd_error_servo_d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_7:
   \   00000000   0x........         DC32     lcd_ref_p

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_8:
   \   00000000   0x........         DC32     lcd_ref_d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_9:
   \   00000000   0x........         DC32     lcd_straight_speed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_10:
   \   00000000   0x........         DC32     lcd_bow_speed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_11:
   \   00000000   0x........         DC32     lcd_straight_speed_ed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_12:
   \   00000000   0x4004A050         DC32     0x4004a050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_13:
   \   00000000   0x4004D000         DC32     0x4004d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_14:
   \   00000000   0x4004D004         DC32     0x4004d004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_15:
   \   00000000   0x4004D008         DC32     0x4004d008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_16:
   \   00000000   0x4004D00C         DC32     0x4004d00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_17:
   \   00000000   0x4004D010         DC32     0x4004d010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_18:
   \   00000000   0x4004D014         DC32     0x4004d014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_19:
   \   00000000   0x4004D018         DC32     0x4004d018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_20:
   \   00000000   0x4004D01C         DC32     0x4004d01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_21:
   \   00000000   0x400FF114         DC32     0x400ff114

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_22:
   \   00000000   0x400FF054         DC32     0x400ff054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_23:
   \   00000000   0x4004C018         DC32     0x4004c018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_24:
   \   00000000   0x4004C01C         DC32     0x4004c01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_25:
   \   00000000   0x4004C020         DC32     0x4004c020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_26:
   \   00000000   0x4004C024         DC32     0x4004c024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_27:
   \   00000000   0x4004C028         DC32     0x4004c028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_28:
   \   00000000   0x4004C02C         DC32     0x4004c02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_29:
   \   00000000   0x4004C030         DC32     0x4004c030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_30:
   \   00000000   0x4004C034         DC32     0x4004c034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_31:
   \   00000000   0x400FF0D4         DC32     0x400ff0d4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_32:
   \   00000000   0x........         DC32     lcd_debug

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_33:
   \   00000000   0x02625A00         DC32     0x2625a00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_34:
   \   00000000   0x400FF050         DC32     0x400ff050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_35:
   \   00000000   0x........         DC32     OddEvenStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_36:
   \   00000000   0x........         DC32     Videoclo_Flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_37:
   \   00000000   0x........         DC32     ImageReady

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_38:
   \   00000000   0x........         DC32     VideoImage1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_39:
   \   00000000   0x........         DC32     VideoImage2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_40:
   \   00000000   0x........         DC32     start_stop_en

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_41:
   \   00000000   0x........         DC32     start_stop_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_42:
   \   00000000   0x........         DC32     stop_pit_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_43:
   \   00000000   0x........         DC32     test_run

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_44:
   \   00000000   0x........         DC32     car_test_run

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_45:
   \   00000000   0x........         DC32     stopflag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_46:
   \   00000000   0x........         DC32     find_whitebase_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_47:
   \   00000000   0x........         DC32     center_linear_average

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_48:
   \   00000000   0x........         DC32     bottom_whitebase

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_49:
   \   00000000   0x........         DC32     linear_factor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_50:
   \   00000000   0x4006A004         DC32     0x4006a004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_51:
   \   00000000   0x4006A007         DC32     0x4006a007

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_52:
   \   00000000   0x........         DC32     send_mes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_53:
   \   00000000   0x........         DC32     speed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_54:
   \   00000000   0x4004A058         DC32     0x4004a058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_55:
   \   00000000   0x........         DC32     LineCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_56:
   \   00000000   0x........         DC32     VideoImageLine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_57:
   \   00000000   0x400FF110         DC32     0x400ff110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_58:
   \   00000000   0x........         DC32     speed_feedback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_59:
   \   00000000   0x4004000C         DC32     0x4004000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_60:
   \   00000000   0x40040000         DC32     0x40040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_61:
   \   00000000   0x........         DC32     speed_down_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_62:
   \   00000000   0x40039010         DC32     0x40039010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_63:
   \   00000000   0x40039018         DC32     0x40039018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_64:
   \   00000000   0x........         DC32     dead_stop

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_65:
   \   00000000   0x........         DC32     ramp_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_66:
   \   00000000   0x........         DC32     speed_except

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_67:
   \   00000000   0x........         DC32     ramp_speed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_68:
   \   00000000   0x........         DC32     speed_error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_69:
   \   00000000   0x........         DC32     speed_p

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_70:
   \   00000000   0x........         DC32     speed_re_error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_71:
   \   00000000   0x........         DC32     speed_i

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_72:
   \   00000000   0x........         DC32     max_speed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_73:
   \   00000000   0x........         DC32     min_speed

   \                                 In section .rodata, align 4
   \                     `?<Constant "lcd_debug:">`:
   \   00000000   0x6C 0x63          DC8 "lcd_debug:"
   \              0x64 0x5F    
   \              0x64 0x65    
   \              0x62 0x75    
   \              0x67 0x3A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "speed_select:">`:
   \   00000000   0x73 0x70          DC8 "speed_select:"
   \              0x65 0x65    
   \              0x64 0x5F    
   \              0x73 0x65    
   \              0x6C 0x65    
   \              0x63 0x74    
   \              0x3A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "s_pit_count:">`:
   \   00000000   0x73 0x5F          DC8 "s_pit_count:"
   \              0x70 0x69    
   \              0x74 0x5F    
   \              0x63 0x6F    
   \              0x75 0x6E    
   \              0x74 0x3A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "rampdetime:">`:
   \   00000000   0x72 0x61          DC8 "rampdetime:"
   \              0x6D 0x70    
   \              0x64 0x65    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x3A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "mid_angle:">`:
   \   00000000   0x6D 0x69          DC8 "mid_angle:"
   \              0x64 0x5F    
   \              0x61 0x6E    
   \              0x67 0x6C    
   \              0x65 0x3A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "WHITE_BLACK_OT:">`:
   \   00000000   0x57 0x48          DC8 "WHITE_BLACK_OT:"
   \              0x49 0x54    
   \              0x45 0x5F    
   \              0x42 0x4C    
   \              0x41 0x43    
   \              0x4B 0x5F    
   \              0x4F 0x54    
   \              0x3A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "test_run:">`:
   \   00000000   0x74 0x65          DC8 "test_run:"
   \              0x73 0x74    
   \              0x5F 0x72    
   \              0x75 0x6E    
   \              0x3A 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "l_er_ser_p:">`:
   \   00000000   0x6C 0x5F          DC8 "l_er_ser_p:"
   \              0x65 0x72    
   \              0x5F 0x73    
   \              0x65 0x72    
   \              0x5F 0x70    
   \              0x3A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "l_er_ser_d:">`:
   \   00000000   0x6C 0x5F          DC8 "l_er_ser_d:"
   \              0x65 0x72    
   \              0x5F 0x73    
   \              0x65 0x72    
   \              0x5F 0x64    
   \              0x3A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "lcd_ref_p:">`:
   \   00000000   0x6C 0x63          DC8 "lcd_ref_p:"
   \              0x64 0x5F    
   \              0x72 0x65    
   \              0x66 0x5F    
   \              0x70 0x3A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "lcd_ref_d:">`:
   \   00000000   0x6C 0x63          DC8 "lcd_ref_d:"
   \              0x64 0x5F    
   \              0x72 0x65    
   \              0x66 0x5F    
   \              0x64 0x3A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "l_str_speed:">`:
   \   00000000   0x6C 0x5F          DC8 "l_str_speed:"
   \              0x73 0x74    
   \              0x72 0x5F    
   \              0x73 0x70    
   \              0x65 0x65    
   \              0x64 0x3A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "l_bow_speed:">`:
   \   00000000   0x6C 0x5F          DC8 "l_bow_speed:"
   \              0x62 0x6F    
   \              0x77 0x5F    
   \              0x73 0x70    
   \              0x65 0x65    
   \              0x64 0x3A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "lcd_strspe_ed:">`:
   \   00000000   0x6C 0x63          DC8 "lcd_strspe_ed:"
   \              0x64 0x5F    
   \              0x73 0x74    
   \              0x72 0x73    
   \              0x70 0x65    
   \              0x5F 0x65    
   \              0x64 0x3A    
   \              0x00         
   \   0000000F   0x00               DC8 0
   2637           

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  Control
             16 -> MIN_INT
             16 -> __aeabi_cfcmpeq
             16 -> f_abs16
             16 -> f_absf
       16  Deal_BlackEdge
        0  Delay_MS
        0  EXIT_Init
        0  Initial
        8  Keyscan
              8 -> LCD_P6x8Cha
              8 -> LCD_change_value
              8 -> key_down
              8 -> pre_show
       16  LCD_change_value
             16 -> LCD_CLS_ROW
             16 -> LCD_P6x8Cha
             16 -> LCD_P6x8Num
             16 -> __aeabi_i2f
             16 -> __aeabi_ui2f
        0  LPTMR_Init
        0  MIN_INT
        0  PORT_Init
        8  PTB_isr
              8 -> Delay_MS
       16  SCI0_send_mesage
             16 -> Delay_MS
       24  Search_BlackEdge
             24 -> f_abs16
       16  Search_WhiteBase
             16 -> f_abs16
        4  UART0_Init
       24  check_start_stop_line
             24 -> f_abs16
        0  f_abs16
        4  f_absf
              4 -> __aeabi_cfrcmple
       16  get_line_information
             16 -> f_abs16
       48  get_linear_factor
             48 -> __aeabi_cfcmple
             48 -> __aeabi_cfrcmple
             48 -> __aeabi_d2f
             48 -> __aeabi_ddiv
             48 -> __aeabi_dmul
             48 -> __aeabi_f2d
             48 -> __aeabi_fadd
             48 -> __aeabi_fdiv
             48 -> __aeabi_fmul
             48 -> __aeabi_i2d
             48 -> __aeabi_i2f
             48 -> f_abs16
             48 -> f_absf
             48 -> sqrt
        0  hw_FTM_init
       16  key_down
             16 -> Delay_MS
       16  main
             16 -> Control
             16 -> Deal_BlackEdge
             16 -> Delay_MS
             16 -> EXIT_Init
             16 -> Initial
             16 -> Keyscan
             16 -> LCD_IO_Init
             16 -> LCD_Init
             16 -> LPTMR_Init
             16 -> PORT_Init
             16 -> SCI0_send_mesage
             16 -> Search_BlackEdge
             16 -> Search_WhiteBase
             16 -> UART0_Init
             16 -> check_start_stop_line
             16 -> enable_irq
             16 -> get_line_information
             16 -> get_linear_factor
             16 -> hw_FTM_init
             16 -> pllinit180M
             16 -> pre_show
             16 -> redraw
             16 -> scan_boma
        0  pllinit180M
        8  pre_show
              8 -> LCD_CLS
              8 -> LCD_P6x8Cha
              8 -> LCD_P6x8Num
              8 -> LCD_P6x8Str
              8 -> __aeabi_i2f
              8 -> __aeabi_ui2f
        8  redraw
              8 -> LCD_CLS_ROW
              8 -> LCD_P6x8Num
              8 -> __aeabi_i2f
              8 -> __aeabi_ui2f
        0  scan_boma
        0  uart0_isr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "WHITE_BLACK_OT:">
      16  ?<Constant "l_bow_speed:">
      12  ?<Constant "l_er_ser_d:">
      12  ?<Constant "l_er_ser_p:">
      16  ?<Constant "l_str_speed:">
      12  ?<Constant "lcd_debug:">
      12  ?<Constant "lcd_ref_d:">
      12  ?<Constant "lcd_ref_p:">
      16  ?<Constant "lcd_strspe_ed:">
      12  ?<Constant "mid_angle:">
      12  ?<Constant "rampdetime:">
      16  ?<Constant "s_pit_count:">
      16  ?<Constant "speed_select:">
      12  ?<Constant "test_run:">
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_12
       4  ??DataTable11_13
       4  ??DataTable11_14
       4  ??DataTable11_15
       4  ??DataTable11_16
       4  ??DataTable11_17
       4  ??DataTable11_18
       4  ??DataTable11_19
       4  ??DataTable11_2
       4  ??DataTable11_20
       4  ??DataTable11_21
       4  ??DataTable11_22
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
       4  ??DataTable12_3
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_2
       4  ??DataTable14_3
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_10
       4  ??DataTable15_11
       4  ??DataTable15_12
       4  ??DataTable15_13
       4  ??DataTable15_14
       4  ??DataTable15_15
       4  ??DataTable15_16
       4  ??DataTable15_17
       4  ??DataTable15_18
       4  ??DataTable15_19
       4  ??DataTable15_2
       4  ??DataTable15_20
       4  ??DataTable15_3
       4  ??DataTable15_4
       4  ??DataTable15_5
       4  ??DataTable15_6
       4  ??DataTable15_7
       4  ??DataTable15_8
       4  ??DataTable15_9
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_2
       4  ??DataTable16_3
       4  ??DataTable16_4
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable17_4
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_2
       4  ??DataTable18_3
       4  ??DataTable18_4
       4  ??DataTable18_5
       4  ??DataTable18_6
       4  ??DataTable18_7
       4  ??DataTable18_8
       4  ??DataTable18_9
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_2
       4  ??DataTable19_3
       4  ??DataTable19_4
       4  ??DataTable19_5
       4  ??DataTable19_6
       4  ??DataTable19_7
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_10
       4  ??DataTable20_11
       4  ??DataTable20_12
       4  ??DataTable20_13
       4  ??DataTable20_14
       4  ??DataTable20_15
       4  ??DataTable20_16
       4  ??DataTable20_2
       4  ??DataTable20_3
       4  ??DataTable20_4
       4  ??DataTable20_5
       4  ??DataTable20_6
       4  ??DataTable20_7
       4  ??DataTable20_8
       4  ??DataTable20_9
       4  ??DataTable21
       4  ??DataTable21_1
       4  ??DataTable21_2
       4  ??DataTable21_3
       4  ??DataTable21_4
       4  ??DataTable21_5
       4  ??DataTable22
       4  ??DataTable22_1
       4  ??DataTable22_10
       4  ??DataTable22_11
       4  ??DataTable22_12
       4  ??DataTable22_13
       4  ??DataTable22_14
       4  ??DataTable22_2
       4  ??DataTable22_3
       4  ??DataTable22_4
       4  ??DataTable22_5
       4  ??DataTable22_6
       4  ??DataTable22_7
       4  ??DataTable22_8
       4  ??DataTable22_9
       4  ??DataTable23
       4  ??DataTable23_1
       4  ??DataTable23_10
       4  ??DataTable23_11
       4  ??DataTable23_12
       4  ??DataTable23_13
       4  ??DataTable23_14
       4  ??DataTable23_15
       4  ??DataTable23_16
       4  ??DataTable23_17
       4  ??DataTable23_18
       4  ??DataTable23_19
       4  ??DataTable23_2
       4  ??DataTable23_20
       4  ??DataTable23_21
       4  ??DataTable23_22
       4  ??DataTable23_23
       4  ??DataTable23_24
       4  ??DataTable23_25
       4  ??DataTable23_26
       4  ??DataTable23_27
       4  ??DataTable23_28
       4  ??DataTable23_29
       4  ??DataTable23_3
       4  ??DataTable23_30
       4  ??DataTable23_31
       4  ??DataTable23_32
       4  ??DataTable23_33
       4  ??DataTable23_34
       4  ??DataTable23_35
       4  ??DataTable23_36
       4  ??DataTable23_37
       4  ??DataTable23_38
       4  ??DataTable23_39
       4  ??DataTable23_4
       4  ??DataTable23_40
       4  ??DataTable23_41
       4  ??DataTable23_42
       4  ??DataTable23_43
       4  ??DataTable23_44
       4  ??DataTable23_45
       4  ??DataTable23_46
       4  ??DataTable23_47
       4  ??DataTable23_48
       4  ??DataTable23_49
       4  ??DataTable23_5
       4  ??DataTable23_50
       4  ??DataTable23_51
       4  ??DataTable23_52
       4  ??DataTable23_53
       4  ??DataTable23_54
       4  ??DataTable23_55
       4  ??DataTable23_56
       4  ??DataTable23_57
       4  ??DataTable23_58
       4  ??DataTable23_59
       4  ??DataTable23_6
       4  ??DataTable23_60
       4  ??DataTable23_61
       4  ??DataTable23_62
       4  ??DataTable23_63
       4  ??DataTable23_64
       4  ??DataTable23_65
       4  ??DataTable23_66
       4  ??DataTable23_67
       4  ??DataTable23_68
       4  ??DataTable23_69
       4  ??DataTable23_7
       4  ??DataTable23_70
       4  ??DataTable23_71
       4  ??DataTable23_72
       4  ??DataTable23_73
       4  ??DataTable23_8
       4  ??DataTable23_9
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_19
       4  ??DataTable6_2
       4  ??DataTable6_20
       4  ??DataTable6_21
       4  ??DataTable6_22
       4  ??DataTable6_23
       4  ??DataTable6_24
       4  ??DataTable6_25
       4  ??DataTable6_26
       4  ??DataTable6_27
       4  ??DataTable6_28
       4  ??DataTable6_29
       4  ??DataTable6_3
       4  ??DataTable6_30
       4  ??DataTable6_31
       4  ??DataTable6_32
       4  ??DataTable6_33
       4  ??DataTable6_34
       4  ??DataTable6_35
       4  ??DataTable6_36
       4  ??DataTable6_37
       4  ??DataTable6_38
       4  ??DataTable6_39
       4  ??DataTable6_4
       4  ??DataTable6_40
       4  ??DataTable6_41
       4  ??DataTable6_42
       4  ??DataTable6_43
       4  ??DataTable6_44
       4  ??DataTable6_45
       4  ??DataTable6_46
       4  ??DataTable6_47
       4  ??DataTable6_48
       4  ??DataTable6_49
       4  ??DataTable6_5
       4  ??DataTable6_50
       4  ??DataTable6_51
       4  ??DataTable6_52
       4  ??DataTable6_53
       4  ??DataTable6_54
       4  ??DataTable6_55
       4  ??DataTable6_56
       4  ??DataTable6_57
       4  ??DataTable6_58
       4  ??DataTable6_59
       4  ??DataTable6_6
       4  ??DataTable6_60
       4  ??DataTable6_61
       4  ??DataTable6_62
       4  ??DataTable6_63
       4  ??DataTable6_64
       4  ??DataTable6_65
       4  ??DataTable6_66
       4  ??DataTable6_67
       4  ??DataTable6_68
       4  ??DataTable6_69
       4  ??DataTable6_7
       4  ??DataTable6_70
       4  ??DataTable6_71
       4  ??DataTable6_72
       4  ??DataTable6_8
       4  ??DataTable6_9
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       1  BASE_OT
    1990  Control
    2010  Deal_BlackEdge
      10  Delay_MS
      72  EXIT_Init
       1  ImageReady
      78  Initial
     522  Keyscan
     842  LCD_change_value
     194  LPTMR_Init
       2  LineCount
      10  MIN_INT
       1  OT
       1  OddEvenStatus
     202  PORT_Init
     606  PTB_isr
      68  Row_state
     486  SCI0_send_mesage
       1  S_left
       1  S_right
       1  S_straight
    2918  Search_BlackEdge
    1776  Search_WhiteBase
     180  UART0_Init
   10336  VideoImage1
   10336  VideoImage2
       1  VideoImageLine
       1  Videoclo_Flag
       1  WHITE_BLACK_OT
       1  add_NUM
       2  angle
       1  bottom_whitebase
       2  bow_speed
       2  car_test_run
       4  center_average
       2  center_error_average
       4  center_linear_average
       1  center_lost_hang
      68  center_white
       1  change_page
     616  check_start_stop_line
       2  control_top_whiteline
       1  current_deal_line
       2  danger_count
       1  danger_flag
       1  dead_stop
       1  deal_start_line
       1  direction
       1  down_line
       2  error_servo_d
       2  error_servo_p
       2  error_servo_ref_d
       2  error_servo_ref_p
      18  f_abs16
      16  f_absf
       1  find_whitebase_flag
       1  full_speed_line
    1942  get_line_information
     456  get_linear_factor
       1  get_p_errorline
       1  hang_search_start
     444  hw_FTM_init
     186  key_down
       2  lcd_bow_speed
       1  lcd_debug
       2  lcd_error_servo_d
       2  lcd_error_servo_p
       1  lcd_line_num
       1  lcd_page_num
       2  lcd_ref_d
       2  lcd_ref_p
       2  lcd_straight_speed
       2  lcd_straight_speed_ed
      68  left_black
       1  left_top_whiteline
       1  left_whitebase_searchstart
       4  linear_factor
     486  main
       2  max_speed
       2  mid_angle
       2  min_speed
      36  mySpeedswitch
       2  p_error
       2  p_re_error
     254  pllinit180M
     496  pre_show
       2  ramp_delay_time
       1  ramp_dis_flag
       2  ramp_dis_time
       1  ramp_flag
       2  ramp_speed
       2  ramp_time
       2  re_angle
       2  re_control_top_whiteline
       1  re_direction
       2  re_refer_error
       1  re_top_whiteline
       1  re_white_refer
       1  re_whitepoint_end
       1  re_whitepoint_start
     442  redraw
       1  redraw_control
      12  ref_his_error
       2  refer_error
      68  refer_road_width
      68  right_black
       1  right_top_whiteline
       1  right_whitebase_searchstart
     138  scan_boma
       1  sci_temp
       1  se_sub_NUM
       1  send_mes
       2  speed
       2  speed_down_cnt
       2  speed_error
       2  speed_except
       2  speed_feedback
       1  speed_i
       1  speed_p
       2  speed_re_error
       1  speed_select
       4  start_stop_count
       1  start_stop_cs
       1  start_stop_en
       4  stop_pit_count
       1  stopflag
       2  straight_count
       2  straight_speed
       2  straight_speed_ed
       1  sub_NUM
       1  test_run
       2  top_error_servo_p
       1  top_whiteline
     122  uart0_isr
       1  up_line
       1  white_refer
       1  whitebase_searchstart
       1  whitepoint_end
       1  whitepoint_start

 
 21 064 bytes in section .bss
    154 bytes in section .data
    192 bytes in section .rodata
 18 712 bytes in section .text
 
 18 712 bytes of CODE  memory
    192 bytes of CONST memory
 21 218 bytes of DATA  memory

Errors: none
Warnings: none
