###############################################################################
#                                                                             #
#                                                       11/Aug/2012  21:15:57 #
# IAR ANSI C/C++ Compiler V6.30.4.23288/W32 EVALUATION for ARM                #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\飞磁\src\Sources\C\Compon #
#                    ent_C\uart.c                                             #
#    Command line =  C:\Users\Administrator\Desktop\飞磁\src\Sources\C\Compon #
#                    ent_C\uart.c -D IAR -D TWR_K60N512 -lCN                  #
#                    C:\Users\Administrator\Desktop\飞磁\bin\Flash\List\ -lB  #
#                    C:\Users\Administrator\Desktop\飞磁\bin\Flash\List\ -o   #
#                    C:\Users\Administrator\Desktop\飞磁\bin\Flash\Obj\       #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config G:\irm\arm\INC\c\DLib_Config_Normal.h -I   #
#                    C:\Users\Administrator\Desktop\飞磁\src\Sources\H\ -I    #
#                    C:\Users\Administrator\Desktop\飞磁\src\Sources\H\Compon #
#                    ent_H\ -I C:\Users\Administrator\Desktop\飞磁\src\Source #
#                    s\H\Frame_H\ -Ol --use_c++_inline                        #
#    List file    =  C:\Users\Administrator\Desktop\飞磁\bin\Flash\List\uart. #
#                    lst                                                      #
#    Object file  =  C:\Users\Administrator\Desktop\飞磁\bin\Flash\Obj\uart.o #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\飞磁\src\Sources\C\Component_C\uart.c
      1          //-------------------------------------------------------------------------*
      2          // 文件名: uart.c                                                          *
      3          // 说  明: uart构件源文件                                                  *
      4          //-------------------------------------------------------------------------*
      5          
      6          #include "uart.h"
      7          
      8          //-------------------------------------------------------------------------*
      9          //函数名: uart_init                                                        *
     10          //功  能: 初始化uartx模块。                                                *
     11          //参  数: uartch:串口号                                                    *
     12          //        sysclk:系统总线时钟，以MHz为单位                                 *
     13          //        baud:波特率，如9600，38400等，一般来说，速度越慢，通信越稳       *
     14          //返  回: 无                                                               *
     15          //说  明:                                                                  *
     16          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     17          void uart_init (UART_MemMapPtr uartch, uint32 sysclk, uint32 baud)
     18          {
   \                     uart_init:
   \   00000000   0xB430             PUSH     {R4,R5}
     19          	register uint16 sbr, brfa;
     20          	uint8 temp;
     21          
     22          	//使能引脚
     23          	if (uartch == UART0_BASE_PTR)
   \   00000002   0x....             LDR.N    R3,??DataTable0  ;; 0x4006a000
   \   00000004   0x4298             CMP      R0,R3
   \   00000006   0xD108             BNE.N    ??uart_init_0
     24          	{
     25          		//在PTD6上使能UART0_TXD功能
     26          		PORTD_PCR6 = PORT_PCR_MUX(0x3);
   \   00000008   0x....             LDR.N    R3,??DataTable0_1  ;; 0x4004c018
   \   0000000A   0xF44F 0x7440      MOV      R4,#+768
   \   0000000E   0x601C             STR      R4,[R3, #+0]
     27          		//在PTD7上使能UART0_RXD
     28          		PORTD_PCR7 = PORT_PCR_MUX(0x3); 
   \   00000010   0x....             LDR.N    R3,??DataTable0_2  ;; 0x4004c01c
   \   00000012   0xF44F 0x7440      MOV      R4,#+768
   \   00000016   0x601C             STR      R4,[R3, #+0]
   \   00000018   0xE03A             B.N      ??uart_init_1
     29          	}else if (uartch == UART1_BASE_PTR)
   \                     ??uart_init_0:
   \   0000001A   0x....             LDR.N    R3,??DataTable0_3  ;; 0x4006b000
   \   0000001C   0x4298             CMP      R0,R3
   \   0000001E   0xD108             BNE.N    ??uart_init_2
     30          	{
     31          		//在PTC4上使能UART1_TXD功能
     32          		PORTC_PCR4 = PORT_PCR_MUX(0x3); 
   \   00000020   0x....             LDR.N    R3,??DataTable0_4  ;; 0x4004b010
   \   00000022   0xF44F 0x7440      MOV      R4,#+768
   \   00000026   0x601C             STR      R4,[R3, #+0]
     33          		
     34          		//在PTC3上使能UART1_RXD
     35          		PORTC_PCR3 = PORT_PCR_MUX(0x3); 
   \   00000028   0x....             LDR.N    R3,??DataTable0_5  ;; 0x4004b00c
   \   0000002A   0xF44F 0x7440      MOV      R4,#+768
   \   0000002E   0x601C             STR      R4,[R3, #+0]
   \   00000030   0xE02E             B.N      ??uart_init_1
     36          	}else if (uartch == UART2_BASE_PTR)
   \                     ??uart_init_2:
   \   00000032   0x....             LDR.N    R3,??DataTable0_6  ;; 0x4006c000
   \   00000034   0x4298             CMP      R0,R3
   \   00000036   0xD108             BNE.N    ??uart_init_3
     37          	{
     38          		//在PTD3上使能UART2_TXD功能
     39          		PORTD_PCR3 = PORT_PCR_MUX(0x3); 
   \   00000038   0x....             LDR.N    R3,??DataTable0_7  ;; 0x4004c00c
   \   0000003A   0xF44F 0x7440      MOV      R4,#+768
   \   0000003E   0x601C             STR      R4,[R3, #+0]
     40          		//在PTD2上使能UART2_RXD
     41          		PORTD_PCR2 = PORT_PCR_MUX(0x3); 
   \   00000040   0x....             LDR.N    R3,??DataTable0_8  ;; 0x4004c008
   \   00000042   0xF44F 0x7440      MOV      R4,#+768
   \   00000046   0x601C             STR      R4,[R3, #+0]
   \   00000048   0xE022             B.N      ??uart_init_1
     42          	}else if (uartch == UART3_BASE_PTR)
   \                     ??uart_init_3:
   \   0000004A   0x....             LDR.N    R3,??DataTable0_9  ;; 0x4006d000
   \   0000004C   0x4298             CMP      R0,R3
   \   0000004E   0xD108             BNE.N    ??uart_init_4
     43          	{
     44          		//在PTC17上使能UART3_TXD功能
     45          		PORTC_PCR17 = PORT_PCR_MUX(0x3); 
   \   00000050   0x....             LDR.N    R3,??DataTable0_10  ;; 0x4004b044
   \   00000052   0xF44F 0x7440      MOV      R4,#+768
   \   00000056   0x601C             STR      R4,[R3, #+0]
     46          		//在PTC16上使能UART3_RXD
     47          		PORTC_PCR16 = PORT_PCR_MUX(0x3); 
   \   00000058   0x....             LDR.N    R3,??DataTable0_11  ;; 0x4004b040
   \   0000005A   0xF44F 0x7440      MOV      R4,#+768
   \   0000005E   0x601C             STR      R4,[R3, #+0]
   \   00000060   0xE016             B.N      ??uart_init_1
     48          	}else if (uartch == UART4_BASE_PTR)
   \                     ??uart_init_4:
   \   00000062   0x....             LDR.N    R3,??DataTable0_12  ;; 0x400ea000
   \   00000064   0x4298             CMP      R0,R3
   \   00000066   0xD108             BNE.N    ??uart_init_5
     49          	{
     50          		//在PTE24上使能UART4_TXD功能
     51          		PORTE_PCR24 = PORT_PCR_MUX(0x3); 
   \   00000068   0x....             LDR.N    R3,??DataTable0_13  ;; 0x4004d060
   \   0000006A   0xF44F 0x7440      MOV      R4,#+768
   \   0000006E   0x601C             STR      R4,[R3, #+0]
     52          		//在PTE25上使能UART4_RXD
     53          		PORTE_PCR25 = PORT_PCR_MUX(0x3); 
   \   00000070   0x....             LDR.N    R3,??DataTable0_14  ;; 0x4004d064
   \   00000072   0xF44F 0x7440      MOV      R4,#+768
   \   00000076   0x601C             STR      R4,[R3, #+0]
   \   00000078   0xE00A             B.N      ??uart_init_1
     54          	}else if (uartch == UART5_BASE_PTR)
   \                     ??uart_init_5:
   \   0000007A   0x....             LDR.N    R3,??DataTable0_15  ;; 0x400eb000
   \   0000007C   0x4298             CMP      R0,R3
   \   0000007E   0xD107             BNE.N    ??uart_init_1
     55          	{
     56          		//在PTE8上使能UART5_TXD功能
     57          		PORTE_PCR8 = PORT_PCR_MUX(0x3); 
   \   00000080   0x....             LDR.N    R3,??DataTable0_16  ;; 0x4004d020
   \   00000082   0xF44F 0x7440      MOV      R4,#+768
   \   00000086   0x601C             STR      R4,[R3, #+0]
     58          		//在PTE9上使能UART5_RXD
     59          		PORTE_PCR9 = PORT_PCR_MUX(0x3); 
   \   00000088   0x....             LDR.N    R3,??DataTable0_17  ;; 0x4004d024
   \   0000008A   0xF44F 0x7440      MOV      R4,#+768
   \   0000008E   0x601C             STR      R4,[R3, #+0]
     60          	}
     61          	 
     62          	//使能串口时钟    
     63          	if(uartch == UART0_BASE_PTR)
   \                     ??uart_init_1:
   \   00000090   0x....             LDR.N    R3,??DataTable0  ;; 0x4006a000
   \   00000092   0x4298             CMP      R0,R3
   \   00000094   0xD106             BNE.N    ??uart_init_6
     64          		SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
   \   00000096   0x....             LDR.N    R3,??DataTable0_18  ;; 0x40048034
   \   00000098   0x681B             LDR      R3,[R3, #+0]
   \   0000009A   0xF453 0x6380      ORRS     R3,R3,#0x400
   \   0000009E   0x....             LDR.N    R4,??DataTable0_18  ;; 0x40048034
   \   000000A0   0x6023             STR      R3,[R4, #+0]
   \   000000A2   0xE02D             B.N      ??uart_init_7
     65          	else
     66          		if (uartch == UART1_BASE_PTR)
   \                     ??uart_init_6:
   \   000000A4   0x....             LDR.N    R3,??DataTable0_3  ;; 0x4006b000
   \   000000A6   0x4298             CMP      R0,R3
   \   000000A8   0xD106             BNE.N    ??uart_init_8
     67          			SIM_SCGC4 |= SIM_SCGC4_UART1_MASK;
   \   000000AA   0x....             LDR.N    R3,??DataTable0_18  ;; 0x40048034
   \   000000AC   0x681B             LDR      R3,[R3, #+0]
   \   000000AE   0xF453 0x6300      ORRS     R3,R3,#0x800
   \   000000B2   0x....             LDR.N    R4,??DataTable0_18  ;; 0x40048034
   \   000000B4   0x6023             STR      R3,[R4, #+0]
   \   000000B6   0xE023             B.N      ??uart_init_7
     68          		else
     69          			if (uartch == UART2_BASE_PTR)
   \                     ??uart_init_8:
   \   000000B8   0x....             LDR.N    R3,??DataTable0_6  ;; 0x4006c000
   \   000000BA   0x4298             CMP      R0,R3
   \   000000BC   0xD106             BNE.N    ??uart_init_9
     70          				SIM_SCGC4 |= SIM_SCGC4_UART2_MASK;
   \   000000BE   0x....             LDR.N    R3,??DataTable0_18  ;; 0x40048034
   \   000000C0   0x681B             LDR      R3,[R3, #+0]
   \   000000C2   0xF453 0x5380      ORRS     R3,R3,#0x1000
   \   000000C6   0x....             LDR.N    R4,??DataTable0_18  ;; 0x40048034
   \   000000C8   0x6023             STR      R3,[R4, #+0]
   \   000000CA   0xE019             B.N      ??uart_init_7
     71          			else
     72          				if(uartch == UART3_BASE_PTR)
   \                     ??uart_init_9:
   \   000000CC   0x....             LDR.N    R3,??DataTable0_9  ;; 0x4006d000
   \   000000CE   0x4298             CMP      R0,R3
   \   000000D0   0xD106             BNE.N    ??uart_init_10
     73          					SIM_SCGC4 |= SIM_SCGC4_UART3_MASK;
   \   000000D2   0x....             LDR.N    R3,??DataTable0_18  ;; 0x40048034
   \   000000D4   0x681B             LDR      R3,[R3, #+0]
   \   000000D6   0xF453 0x5300      ORRS     R3,R3,#0x2000
   \   000000DA   0x....             LDR.N    R4,??DataTable0_18  ;; 0x40048034
   \   000000DC   0x6023             STR      R3,[R4, #+0]
   \   000000DE   0xE00F             B.N      ??uart_init_7
     74          				else
     75          					if(uartch == UART4_BASE_PTR)
   \                     ??uart_init_10:
   \   000000E0   0x....             LDR.N    R3,??DataTable0_12  ;; 0x400ea000
   \   000000E2   0x4298             CMP      R0,R3
   \   000000E4   0xD106             BNE.N    ??uart_init_11
     76          						SIM_SCGC1 |= SIM_SCGC1_UART4_MASK;
   \   000000E6   0x....             LDR.N    R3,??DataTable0_19  ;; 0x40048028
   \   000000E8   0x681B             LDR      R3,[R3, #+0]
   \   000000EA   0xF453 0x6380      ORRS     R3,R3,#0x400
   \   000000EE   0x....             LDR.N    R4,??DataTable0_19  ;; 0x40048028
   \   000000F0   0x6023             STR      R3,[R4, #+0]
   \   000000F2   0xE005             B.N      ??uart_init_7
     77          					else
     78          						SIM_SCGC1 |= SIM_SCGC1_UART5_MASK;
   \                     ??uart_init_11:
   \   000000F4   0x....             LDR.N    R3,??DataTable0_19  ;; 0x40048028
   \   000000F6   0x681B             LDR      R3,[R3, #+0]
   \   000000F8   0xF453 0x6300      ORRS     R3,R3,#0x800
   \   000000FC   0x....             LDR.N    R4,??DataTable0_19  ;; 0x40048028
   \   000000FE   0x6023             STR      R3,[R4, #+0]
     79          								
     80          	//禁止发送接受
     81          	UART_C2_REG(uartch) &= ~(UART_C2_TE_MASK
     82          				| UART_C2_RE_MASK );
   \                     ??uart_init_7:
   \   00000100   0x78C3             LDRB     R3,[R0, #+3]
   \   00000102   0xF013 0x03F3      ANDS     R3,R3,#0xF3
   \   00000106   0x70C3             STRB     R3,[R0, #+3]
     83          	
     84          	//配置成8位无校验模式
     85          	UART_C1_REG(uartch) = 0;
   \   00000108   0x2300             MOVS     R3,#+0
   \   0000010A   0x7083             STRB     R3,[R0, #+2]
     86          	
     87          	//计算波特率，串口0、1使用内核时钟，其它串口使用外设时钟，系统时钟为
     88          	//外设时钟的2倍
     89          	if ((uartch == UART0_BASE_PTR) | (uartch == UART1_BASE_PTR))//
   \   0000010C   0x....             LDR.N    R3,??DataTable0  ;; 0x4006a000
   \   0000010E   0x4298             CMP      R0,R3
   \   00000110   0xD008             BEQ.N    ??uart_init_12
   \   00000112   0x2300             MOVS     R3,#+0
   \   00000114   0x....             LDR.N    R4,??DataTable0_3  ;; 0x4006b000
   \   00000116   0x42A0             CMP      R0,R4
   \   00000118   0xD004             BEQ.N    ??uart_init_12
   \   0000011A   0xF053 0x0300      ORRS     R3,R3,#0x0
   \   0000011E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000120   0x2B00             CMP      R3,#+0
   \   00000122   0xD000             BEQ.N    ??uart_init_13
     90          		sysclk+=sysclk;
   \                     ??uart_init_12:
   \   00000124   0x1849             ADDS     R1,R1,R1
     91          	
     92          	sbr = (uint16)((sysclk*1000)/(baud * 16));
   \                     ??uart_init_13:
   \   00000126   0xF44F 0x737A      MOV      R3,#+1000
   \   0000012A   0xFB03 0xF301      MUL      R3,R3,R1
   \   0000012E   0x0114             LSLS     R4,R2,#+4
   \   00000130   0xFBB3 0xF3F4      UDIV     R3,R3,R4
     93          	temp = UART_BDH_REG(uartch) & ~(UART_BDH_SBR(0x1F));
   \   00000134   0x7804             LDRB     R4,[R0, #+0]
   \   00000136   0xF014 0x04E0      ANDS     R4,R4,#0xE0
     94          	UART_BDH_REG(uartch) = temp |  UART_BDH_SBR(((sbr & 0x1F00) >> 8));
   \   0000013A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000013C   0x0A1D             LSRS     R5,R3,#+8
   \   0000013E   0xF015 0x051F      ANDS     R5,R5,#0x1F
   \   00000142   0x432C             ORRS     R4,R5,R4
   \   00000144   0x7004             STRB     R4,[R0, #+0]
     95          	UART_BDL_REG(uartch) = (uint8)(sbr & UART_BDL_SBR_MASK);
   \   00000146   0x7043             STRB     R3,[R0, #+1]
     96          	brfa = (((sysclk*32000)/(baud * 16)) - (sbr * 32));
   \   00000148   0xF44F 0x44FA      MOV      R4,#+32000
   \   0000014C   0x4361             MULS     R1,R4,R1
   \   0000014E   0x0112             LSLS     R2,R2,#+4
   \   00000150   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   \   00000154   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000156   0xEBB1 0x1143      SUBS     R1,R1,R3, LSL #+5
     97          	temp = UART_C4_REG(uartch) & ~(UART_C4_BRFA(0x1F));
   \   0000015A   0x7A82             LDRB     R2,[R0, #+10]
   \   0000015C   0xF012 0x04E0      ANDS     R4,R2,#0xE0
     98          	UART_C4_REG(uartch) = temp |  UART_C4_BRFA(brfa);    
   \   00000160   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \   00000164   0x4321             ORRS     R1,R1,R4
   \   00000166   0x7281             STRB     R1,[R0, #+10]
     99          	
    100          	//使能发送接受
    101          	UART_C2_REG(uartch) |= (UART_C2_TE_MASK
    102          				| UART_C2_RE_MASK );
   \   00000168   0x78C1             LDRB     R1,[R0, #+3]
   \   0000016A   0xF051 0x010C      ORRS     R1,R1,#0xC
   \   0000016E   0x70C1             STRB     R1,[R0, #+3]
    103          }
   \   00000170   0xBC30             POP      {R4,R5}
   \   00000172   0x4770             BX       LR               ;; return
    104          
    105          //-------------------------------------------------------------------------*
    106          //函数名: uart_re1                                                         *
    107          //功  能: 串行接受1个字节                                                  *
    108          //参  数: uartch: 串口号                                                   *
    109          //         ch:    接收到的字节                                             *
    110          //返  回: 成功:1;失败:0                                                    *
    111          //说  明:                                                                  *
    112          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
    113          uint8 uart_re1 (UART_MemMapPtr uartch,uint8 *ch)
    114          {
    115              uint32 k;
    116              
    117              for (k = 0; k < 0xfbbb; k++)//有时间限制
   \                     uart_re1:
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0xE000             B.N      ??uart_re1_0
   \                     ??uart_re1_1:
   \   00000004   0x1C52             ADDS     R2,R2,#+1
   \                     ??uart_re1_0:
   \   00000006   0xF64F 0x33BB      MOVW     R3,#+64443
   \   0000000A   0x429A             CMP      R2,R3
   \   0000000C   0xD206             BCS.N    ??uart_re1_2
    118          		if((UART_S1_REG(uartch) & UART_S1_RDRF_MASK)!= 0)//判断接收缓冲区是否满
   \   0000000E   0x7903             LDRB     R3,[R0, #+4]
   \   00000010   0x069B             LSLS     R3,R3,#+26
   \   00000012   0xD5F7             BPL.N    ??uart_re1_1
    119          		{
    120          			*ch = UART_D_REG(uartch);
   \   00000014   0x79C0             LDRB     R0,[R0, #+7]
   \   00000016   0x7008             STRB     R0,[R1, #+0]
    121          			return 1; 			//接受成功
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xE006             B.N      ??uart_re1_3
    122          		} 
    123          	if(k>=0xfbbb) 
   \                     ??uart_re1_2:
   \   0000001C   0xF64F 0x30BB      MOVW     R0,#+64443
   \   00000020   0x4282             CMP      R2,R0
   \   00000022   0xD301             BCC.N    ??uart_re1_4
    124          	{
    125          		return 0;			//接受失败
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xE000             B.N      ??uart_re1_3
    126          	} 
    127              return 0;
   \                     ??uart_re1_4:
   \   00000028   0x2000             MOVS     R0,#+0
   \                     ??uart_re1_3:
   \   0000002A   0x4770             BX       LR               ;; return
    128          }
    129          
    130          //-------------------------------------------------------------------------*
    131          //函数名: uart_send1                                                       *
    132          //功  能: 串行发送1个字节                                                  *
    133          //参  数: uartch: 串口号                                                   *
    134          //         ch:    要发送的字节                                             *
    135          //返  回: 无                                                               *
    136          //说  明:                                                                  *
    137          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
    138          void uart_send1 (UART_MemMapPtr uartch, uint8 ch)
    139          {
    140              //等待发送缓冲区空
    141              while(!(UART_S1_REG(uartch) & UART_S1_TDRE_MASK));
   \                     uart_send1:
   \                     ??uart_send1_0:
   \   00000000   0x7902             LDRB     R2,[R0, #+4]
   \   00000002   0x0612             LSLS     R2,R2,#+24
   \   00000004   0xD5FC             BPL.N    ??uart_send1_0
    142              //发送数据
    143              UART_D_REG(uartch) = (uint8)ch;
   \   00000006   0x71C1             STRB     R1,[R0, #+7]
    144           }
   \   00000008   0x4770             BX       LR               ;; return
    145          
    146          //-------------------------------------------------------------------------*
    147          //函数名: uart_reN                                                         *
    148          //功  能: 串行 接收n个字节                                                 *
    149          //参  数: uartch: 串口号                                                   *
    150          //        buff: 接收缓冲区                                                 *
    151          //		  len:接收长度                                             *
    152          //返  回: 1:成功;0:失败                                                    *
    153          //说  明:                                                                  *
    154          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
    155          uint8 uart_reN (UART_MemMapPtr uartch ,uint8* buff,uint16 len)
    156          {
   \                     uart_reN:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    157              uint16 m=0; 
   \   00000008   0x2700             MOVS     R7,#+0
   \   0000000A   0xE000             B.N      ??uart_reN_0
    158              while (m < len)
    159              { 	          
    160            	    if(0==uart_re1(uartch,&buff[m]))
    161            	    	return 0;  //接收失败
    162            	    else m++;
   \                     ??uart_reN_1:
   \   0000000C   0x1C7F             ADDS     R7,R7,#+1
   \                     ??uart_reN_0:
   \   0000000E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000010   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000012   0x42B7             CMP      R7,R6
   \   00000014   0xD208             BCS.N    ??uart_reN_2
   \   00000016   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000018   0x1979             ADDS     R1,R7,R5
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       uart_re1
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD1F3             BNE.N    ??uart_reN_1
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xE000             B.N      ??uart_reN_3
    163              } 
    164              
    165              return 1;          //接收成功
   \                     ??uart_reN_2:
   \   00000028   0x2001             MOVS     R0,#+1
   \                     ??uart_reN_3:
   \   0000002A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    166              
    167          }
    168          
    169          //-------------------------------------------------------------------------*
    170          //函数名: uart_sendN                                                       *
    171          //功  能: 串行 接收n个字节                                                 *
    172          //参  数: uartch: 串口号                                                   *
    173          //        buff: 发送缓冲区                                                 *
    174          //		  len:发送长度                                             *
    175          //返  回: 无                                                               *
    176          //说  明:                                                                  *
    177          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
    178          void uart_sendN (UART_MemMapPtr uartch ,uint8* buff,uint16 len)
    179          {
   \                     uart_sendN:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    180              int i;
    181          	for(i=0;i<len;i++)
   \   00000008   0x2700             MOVS     R7,#+0
   \   0000000A   0xE004             B.N      ??uart_sendN_0
    182              {
    183          		uart_send1(uartch,buff[i]);
   \                     ??uart_sendN_1:
   \   0000000C   0x5D79             LDRB     R1,[R7, R5]
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       uart_send1
    184              }
   \   00000014   0x1C7F             ADDS     R7,R7,#+1
   \                     ??uart_sendN_0:
   \   00000016   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000018   0x42B7             CMP      R7,R6
   \   0000001A   0xDBF7             BLT.N    ??uart_sendN_1
    185          }
   \   0000001C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    186          
    187          //-------------------------------------------------------------------------*
    188          //函数名: enableuartreint                                                  *
    189          //功  能: 开串口接收中断                                                   *
    190          //参  数: uartch: 串口号                                                   *
    191          //        irqno: 对应irq号                                                 *
    192          //返  回: 无                                                               *
    193          //说  明:                                                                  *
    194          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
    195          void enableuartreint(UART_MemMapPtr uartch,uint8 irqno)
    196          {
   \                     enableuartreint:
   \   00000000   0xB580             PUSH     {R7,LR}
    197          	UART_C2_REG(uartch)|=UART_C2_RIE_MASK;   //开放UART接收中断
   \   00000002   0x78C2             LDRB     R2,[R0, #+3]
   \   00000004   0xF052 0x0220      ORRS     R2,R2,#0x20
   \   00000008   0x70C2             STRB     R2,[R0, #+3]
    198          	enable_irq(irqno);			 //开接收引脚的IRQ中断
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x0008             MOVS     R0,R1
   \   0000000E   0x.... 0x....      BL       enable_irq
    199          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    200          
    201          //-------------------------------------------------------------------------*
    202          //函数名: disableuartreint                                                 *
    203          //功  能: 关串口接收中断                                                   *
    204          //参  数: uartch: 串口号                                                   *
    205          //        irqno: 对应irq号                                                 *
    206          //返  回: 无                                                               *
    207          //说  明:                                                                  *
    208          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
    209          void disableuartreint(UART_MemMapPtr uartch,uint8 irqno)
    210          {
   \                     disableuartreint:
   \   00000000   0xB580             PUSH     {R7,LR}
    211          	UART_C2_REG(uartch)&=~UART_C2_RIE_MASK;   //禁止UART接收中断
   \   00000002   0x78C2             LDRB     R2,[R0, #+3]
   \   00000004   0xF012 0x02DF      ANDS     R2,R2,#0xDF
   \   00000008   0x70C2             STRB     R2,[R0, #+3]
    212          	disable_irq(irqno);			  //关接收引脚的IRQ中断
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x0008             MOVS     R0,R1
   \   0000000E   0x.... 0x....      BL       disable_irq
    213          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x4006A000         DC32     0x4006a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x4004C018         DC32     0x4004c018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x4004C01C         DC32     0x4004c01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   0x4006B000         DC32     0x4006b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_4:
   \   00000000   0x4004B010         DC32     0x4004b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_5:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_6:
   \   00000000   0x4006C000         DC32     0x4006c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_7:
   \   00000000   0x4004C00C         DC32     0x4004c00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_8:
   \   00000000   0x4004C008         DC32     0x4004c008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_9:
   \   00000000   0x4006D000         DC32     0x4006d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_10:
   \   00000000   0x4004B044         DC32     0x4004b044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_11:
   \   00000000   0x4004B040         DC32     0x4004b040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_12:
   \   00000000   0x400EA000         DC32     0x400ea000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_13:
   \   00000000   0x4004D060         DC32     0x4004d060

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_14:
   \   00000000   0x4004D064         DC32     0x4004d064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_15:
   \   00000000   0x400EB000         DC32     0x400eb000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_16:
   \   00000000   0x4004D020         DC32     0x4004d020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_17:
   \   00000000   0x4004D024         DC32     0x4004d024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_18:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_19:
   \   00000000   0x40048028         DC32     0x40048028
    214          
    215          
    216          
    217          
    218          
    219          
    220          
    221          
    222          
    223          
    224          
    225          
    226          
    227          
    228          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  disableuartreint
              8 -> disable_irq
        8  enableuartreint
              8 -> enable_irq
        8  uart_init
        0  uart_re1
       24  uart_reN
             24 -> uart_re1
        0  uart_send1
       24  uart_sendN
             24 -> uart_send1


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_10
       4  ??DataTable0_11
       4  ??DataTable0_12
       4  ??DataTable0_13
       4  ??DataTable0_14
       4  ??DataTable0_15
       4  ??DataTable0_16
       4  ??DataTable0_17
       4  ??DataTable0_18
       4  ??DataTable0_19
       4  ??DataTable0_2
       4  ??DataTable0_3
       4  ??DataTable0_4
       4  ??DataTable0_5
       4  ??DataTable0_6
       4  ??DataTable0_7
       4  ??DataTable0_8
       4  ??DataTable0_9
      20  disableuartreint
      20  enableuartreint
     372  uart_init
      44  uart_re1
      44  uart_reN
      10  uart_send1
      30  uart_sendN

 
 620 bytes in section .text
 
 620 bytes of CODE memory

Errors: none
Warnings: none
